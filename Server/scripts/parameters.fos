// Author: cvet
#include "_macros.fos"

#ifdef __CLIENT

# include "_client_defines.fos"
# include "_msgstr.fos"

import void SetChosenTabLevelUp( bool enable )  from "Mk2";
import int  GUI_GetActiveScreen() from "client_gui";
import void ShowMercScreen( bool show ) from "client_main";
#endif

#ifndef __CLIENT
import void PerkUp( Critter& cr, uint perk ) from "perks";
import void PerkDown( Critter& cr, uint perk ) from "perks";
import int  maxNewbieExperience( Critter& cr, int exp ) from "q_newbie_scripts";
import bool AddFactionRating( int index, int val ) from "Mk2";

void changedParam_Experience( Critter& cr, uint, int oldValue )
{
    int exp = cr.StatBase[ ST_EXPERIENCE ] - oldValue;
    if( exp > 0 )
    {
        uint level = cr.Stat[ ST_LEVEL ];
        if( level >= __LevelCap && not __LevelCapAddExperience )
            return;

        exp += exp * ( cr.Perk[ PE_SWIFT_LEARNER ] * 10 ) / 100; // SwiftLearner perk
        if( __ExperienceRate > 1 )
            exp = exp * __ExperienceRate;
        cr.StatBase[ ST_EXPERIENCE ] = oldValue + exp;

        // ќбработка начальной локации


        int ret = maxNewbieExperience( cr, exp );

        if( ret != 0 )
        {
            if( ret > 0 )
                cr.StatBase[ ST_EXPERIENCE ] -= ret;
            else if( ret < 0 )
                cr.StatBase[ ST_EXPERIENCE ] = 0 - ret;
        }

        if( level >= __LevelCap )
            return;

        int perkUp = ( cr.Trait[ TRAIT_SKILLED ] != 0 ? 4 : 3 );
        while( level < __LevelCap )
        {
            if( cr.StatBase[ ST_EXPERIENCE ] >= NextLevelNeedExp( cr ) )
            {
                level++;
                cr.StatBase[ ST_LEVEL ]++;

                cr.StatBase[ ST_UNSPENT_SKILL_POINTS ] += 5 + cr.StatBase[ ST_INTELLECT ] * 2; // Skill points
                if( cr.Trait[ TRAIT_SKILLED ] != 0 )
                    cr.StatBase[ ST_UNSPENT_SKILL_POINTS ] += 5;                               // Skilled trait
                cr.StatBase[ ST_UNSPENT_SKILL_POINTS ] += cr.Perk[ PE_EDUCATED ] * 2;          // Educated perk
                if( cr.StatBase[ ST_UNSPENT_SKILL_POINTS ] > 99 )
                    cr.StatBase[ ST_UNSPENT_SKILL_POINTS ] = 99;                               // Clamp skill points
                uint bonusHP = 0;
                if( cr.StatBase[ ST_STRENGTH ] % 2 != 0 && cr.StatBase[ ST_LEVEL ] % 2 != 0 )
                    bonusHP = 1;
                if( __MaxLifeLevelSoftCap == 0 || uint( cr.Stat[ ST_LEVEL ] ) <= __MaxLifeLevelSoftCap )
                    cr.StatBase[ ST_MAX_LIFE ] += cr.StatBase[ ST_ENDURANCE ] + cr.StatBase[ ST_STRENGTH ] / 2 + bonusHP;       // Add max hp

                if( ( level % perkUp ) == 0 )
                {
                    cr.StatBase[ ST_UNSPENT_PERKS ] = 1;
                }
            }
            else
                break;
        }
    }
}

void changedParam_Perks( Critter& cr, uint perk, int oldValue )
{
    int curValue = cr.Param[ perk ];
    if( curValue > oldValue )
        for( uint i = 0, iMax = curValue - oldValue; i < iMax; i++ )
            PerkUp( cr, perk );
    else if( curValue < oldValue )
        for( uint i = 0, iMax = oldValue - curValue; i < iMax; i++ )
            PerkDown( cr, perk );
}

void changedParam_Hide( Critter& cr, uint, int oldValue )
{
    if( cr.Mode[ MODE_HIDE ] == 0 && cr.IsPlayer() && cr.GetAccess() == ACCESS_ADMIN )
    {
        cr.ModeBase[ MODE_HIDE ] = 1;
    }
    cr.RefreshVisible();
}

void unhide( Critter& cr, int, int, int ) // Костыль, ну а хуле?
{
    SetParam( cr, MODE_HIDE, 0 );
    cr.RefreshVisible();
}

int NextLevelNeedExp( Critter& cr ) // Export
{
    int level = cr.Stat[ ST_LEVEL ];
    return NUMERICAL_NUMBER( level ) * 1000;
}

void changedParam_ArmorGadget( Critter& cr, uint, int oldValue )
{
    if( oldValue == 1 )
        cr.EraseTimeEvents( CTE_ARMOR_GADGET );
    else
        cr.AddTimeEvent( "cte_ArmorGadget", 1, CTE_ARMOR_GADGET );
}

uint cte_ArmorGadget( Critter& cr, int identifier, int& rate, int& )
{
    Item@[] armor;
    cr.GetItems( SLOT_ARMOR, armor );
    if( !valid( armor ) || armor.length() < 1 )
        return 0;
    armor[ 0 ].Charge--;
    armor[ 0 ].Update();
    if( armor[ 0 ].Charge <= 0 )
    {
        if( cr.Param[ ARMOR_PERK_ADVANCED_I ] > 0 || cr.Param[ ARMOR_PERK_ADVANCED_II ] > 0 )
        {
            cr.ModeBase[ MODE_TERMOVISOR ] = 0;
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 531 );
            return 0;
        }
    }
    return REAL_SECOND( 20 );
}

#endif

#ifdef __CLIENT
void changedParam_Level( CritterCl& cr, uint, int oldValue )
{
    if( cr.ParamBase[ ST_LEVEL ] > oldValue )
    {
        PlaySound( "LEVELUP.ACM" );
        Message( TEXTMSG_GAME, STR_GAIN_LEVELUP, FOMB_GAME );
        SetChosenTabLevelUp( true );
    }
}

void changedParam_Experience( CritterCl& cr, uint, int oldValue )
{
    int curValue = cr.ParamBase[ ST_EXPERIENCE ];

    if( curValue > oldValue )
        Message( ReplaceText( GetMsgStr( TEXTMSG_GAME, STR_GAIN_EXPERIENCE ), "VALUE", curValue - oldValue ), FOMB_GAME );
}

void changedParam_UnspentPerks( CritterCl& cr, uint, int oldValue )
{
    if( cr.ParamBase[ ST_UNSPENT_PERKS ] > 0 && GUI_GetActiveScreen() == CLIENT_SCREEN_CHARACTER )
        ShowScreen( CLIENT_SCREEN_PERK, 0, 0, 0 );
}

void changedParam_VisorMode( CritterCl& cr, uint, int oldValue )
{
    if( oldValue == 0 )
    {
        uint   EffectBackground = EFFECT_2D_GENERIC | EFFECT_2D_TILE | EFFECT_2D_ROOF;
        SetEffect( EFFECT_2D_CRITTER, 0,  "TermoVisor" );
        SetEffect( EffectBackground, 0,  "VisorBack" );
    }
    else
        RunServerScriptUnsafe( "Mk2@unsafe_Drugs::Check", 0, 0, 0, null, null );
}

void changedParam_NVMode( CritterCl& cr, uint, int oldValue )
{
    if( oldValue == 0 )
    {
        uint   EffectAll = EFFECT_2D_GENERIC | EFFECT_2D_TILE | EFFECT_2D_ROOF | EFFECT_2D_CRITTER;
        SetEffect( EffectAll, 0,  "NightVisor" );
    }
    else
        RunServerScriptUnsafe( "Mk2@unsafe_Drugs::Check", 0, 0, 0, null, null );
}

void changedParam_Leadership( CritterCl& cr, uint index, int oldValue )
{
    if( !cr.IsChosen() )
        return;
    if( oldValue <= 0 && cr.Param[ index ] > 0 )
        ShowMercScreen( true );
    else if( oldValue > 0 && cr.Param[ index ] <= 0 )
        ShowMercScreen( false );
}

#endif

// Parameters generation
// For server and client
// Both generation need be equal
// Input for player: 7 special, 3 tag skills, 2 traits, age, gender
// Imput for npc: data from prototype
#ifndef __CLIENT
# define _param_    cr.ParamBase
void player_data_generate( Critter& cr ) // Export to main@critter_init
#endif
#ifdef __CLIENT
# define _param_    data
void player_data_generate( int[]& data ) // Export to client_main@player_data_generate
#endif
{
    if( _param_[ ST_LEVEL ] <= 0 )
        _param_[ ST_LEVEL ] = 1;

    if( _param_[ TRAIT_SMALL_FRAME ] != 0 )
        _param_[ ST_AGILITY ] += 1;
    if( _param_[ TRAIT_BRUISER ] != 0 )
        _param_[ ST_STRENGTH ] += 2;
    if( _param_[ TRAIT_GOOD_NATURED ] != 0 )
    {
        _param_[ SK_FIRST_AID ] += 15;
        _param_[ SK_DOCTOR ] += 15;
        _param_[ SK_SPEECH ] += 15;
        _param_[ SK_BARTER ] += 15;
        _param_[ SK_SMALL_GUNS ] -= 10;
        _param_[ SK_BIG_GUNS ] -= 10;
        _param_[ SK_ENERGY_WEAPONS ] -= 10;
        _param_[ SK_UNARMED ] -= 10;
        _param_[ SK_THROWING ] -= 10;
    }
    // if(_param_[TRAIT_GIFTED]!=0)
    // {
    //	for(uint i=ST_STRENGTH;i<=ST_LUCK;i++) _param_[i]++;
    //	for(uint i=SKILL_BEGIN;i<=SKILL_END;i++) _param_[i]-=10;
    // }

    _param_[ SK_SMALL_GUNS ] += 5 + 4 * _param_[ ST_AGILITY ];
    _param_[ SK_BIG_GUNS ] += 0 + 2 * _param_[ ST_AGILITY ];
    _param_[ SK_ENERGY_WEAPONS ] += 0 + 2 * _param_[ ST_AGILITY ];
    _param_[ SK_UNARMED ] += 30 + 2 * ( _param_[ ST_AGILITY ] + _param_[ ST_STRENGTH ] );
    _param_[ SK_LIONHEART ] += 0 + _param_[ ST_AGILITY ] * 6;
    _param_[ SK_THROWING ] += 0 + 4 * _param_[ ST_AGILITY ];
    _param_[ SK_FIRST_AID ] += 0 + 2 * ( _param_[ ST_PERCEPTION ] + _param_[ ST_INTELLECT ] );
    _param_[ SK_DOCTOR ] += 5 + _param_[ ST_PERCEPTION ] + _param_[ ST_INTELLECT ];
    _param_[ SK_SNEAK ] += 5 + 3 * _param_[ ST_AGILITY ];
    _param_[ SK_LOCKPICK ] += 10 + _param_[ ST_PERCEPTION ] + _param_[ ST_AGILITY ];
    _param_[ SK_STEAL ] += 0 + 3 * _param_[ ST_AGILITY ];
    _param_[ SK_TRAPS ] += 10 + _param_[ ST_PERCEPTION ] + _param_[ ST_AGILITY ];
    _param_[ SK_SCIENCE ] += 0 + 4 * _param_[ ST_INTELLECT ];
    _param_[ SK_REPAIR ] += 0 + 3 * _param_[ ST_INTELLECT ];
    _param_[ SK_SPEECH ] += 0 + 5 * _param_[ ST_CHARISMA ];
    _param_[ SK_BARTER ] += 0 + 4 * _param_[ ST_CHARISMA ];
    _param_[ SK_GAMBLING ] += 0 + 5 * _param_[ ST_LUCK ];
    _param_[ SK_OUTDOORSMAN ] += 0 + 2 * ( _param_[ ST_ENDURANCE ] + _param_[ ST_INTELLECT ] );

    if( _param_[ TAG_SKILL1 ] != 0 )
        _param_[ _param_[ TAG_SKILL1 ] ] += 20;
    if( _param_[ TAG_SKILL2 ] != 0 )
        _param_[ _param_[ TAG_SKILL2 ] ] += 20;
    if( _param_[ TAG_SKILL3 ] != 0 )
        _param_[ _param_[ TAG_SKILL3 ] ] += 20;

    if( _param_[ TRAIT_FAST_METABOLISM ] != 0 )
    {
        _param_[ ST_RADIATION_RESISTANCE ] -= _param_[ ST_ENDURANCE ] * 2;
        _param_[ ST_POISON_RESISTANCE ] -= _param_[ ST_ENDURANCE ] * 5;
        _param_[ ST_HEALING_RATE ] += 4;
    }
    if( _param_[ TRAIT_BRUISER ] != 0 )
        _param_[ ST_ACTION_POINTS ] -= 2;
    if( _param_[ TRAIT_KAMIKAZE ] != 0 )
    {
        _param_[ ST_ARMOR_CLASS ] -= _param_[ ST_AGILITY ] * 2;
        _param_[ ST_SEQUENCE ] += 5;
    }
    if( _param_[ TRAIT_HEAVY_HANDED ] != 0 )
        _param_[ ST_MELEE_DAMAGE ] += 5;
    if( _param_[ TRAIT_FINESSE ] != 0 )
        _param_[ ST_CRITICAL_CHANCE ] += 10;
    if( _param_[ TRAIT_HEAVY_HANDED ] != 0 )
        _param_[ ST_MAX_CRITICAL ] -= 15;
    // if(_param_[TRAIT_FAST_SHOT]!=0) _param_[MODE_NO_AIM]=1;

    #ifdef __CLIENT
    // Runtime calculations, only for client registration
    // _param_[ST_ARMOR_CLASS]+=_param_[ST_AGILITY]*2;
    _param_[ ST_MAX_LIFE ] += _param_[ ST_STRENGTH ] + _param_[ ST_ENDURANCE ] * 2;
    _param_[ ST_ACTION_POINTS ] += _param_[ ST_AGILITY ] / 2;
    _param_[ ST_CARRY_WEIGHT ] += LBS_TO_GRAMM( 141 + _param_[ ST_STRENGTH ] * 13 );
    _param_[ ST_MELEE_DAMAGE ] += ( _param_[ ST_STRENGTH ] > 6 ? ( ( _param_[ ST_STRENGTH ] - 5 ) * 2 ) : 1 );
    _param_[ ST_POISON_RESISTANCE ] += _param_[ ST_ENDURANCE ] * 5;
    _param_[ ST_RADIATION_RESISTANCE ] += _param_[ ST_ENDURANCE ] * 2;
    _param_[ ST_SEQUENCE ] += _param_[ ST_PERCEPTION ] * 2;
    _param_[ ST_HEALING_RATE ] += MAX( 1, _param_[ ST_ENDURANCE ] / 2 + _param_[ ST_STRENGTH ] / 3 );
    _param_[ ST_CRITICAL_CHANCE ] += _param_[ ST_LUCK ];
    #endif

    _param_[ ST_MAX_LIFE ] += 15;
    _param_[ ST_ACTION_POINTS ] += 5;
    _param_[ ST_CURRENT_HP ] = _param_[ ST_MAX_LIFE ];
    _param_[ ST_DEAD_HIT_POINTS ] = __DeadHitPoints;
    _param_[ ST_CURRENT_AP ] = _param_[ ST_ACTION_POINTS ] * 100;
}

#ifdef __CLIENT
# include "_msgstr.fos"
// Check valid of input data
bool player_data_check( int[]& data ) 
{
    // Check special
    int special = 0;
    for( uint i = ST_STRENGTH; i <= ST_LUCK; i++ )
    {
        if( data[ i ] < 1 || data[ i ] > 10 )
        {
            Message( GetMsgStr( TEXTMSG_GAME, STR_NET_WRONG_SPECIAL ) );
            return false;
        }
        special += data[ i ];
    }

    if( ( data[ ST_STRENGTH ] > 8 && data[ TRAIT_BRUISER ] != 0 ) ||
        ( data[ ST_AGILITY ] > 9 && data[ TRAIT_SMALL_FRAME ] != 0 ) )
    {
        Message( GetMsgStr( TEXTMSG_GAME, STR_NET_WRONG_SPECIAL ) );
        return false;
    }

    if( special != __StartSpecialPoints )
    {
        Message( GetMsgStr( TEXTMSG_GAME, STR_NET_WRONG_SPECIAL ) );
        return false;
    }

    // Check choosed tag skills
    if( ( data[ TAG_SKILL1 ] < int(SKILL_BEGIN) || data[ TAG_SKILL1 ] > int(SKILL_END) ) ||
        ( data[ TAG_SKILL2 ] < int(SKILL_BEGIN) || data[ TAG_SKILL2 ] > int(SKILL_END) ) ||
        ( data[ TAG_SKILL3 ] < int(SKILL_BEGIN) || data[ TAG_SKILL3 ] > int(SKILL_END) ) )
    {
        Message( GetMsgStr( TEXTMSG_GAME, STR_NET_WRONG_TAGSKILL ) );
        return false;
    }
    return true;
}
#endif

#ifndef __CLIENT
void NpcProcessLevel( Critter& npc ) // Export
{
    for( int i = 0, iMax = npc.Stat[ ST_LEVEL ]; i < iMax; i++ )
    {
        // Todo: ...
        // npc.StatBase[ST_MAX_LIFE]+=10;
    }
}


void changedParam_debug( Critter& cr, uint index, int oldValue )
{
	int curValue = cr.ParamBase[ index ];
	cr.Say( SAY_NETMSG,  "Change param " + index + " " + curValue + " " + oldValue );
	ScriptInfo::CallStackToLog();
}

#endif
