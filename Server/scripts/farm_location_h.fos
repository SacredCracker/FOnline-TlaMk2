
namespace Farm
{

    #ifdef __SERVER
    import::Item@ AddBlueprint( ::Item& cont, const uint16& in pid, const uint16& in count ) from "fix_boy";
    import::Item@ AddBlueprint( ::Map& map, const uint16& in  hexX, const uint16& in  hexY, const uint16& in pid, const uint16& in count ) from "fix_boy";
    import::Item@ AddBlueprint( ::Critter& cr, const uint16& in pid, const uint16& in count ) from "fix_boy";

    # ifdef _MODULE_FARM_MAIN
    ::dictionary LibraryContent;
    ::FarmMob@[] AllMobs;
    ::FarmLocation@[] AllLocs;
    ::FarmTeamMob@[] AllTeamMobs;
    ::FarmBags@[] AllBags;
    ::FarmContainer@[] AllFarmContainer;
	
    void AddDefineItems( ::array< array< FarmItem@ > >& inout its, const uint& in pid )
    {
        if( pid <= AllBags.length() )
        {
            ::SlotBags@[] @ other = cast< ::FarmBags >( @AllBags[ pid - 1 ] ).Slots;
            if( valid( other ) )
                if( other.length() > 0 )
                    for( uint i = 0, iEnd = other[ 0 ].Items.length(); i < iEnd; i++ )
                        its.insertLast( other[ 0 ].Items[ i ] );
        }
    }
    # endif
    #endif
    #ifndef _MODULE_FARM_MAIN
    #endif

    namespace Constant
    {

        shared enum E_ProtoType
        {
            EPT_None,
            EPT_Mob,
            EPT_TeamMob,
            EPT_Bags,
            EPT_Container,
            EPT_Location,
            EPT_Count
        }

        namespace Mob
        {
            shared enum Data
            {
                Proto = 0,
                Bag,
                Type,
                TypeVar,
                CountData
            }

            shared enum E_Type
            {
                Basic = 0,
                Dead,
                AI,
                CountData
            }

            shared enum E_AI
            {
                Slayer = 0,
                Sniper,
                Term,
                CountAI
            }
        }
        // FLocation::Data::TimeDelete
        namespace FLocation
        {
            shared enum Data
            {
                Proto = 0,
                TimeDelete_Min,
                TimeDelete_Max,
                Type,
                CountPlayerMin,
                CountPlayerMax,
                PrivateTimeouts,
                GlobalTimeouts,
                PlayerLevelMin,
                PlayerLevelMax,
                CountData
            }

            shared enum E_Type
            {
                NoDelete = 0,
                TimeDelete,
                TimeRefresh,
                DeleteNoPlayer,
                TimeDeleteNoPlayer,
                CountType
            }
        }

        namespace Container
        {
            shared enum Data
            {
                Proto = 0,
                Bag,
                EntId,
                RespawnChance,
                RespawnBorderChance,
                NoCreate,
                CountData
            }
        }

        namespace Dialog
        {
            shared enum Result
            {
                LocCreate = 0,
                MinTeam,
                MaxTeam,
                GlobalTimeouts,
                PrivateTimeouts,
                Else,
                MinLevel,
                MaxLevel,
                CountResult
            }
        }

        namespace RealMap
        {
            shared enum DefData
            {
                OffsetsAccess = 80,
                CountDef
            }
        }
    }

    shared class Mob     // : Farm::CProto
    {
        Mob( const uint &in id ) final
        {
            ProtoType = Farm::Constant::E_ProtoType::EPT_Mob;
            Id = id;
            BagId = 0;
            ProtoId = 0;
            Param.resize( 0 );
            Type = 0;
            @ AiScript = null;
        }

        #ifdef __SERVER
        void Initialize( const::array< uint >& in data, const::array< Farm::Param@ >& in params, ::string@ script ) {}
        ::array< int >@ GetAddItems()
        {
            return null;
        }
        void InitCritter( ::Critter& inout mob ) {}
        #endif
        uint ProtoId;
        uint BagId;

        uint Type;
        uint TypeVar;

        ::string@ AiScript;

        ::array< Farm::Param@ > Param;


        bool IsInitialize() final
        {
            return ( IsInit != 1 );
        }

        protected uint8                   IsInit;
        Farm::Constant::E_ProtoType ProtoType;
        uint                            Id;
    }

    shared class TeamMobs     // : Farm::CProto
    {
        TeamMobs( const uint &in id ) final
        {
            ProtoType = Farm::Constant::E_ProtoType::EPT_TeamMob;
            Id = id;
            EntireSpawn = 0;
            StaticCount = false;

            CountSpawnEnt = 0;
            GeneralParamsLength = 0;
            CrittersCount = 0;
        }

        #ifdef __SERVER
        void Initialize( const::array< uint >& in critterIds, const uint& in entId, const uint& in min, const uint& in max, const::array< Farm::Param@ >& in params, const bool& in isStatic ) { ::Log( "Error!" ); };
        void Generate( ::Map& map, const uint8& in countPlayer, /* ToDo: */ uint& inout mapMobUID, array< uint >& values )                                                                              { ::Log( "Error!" ); };
        #endif

        ::array< uint > Critters;
        ::array< Farm::Param@  > GeneralParams;
        uint                    GeneralParamsLength;
        uint                    CrittersCount;

        uint                    EntireSpawn;

        Farm::UintPoint CountMobs;

        bool                    StaticCount;
        ::array< int > ParamsSpawnEnt;
        uint                    CountSpawnEnt;

        bool IsInitialize() final
        {
            return ( IsInit != 1 );
        }

        protected uint8                   IsInit;
        Farm::Constant::E_ProtoType ProtoType;
        uint                            Id;
    }

    // Прототип классов
    /*
       shared class CProto
       {
            CProto( )
            {
                    ProtoType = Farm::Constant::E_ProtoType::EPT_None;
                    IsInit = 1;
            }

            bool IsInitialize( ) final
            {
                    return ( IsInit != 1 );
            }

            protected uint8 IsInit;
            Farm::Constant::E_ProtoType ProtoType;
            uint Id;
       }*/

    // Primitive

    shared class UintPoint
    {
        UintPoint()
        {
            Min = 0;
            Max = 0;
        }

        void Set( const uint& in min, const uint& in max )
        {
            Min = min;
            Max = max;
        }

        uint Min;
        uint Max;
    }

    shared class Param
    {
        Param( const uint &in i, const int& in v, const uint &in pp )
        {
            Index = i;
            PercentPlayer = pp;
            Value = v;
        }

        int GetValue( const uint& in countPlayer )
        {
            if( countPlayer > 1 && PercentPlayer != 0 )
            {
                const float fmm = ( float(countPlayer) - 1 ) * ( ( float(Value) * 0.01 ) * PercentPlayer );
                Value += fmm;
                if( fmm - int(fmm) > 0 )
                    Value++;
            }
            return Value;
        }

        uint Index;
        uint PercentPlayer;
        int  Value;
    }

}
