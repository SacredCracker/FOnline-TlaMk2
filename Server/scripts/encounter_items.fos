// Author: rifleman17
#include "_macros.fos"
#include "encounter_items_table.fos"
#include "entire.fos"

#define ENTIRE_ITEM      ( 0 )                                    // Гекс для расположения итема
#define TABLE_COLUMNS    ( 6 )                                    // число колонок в таблице
#define TABLE_ITEMS      ( items_table.length() / TABLE_COLUMNS ) // всего определений итемов

#define MAX_TRIES        ( Defines::ETypeDefault )                        // максимальное число попыток найти подходящую по типу энкаунтера строку в таблице итемов
#define MIN_ITEMS        ( 0 )                                    // минимальное число итемов на энке
#define MAX_ITEMS        ( 8 )                                    // Максимальное

#define _GetType         # (idx)    ( items_table[ TABLE_COLUMNS * ( 0 + idx ) + 1 ] )
#define _GetPid          # (idx)    ( items_table[ TABLE_COLUMNS * ( 0 + idx ) + 0 ] )
#define _GetQty          # (idx)    ( Random( items_table[ TABLE_COLUMNS * ( 0 + idx ) + 2 ], items_table[ TABLE_COLUMNS * ( 0 + idx ) + 3 ] ) )
#define _GetChance       # (idx)  ( items_table[ TABLE_COLUMNS * ( 0 + idx ) + 4 ] )
#define _GetGex          # (idx)     ( items_table[ TABLE_COLUMNS * ( 0 + idx ) + 5 ] )
#define _IsCave          # (mapPid)  ( mapPid == MAP_e_cave0_in || mapPid == MAP_e_cave1_in || mapPid == MAP_e_cave2_in || mapPid == MAP_e_cave3_in || mapPid == MAP_e_cave4_in || mapPid == MAP_e_cave5_in || mapPid == MAP_e_coast5_cave )

// Фильтр таблицы по типу энка и гексу
uint16[]@ GetItemsInfo( uint8 eType, uint8 hex )
{
    uint16[] infos;
    for( uint16 i = 0; i < TABLE_ITEMS; i++ )
        if( ( _GetType( i ) == eType || _GetType( i ) == Defines::ETypeAny ) && _GetGex( i ) == hex )
            infos.insertLast( i );

    return @infos;
}

uint8 GetEncounterType( Map& map )
{
    uint mapPid = map.GetProtoId();
	
    if( _IsCave( mapPid ) )
        return Defines::ETypeCavern;

    Location @ loc = map.GetLocation();
    if( !valid( loc ) )
        return Defines::ETypeDefault;
    uint16 pid = loc.GetProtoId();
    if( pid >= LOCATION_DesertEncounter1 && pid <= LOCATION_DesertEncounter12 )
        return Defines::ETypeDesert;
    if( pid >= LOCATION_MountainEncounter1 && pid <= LOCATION_MountainEncounter6 )
        return Defines::ETypeMountains;
    if( pid >= LOCATION_CavernEncounter0 && pid <= LOCATION_CavernEncounter5 )
        return Defines::ETypeMountains;
    if( pid >= LOCATION_CityEncounter1 && pid <= LOCATION_CityEncounter8 )
        return Defines::ETypeCity;
    if( pid >= LOCATION_CoastEncounter1 && pid <= LOCATION_CoastEncounter11 )
        return Defines::ETypeCoast;
    if( pid >= LOCATION_OceanEncounter1 && pid <= LOCATION_OceanEncounter3 )
        return Defines::ETypeOcean;

    return Defines::ETypeDefault;
}

void GenerateItems( Map& map, Critter@[]@  grp )
{
    int minLuck = 8;
    if( @grp !is null )
		for( uint i = 0, iMax = grp.length() - 1; i < iMax; i++ )
		{
			Critter@ cr = grp[ i ];
			if( @cr is null ) continue;
			
			if( minLuck > cr.Stat[ ST_LUCK ] )
				minLuck = cr.Stat[ ST_LUCK ];
		}
	
    uint8 	itemz = Random( MIN_ITEMS, CLAMP( minLuck, 3, MAX_ITEMS ) ),
			mapType = GetEncounterType( map );

    Entire[] entires;
    for( uint i = 0, iMax = gex_table.length(); i < iMax; i++ )
        ParseEntires( map, entires, gex_table[ i ] );
	
    uint len = entires.length();
    if( len == 0 ) return;

    int8 tries = 30;
    uint[] foundedEntires;
    uint cur = 0;
    while( tries > 0 )
    {
        cur = Random( 0, len - 1 );
        if( foundedEntires.find( cur ) == -1 )
            foundedEntires.insertLast( cur );
        if( foundedEntires.length() > itemz )
            break;
        tries--;
    }

    int  idx = 0;
    bool found = false;
    for( uint i = 0, iMax = foundedEntires.length(); i < iMax; i++ )
    {
        Entire @ hex = entires[ foundedEntires[ i ] ];
        if( valid( hex ) )
        {
            uint16[]@ rows = @GetItemsInfo( mapType, hex.Number );
            if( rows.length() == 0 )
                continue;

            idx = rows[ Random( 0, rows.length() - 1 ) ];
            if( idx < 0 )
                continue;

            if( Random( 1, 99 ) < int( _GetChance( idx ) ) )
            {
                Item@[] items;
                for( uint j = 0, jMax = map.GetItems( hex.HexX, hex.HexY, 2, 0, items ); j < jMax; j++ )
                {
                    if( items[ j ].GetType() == ITEM_TYPE_CONTAINER )
                    {
                        uint qty = _GetQty( idx );
                        if( qty > 0 )
                            items[ j ].AddItem( _GetPid( idx ), qty, 0 );
                        found = true;
                        break;
                    }
                }
                if( !found )
                    map.AddItem( hex.HexX, hex.HexY, _GetPid( idx ), _GetQty( idx ) );
            }
        }
    }
}
