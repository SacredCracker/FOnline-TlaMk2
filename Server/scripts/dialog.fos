// Author: cvet, heX, Тринитротолуол, Tab10id
#include "_macros.fos"
#include "stdlib_h.fos"

// Возвращает размер группы (живых ее участников)
// размер береться вне зависимости от того лидер это или просто партиец

import void FlushScreen( Critter& cr, bool fadeOut, uint timeMs ) from "effects";

int DFGroupCount( Critter& player, Critter@ npc )
{
    Critter @ leader;
    if( not valid( player.GetFollowLeader() ) ) // если у игрока нет лидера
        @leader = player;                       // тогда считаем что он и есть лидер
    else
        @leader = player.GetFollowLeader();     // иначе берем лидера

    Critter@[] groups;
    groups.insertLast( @leader );
    leader.GetFollowGroup( FIND_LIFE, groups );
    return groups.length();
}

// !/ Размер группы больше >=VAL
bool d_GroupCountMore( Critter& player, Critter@ npc, int val )
{
    return DFGroupCount( player, npc ) >= val;
}

bool d_GroupCountLess( Critter& player, Critter@ npc, int val )
{
    return DFGroupCount( player, npc ) < val;
}

// !/ У всех уровень больше >=VAL
// Проверка что все игроки в группе больше или равны указанному уровню.
bool d_GroupLevelMore( Critter& player, Critter@ npc, int val )
{
    Critter@[] groups;
    groups.insertLast( @player );
    player.GetFollowGroup( FIND_LIFE, groups );
    for( uint i = 0, iMax = groups.length(); i < iMax; i++ )
        if( groups[ i ].Stat[ ST_LEVEL ] < val ) // если хотябы один из них меньше требуемого уровня
            return false;
    return true;
}

bool d_GroupLevelLess( Critter& player, Critter@ npc, int val )
{
    Critter@[] groups;
    groups.insertLast( @player );
    player.GetFollowGroup( FIND_LIFE, groups );
    for( uint i = 0, iMax = groups.length(); i < iMax; i++ )
        if( groups[ i ].Stat[ ST_LEVEL ] > val ) // если хотябы один из них меньше требуемого уровня
            return false;
    return true;
}

// Игрок нуждаеться в лечении?
bool d_IsToHeal( Critter& player, Critter@ npc )
{
    return player.Stat[ ST_CURRENT_HP ] < player.Stat[ ST_MAX_LIFE ];
}

// Игроку известна эта локация?
bool d_IsLocationVisible( Critter& player, Critter@ npc, int LocNum )
{
    return player.IsKnownLoc( false, uint16( LocNum ) );
}

// Игроку НЕ известна эта локация?
bool d_IsLocationNotVisible( Critter& player, Critter@ npc, int LocNum )
{
    return not player.IsKnownLoc( false, uint16( LocNum ) );
}

// Есть зависимости от наркотиков?
bool d_IsAddict( Critter& player, Critter@ npc )
{
    for( uint i = ADDICTION_BEGIN; i <= ADDICTION_END; i++ )
        if( player.Addiction[ i ] != 0 )
            return true;
    return false;
}

// У игрока нет зависимостей от наркотиков?
bool d_IsNotAddict( Critter& player, Critter@ npc )
{
    return not d_IsAddict( player, npc );
}

// Игрок в группе? (лидер тоже считаеться)
bool d_GroupPresent( Critter& player, Critter@ npc )
{
    return DFGroupCount( player, npc ) > 1;
}

// Игрок НЕ в группе? (лидер тоже считаеться)
bool d_NotGroupPresent( Critter& player, Critter@ npc )
{
    return not d_GroupPresent( player, npc );
}

/** проверка на таймаут
   используйте функцию r_TimeoutSet для инициализации
   если таймаут кончился (или еще и не начинался)
   то функция вернет истинну (разрешит ответ)
   иначе вернет ложь (ответ будет скрыт)
 */
bool d_TimeoutCheck( Critter& player, Critter@ npc )
{
    GameVar @ t = GetLocalVar( LVAR_timeout, npc.Id );
    if( not valid( t ) )
        return true;         // таймаут еще и не начался
    if( __FullSecond >= uint( t.GetValue() ) )
        return true;         // таймаут истек
    else
        return false;        // таймаут еще жив
}

/**
        инверсия d_TimeoutCheck
 */
bool d_NotTimeoutCheck( Critter& player, Critter@ npc )
{
    return not d_TimeoutCheck( player, npc );
}


// Проверка уникальной переменной - таймаута игрок-нпц
// Время прошло, или таймаут не назначался
bool d_TimeoutOk( Critter& player, Critter @ npc )
{
    if( !valid( npc ) )
        return false;
    GameVar @ to = GetUnicumVar( UVAR_uniq_timeout, player.Id, npc.Id );
    if( !valid( to ) )
        return false;
    uint time = to.GetValue();
    if( time == 0 )
        return true;
    return ( time < __FullSecond );
}

// Таймаут не закончился
bool d_NotTimeoutOk( Critter& player, Critter @ npc )
{
    return !d_TimeoutOk( player, npc );
}

bool d_CheckMonth( Critter& playe, Critter @npc, int monthFrom, int monthTo )
{
    return ( int( __Month ) <= monthTo && int( __Month ) >= monthFrom );
}

// НПЦ жив?
// в v0 указываем NpcRole НПЦ (на карте должен быть в 1 экземпляре)
// в v1 указываем PID карты (карта должна быть в игре в одном экземпляре)
bool d_IsLife( Critter& player, Critter@ npc, int v0, int v1 )
{
    Map @ map = GetMapByPid( v1, 0 );
    if( not valid( map ) )
    {
        Log( "error" );
        return false;
    }
    Critter @ crit = map.GetNpc( v0, FIND_ALL | FIND_ONLY_NPC, 0 );
    if( not valid( crit ) )
    {
        Log( "error" );
        return false;
    }
    if( crit.IsLife() )
        return true;
    else
        return false;
}

// НПЦ мертв?
bool d_IsDead( Critter& player, Critter@ npc, int v0, int v1 )
{
    return not d_IsLife( player, npc, v0, v1 );
}

// Шпионаж
void dlg_TrySpy( Critter& player, Critter@ banker, string@ playerName )
{
    if( !valid( banker ) )
        return;
    if( !IS_DIALOG_SAY_MODE( playerName ) || IS_DIALOG_END( playerName ) )
        return;
    if( playerName.length() <= 1 )
        return;

    uint     BankerDialog = banker.Stat[ ST_DIALOG_ID ];
    uint     DlgStr = 100;
    string   lexems = "$Victim " + playerName;

    Critter@ cr = GetPlayer( playerName );
    if( !valid( cr ) )
    {
        player.SayMsg( SAY_DIALOG, TEXTMSG_DLG, DLGSTR( BankerDialog, DlgStr + 0 ), lexems );
        return;
    }

    if( player.Id == cr.Id )
    {
        player.SayMsg( SAY_DIALOG, TEXTMSG_DLG, DLGSTR( BankerDialog, DlgStr + 9 ) );
        return;
    }

    // Пол.
    if( cr.Stat[ ST_GENDER ] == GENDER_MALE )
    {
        lexems += "$Gender @msg dlg " + DLGSTR( BankerDialog, DlgStr + 10 ) + "@";
    }
    else if( cr.Stat[ ST_GENDER ] == GENDER_FEMALE )
    {
        lexems += "$Gender @msg dlg " + DLGSTR( BankerDialog, DlgStr + 11 ) + "@";
    }
    else
    {
        lexems += "$Gender @msg dlg " + DLGSTR( BankerDialog, DlgStr + 12 ) + "@";
    }

    // Репликации.
    if( cr.Stat[ ST_REPLICATION_COUNT ] / cr.Stat[ ST_LEVEL ] <= 2 )
    {
        lexems += "$ReplCount @msg dlg " + DLGSTR( BankerDialog, DlgStr + 13 ) + "@";
    }
    else if( cr.Stat[ ST_REPLICATION_COUNT ] / cr.Stat[ ST_LEVEL ] > 2 && cr.Stat[ ST_REPLICATION_COUNT ] / cr.Stat[ ST_LEVEL ] < 10 )
    {
        lexems += "$ReplCount @msg dlg " + DLGSTR( BankerDialog, DlgStr + 14 ) + "@";
    }
    else
    {
        lexems += "$ReplCount @msg dlg " + DLGSTR( BankerDialog, DlgStr + 15 ) + "@";
    }

    // Год рождения.
    lexems += "$Born " + ( __Year - cr.Stat[ ST_AGE ] );

    if( player.Skill[ SK_SPEECH ] >= 40 - ( player.Stat[ ST_CHARISMA ] + player.Stat[ ST_LUCK ] ) / 2 )
    {
        player.SayMsg( SAY_DIALOG, TEXTMSG_DLG, DLGSTR( BankerDialog, DlgStr + 1 ), lexems );
    }

    // Уровень.
    if( player.Skill[ SK_SPEECH ] >= 50 - ( player.Stat[ ST_CHARISMA ] + player.Stat[ ST_LUCK ] ) / 2 )
    {
        lexems = "";
        lexems += "$Level " + cr.Stat[ ST_LEVEL ];
        player.SayMsg( SAY_APPEND, TEXTMSG_DLG, DLGSTR( BankerDialog, DlgStr + 2 ), lexems );
    }

    // Карма.
    if( player.Skill[ SK_SPEECH ] >= 60 - ( player.Stat[ ST_CHARISMA ] + player.Stat[ ST_LUCK ] ) / 2 )
    {
        int[] Values = { -2147483647, -1000, -750, -500, -250, 250,       500,    750,    1000 };
        int[] Descs =    { 6125,                         6122,   6119, 6116, 6113, 6110, 6107, 6104, 6101 };
        int CurKarma = 0;
        for( uint i = 0, iMax = Values.length(); i < iMax; i++ )
        {
            if( int(cr.Stat[ ST_KARMA ]) >= Values[ i ] )
            {
                CurKarma = Descs[ i ];
            }
            else
            {
                break;
            }
        }
        player.SayMsg( SAY_APPEND, TEXTMSG_GAME, CurKarma );
    }

    // Статы.
    if( player.Skill[ SK_SPEECH ] >= 70 - ( player.Stat[ ST_CHARISMA ] + player.Stat[ ST_LUCK ] ) / 2 )
    {
        lexems = "";
        // Сила.
        if( cr.StatBase[ ST_STRENGTH ] < 4 )
        {
            lexems += "$Strength @msg dlg " + DLGSTR( BankerDialog, DlgStr + 16 ) + "@";
        }
        else if( cr.StatBase[ ST_STRENGTH ] >= 4 && cr.StatBase[ ST_STRENGTH ] < 7 )
        {
            lexems += "$Strength" + "";
        }
        else if( cr.StatBase[ ST_STRENGTH ] >= 7 && cr.StatBase[ ST_STRENGTH ] <= 8 )
        {
            lexems += "$Strength @msg dlg " + DLGSTR( BankerDialog, DlgStr + 17 ) + "@";
        }
        else
        {
            lexems += "$Strength @msg dlg " + DLGSTR( BankerDialog, DlgStr + 18 ) + "@";
        }
        // Восприятие.
        if( cr.StatBase[ ST_PERCEPTION ] < 4 )
        {
            lexems += "$Perception @msg dlg " + DLGSTR( BankerDialog, DlgStr + 19 ) + "@";
        }
        else if( cr.StatBase[ ST_PERCEPTION ] >= 4 && cr.StatBase[ ST_PERCEPTION ] < 7 )
        {
            lexems += "$Perception" + "";
        }
        else if( cr.StatBase[ ST_PERCEPTION ] >= 7 && cr.StatBase[ ST_PERCEPTION ] <= 8 )
        {
            lexems += "$Perception @msg dlg " + DLGSTR( BankerDialog, DlgStr + 20 ) + "@";
        }
        else
        {
            lexems += "$Perception @msg dlg " + DLGSTR( BankerDialog, DlgStr + 21 ) + "@";
        }
        // Выносливость.
        if( cr.StatBase[ ST_ENDURANCE ] < 4 )
        {
            lexems += "$Endurance @msg dlg " + DLGSTR( BankerDialog, DlgStr + 22 ) + "@";
        }
        else if( cr.StatBase[ ST_ENDURANCE ] >= 4 && cr.StatBase[ ST_ENDURANCE ] < 7 )
        {
            lexems += "$Endurance" + "";
        }
        else if( cr.StatBase[ ST_ENDURANCE ] >= 7 && cr.StatBase[ ST_ENDURANCE ] <= 8 )
        {
            lexems += "$Endurance @msg dlg " + DLGSTR( BankerDialog, DlgStr + 23 ) + "@";
        }
        else
        {
            lexems += "$Endurance @msg dlg " + DLGSTR( BankerDialog, DlgStr + 24 ) + "@";
        }
        // Обаяние.
        if( cr.StatBase[ ST_CHARISMA ] < 4 )
        {
            lexems += "$Charisma @msg dlg " + DLGSTR( BankerDialog, DlgStr + 25 ) + "@";
        }
        else if( cr.StatBase[ ST_CHARISMA ] >= 4 && cr.StatBase[ ST_CHARISMA ] < 7 )
        {
            lexems += "$Charisma" + "";
        }
        else if( cr.StatBase[ ST_CHARISMA ] >= 7 && cr.StatBase[ ST_CHARISMA ] <= 8 )
        {
            lexems += "$Charisma @msg dlg " + DLGSTR( BankerDialog, DlgStr + 26 ) + "@";
        }
        else
        {
            lexems += "$Charisma @msg dlg " + DLGSTR( BankerDialog, DlgStr + 27 ) + "@";
        }
        // Интеллект.
        if( cr.StatBase[ ST_INTELLECT ] < 4 )
        {
            lexems += "$Intellect @msg dlg " + DLGSTR( BankerDialog, DlgStr + 28 ) + "@";
        }
        else if( cr.StatBase[ ST_INTELLECT ] >= 4 && cr.StatBase[ ST_INTELLECT ] < 7 )
        {
            lexems += "$Intellect" + "";
        }
        else if( cr.StatBase[ ST_INTELLECT ] >= 7 && cr.StatBase[ ST_INTELLECT ] <= 8 )
        {
            lexems += "$Intellect @msg dlg " + DLGSTR( BankerDialog, DlgStr + 29 ) + "@";
        }
        else
        {
            lexems += "$Intellect @msg dlg " + DLGSTR( BankerDialog, DlgStr + 30 ) + "@";
        }
        // Ловкость.
        if( cr.StatBase[ ST_AGILITY ] < 4 )
        {
            lexems += "$Agility @msg dlg " + DLGSTR( BankerDialog, DlgStr + 31 ) + "@";
        }
        else if( cr.StatBase[ ST_AGILITY ] >= 4 && cr.StatBase[ ST_AGILITY ] < 7 )
        {
            lexems += "$Agility" + "";
        }
        else if( cr.StatBase[ ST_AGILITY ] >= 7 && cr.StatBase[ ST_AGILITY ] <= 8 )
        {
            lexems += "$Agility @msg dlg " + DLGSTR( BankerDialog, DlgStr + 32 ) + "@";
        }
        else
        {
            lexems += "$Agility @msg dlg " + DLGSTR( BankerDialog, DlgStr + 33 ) + "@";
        }
        // Удача.
        if( cr.StatBase[ ST_LUCK ] < 4 )
        {
            lexems += "$Luck @msg dlg " + DLGSTR( BankerDialog, DlgStr + 34 ) + "@";
        }
        else if( cr.StatBase[ ST_LUCK ] >= 4 && cr.StatBase[ ST_LUCK ] < 7 )
        {
            lexems += "$Luck" + "";
        }
        else if( cr.StatBase[ ST_LUCK ] >= 7 && cr.StatBase[ ST_LUCK ] <= 8 )
        {
            lexems += "$Luck @msg dlg " + DLGSTR( BankerDialog, DlgStr + 35 ) + "@";
        }
        else
        {
            lexems += "$Luck @msg dlg " + DLGSTR( BankerDialog, DlgStr + 36 ) + "@";
        }
        player.SayMsg( SAY_APPEND, TEXTMSG_DLG, DLGSTR( BankerDialog, DlgStr + 3 ), lexems );
    }

    // Тагнутые боевые навыки.
    if( player.Skill[ SK_SPEECH ] >= 80 - ( player.Stat[ ST_CHARISMA ] + player.Stat[ ST_LUCK ] ) / 2 )
    {

        uint[] CombatSkills = { SK_SMALL_GUNS, SK_BIG_GUNS, SK_ENERGY_WEAPONS, SK_UNARMED, SK_THROWING };
        uint[] TagSkills = { cr.TagSkill[ TAG_SKILL1 ], cr.TagSkill[ TAG_SKILL2 ], cr.TagSkill[ TAG_SKILL3 ], cr.TagSkill[ TAG_SKILL4 ] };

        for( uint i = 0, iMax = CombatSkills.length(); i < iMax; i++ )
        {
            for( uint t = 0, tMax = TagSkills.length(); t < tMax; t++ )
            {
                if( CombatSkills[ i ] == TagSkills[ t ] )
                {
                    if( cr.Skill[ TagSkills[ t ] ] < 100 )
                    {
                        lexems = "$CmbtSkillTag @msg dlg " + DLGSTR( BankerDialog, DlgStr + 60 + Random( 0, 1 ) ) + "@";
                        switch( TagSkills[ t ] )
                        {
                        case SK_SMALL_GUNS:
                            lexems += "$CombatSkillMax @msg dlg " + DLGSTR( BankerDialog, DlgStr + 41 ) + "@";
                            break;
                        case SK_BIG_GUNS:
                            lexems += "$CombatSkillMax @msg dlg " + DLGSTR( BankerDialog, DlgStr + 42 ) + "@";
                            break;
                        case SK_ENERGY_WEAPONS:
                            lexems += "$CombatSkillMax @msg dlg " + DLGSTR( BankerDialog, DlgStr + 43 ) + "@";
                            break;
                        case SK_UNARMED:
                            lexems += "$CombatSkillMax @msg dlg " + DLGSTR( BankerDialog, DlgStr + 44 ) + "@";
                            break;
                        case SK_THROWING:
                            lexems += "$CombatSkillMax @msg dlg " + DLGSTR( BankerDialog, DlgStr + 46 ) + "@";
                            break;
                        default:
                            break;
                        }
                        player.SayMsg( SAY_APPEND, TEXTMSG_DLG, DLGSTR( BankerDialog, DlgStr + 6 ), lexems );
                    }
                }
            }
        }

    }

    // Тагнутые небоевые навыки.
    if( player.Skill[ SK_SPEECH ] >= 85 - ( player.Stat[ ST_CHARISMA ] + player.Stat[ ST_LUCK ] ) / 2 )
    {
        uint[] Skills = { SK_FIRST_AID, SK_DOCTOR, SK_SNEAK, SK_LOCKPICK, SK_STEAL, SK_TRAPS, SK_SCIENCE, SK_REPAIR, SK_SPEECH, SK_BARTER, SK_GAMBLING, SK_OUTDOORSMAN };
        uint[] TagSkills = { cr.TagSkill[ TAG_SKILL1 ], cr.TagSkill[ TAG_SKILL2 ], cr.TagSkill[ TAG_SKILL3 ], cr.TagSkill[ TAG_SKILL4 ] };
        for( uint i = 0, iMax = Skills.length(); i < iMax; i++ )
        {
            for( uint t = 0, tMax = TagSkills.length(); t < tMax; t++ )
            {
                if( Skills[ i ] == TagSkills[ t ] )
                {
                    if( cr.Skill[ TagSkills[ t ] ] < 100 )
                    {
                        lexems = "$SkillTag @msg dlg " + DLGSTR( BankerDialog, DlgStr + 62 + Random( 0, 2 ) ) + "@";
                        switch( TagSkills[ t ] )
                        {
                        case SK_FIRST_AID:
                            lexems += "$AnySkill @msg dlg " + DLGSTR( BankerDialog, DlgStr + 65 ) + "@";
                            break;
                        case SK_DOCTOR:
                            lexems += "$AnySkill @msg dlg " + DLGSTR( BankerDialog, DlgStr + 66 ) + "@";
                            break;
                        case SK_SNEAK:
                            lexems += "$AnySkill @msg dlg " + DLGSTR( BankerDialog, DlgStr + 67 ) + "@";
                            break;
                        case SK_LOCKPICK:
                            lexems += "$AnySkill @msg dlg " + DLGSTR( BankerDialog, DlgStr + 68 ) + "@";
                            break;
                        case SK_STEAL:
                            lexems += "$AnySkill @msg dlg " + DLGSTR( BankerDialog, DlgStr + 69 ) + "@";
                            break;
                        case SK_TRAPS:
                            lexems += "$AnySkill @msg dlg " + DLGSTR( BankerDialog, DlgStr + 70 ) + "@";
                            break;
                        case SK_SCIENCE:
                            lexems += "$AnySkill @msg dlg " + DLGSTR( BankerDialog, DlgStr + 71 ) + "@";
                            break;
                        case SK_REPAIR:
                            lexems += "$AnySkill @msg dlg " + DLGSTR( BankerDialog, DlgStr + 72 ) + "@";
                            break;
                        case SK_SPEECH:
                            lexems += "$AnySkill @msg dlg " + DLGSTR( BankerDialog, DlgStr + 73 ) + "@";
                            break;
                        case SK_BARTER:
                            lexems += "$AnySkill @msg dlg " + DLGSTR( BankerDialog, DlgStr + 74 ) + "@";
                            break;
                        case SK_GAMBLING:
                            lexems += "$AnySkill @msg dlg " + DLGSTR( BankerDialog, DlgStr + 75 ) + "@";
                            break;
                        case SK_OUTDOORSMAN:
                            lexems += "$AnySkill @msg dlg " + DLGSTR( BankerDialog, DlgStr + 76 ) + "@";
                            break;
                        default:
                            break;
                        }
                        player.SayMsg( SAY_APPEND, TEXTMSG_DLG, DLGSTR( BankerDialog, DlgStr + 7 ), lexems );
                    }
                }
            }
        }

    }

    // Прокачаный боевой навык.
    if( player.Skill[ SK_SPEECH ] >= 90 - ( player.Stat[ ST_CHARISMA ] + player.Stat[ ST_LUCK ] ) / 2 )
    {

        lexems = "";
        int CurSkill = 0;
        int MaxSkill = 0;
        uint[] CombatSkills = { SK_SMALL_GUNS, SK_BIG_GUNS, SK_ENERGY_WEAPONS, SK_UNARMED, SK_THROWING };

        for( uint i = 0, iMax = CombatSkills.length(); i < iMax; i++ )
        {
            if( CurSkill < cr.Skill[ CombatSkills[ i ] ] )
            {
                CurSkill = cr.Skill[ CombatSkills[ i ] ];
                MaxSkill = CombatSkills[ i ];
            }
        }
        if( CurSkill < 90 )
        {
            lexems += "$CombatSkillLvl @msg dlg " + DLGSTR( BankerDialog, DlgStr + 37 ) + "@";
            lexems += "$CombatSkillMax";
        }
        else
        {
            if( CurSkill >= 90 && CurSkill < 150 )
                lexems += "$CombatSkillLvl @msg dlg " + DLGSTR( BankerDialog, DlgStr + 38 ) + "@";
            if( CurSkill >= 150 && CurSkill < 200 )
                lexems += "$CombatSkillLvl @msg dlg " + DLGSTR( BankerDialog, DlgStr + 39 ) + "@";
            if( CurSkill >= 200 )
                lexems += "$CombatSkillLvl @msg dlg " + DLGSTR( BankerDialog, DlgStr + 40 ) + "@";
            switch( MaxSkill )
            {
            case SK_SMALL_GUNS:
                lexems += "$CombatSkillMax @msg dlg " + DLGSTR( BankerDialog, DlgStr + 41 ) + "@";
                break;
            case SK_BIG_GUNS:
                lexems += "$CombatSkillMax @msg dlg " + DLGSTR( BankerDialog, DlgStr + 42 ) + "@";
                break;
            case SK_ENERGY_WEAPONS:
                lexems += "$CombatSkillMax @msg dlg " + DLGSTR( BankerDialog, DlgStr + 43 ) + "@";
                break;
            case SK_UNARMED:
                lexems += "$CombatSkillMax @msg dlg " + DLGSTR( BankerDialog, DlgStr + 44 ) + "@";
                break;
            case SK_THROWING:
                lexems += "$CombatSkillMax @msg dlg " + DLGSTR( BankerDialog, DlgStr + 46 ) + "@";
                break;
            default:
                break;
            }
        }
        player.SayMsg( SAY_APPEND, TEXTMSG_DLG, DLGSTR( BankerDialog, DlgStr + 4 ), lexems );

    }

    // Прокачаный небоевой навык.
    if( player.Skill[ SK_SPEECH ] >= 100 - ( player.Stat[ ST_CHARISMA ] + player.Stat[ ST_LUCK ] ) / 2 )
    {

        lexems = "";
        int CurSkill = 0;
        int MaxSkill = 0;
        uint[] Skills = { SK_FIRST_AID, SK_DOCTOR, SK_SNEAK, SK_LOCKPICK, SK_STEAL, SK_TRAPS, SK_SCIENCE, SK_REPAIR, SK_SPEECH, SK_BARTER, SK_GAMBLING, SK_OUTDOORSMAN };

        for( uint i = 0, iMax = Skills.length(); i < iMax; i++ )
        {
            if( CurSkill < cr.Skill[ Skills[ i ] ] )
            {
                CurSkill = cr.Skill[ Skills[ i ] ];
                MaxSkill = Skills[ i ];
            }
        }
        if( CurSkill <= 90 )
        {
            lexems += "$AnySkill @msg dlg " + DLGSTR( BankerDialog, DlgStr + 47 ) + "@";
        }
        else
        {
            switch( MaxSkill )
            {
            case SK_FIRST_AID:
                lexems += "$AnySkill @msg dlg " + DLGSTR( BankerDialog, DlgStr + 48 ) + "@";
                break;
            case SK_DOCTOR:
                lexems += "$AnySkill @msg dlg " + DLGSTR( BankerDialog, DlgStr + 49 ) + "@";
                break;
            case SK_SNEAK:
                lexems += "$AnySkill @msg dlg " + DLGSTR( BankerDialog, DlgStr + 50 ) + "@";
                break;
            case SK_LOCKPICK:
                lexems += "$AnySkill @msg dlg " + DLGSTR( BankerDialog, DlgStr + 51 ) + "@";
                break;
            case SK_STEAL:
                lexems += "$AnySkill @msg dlg " + DLGSTR( BankerDialog, DlgStr + 52 ) + "@";
                break;
            case SK_TRAPS:
                lexems += "$AnySkill @msg dlg " + DLGSTR( BankerDialog, DlgStr + 53 ) + "@";
                break;
            case SK_SCIENCE:
                lexems += "$AnySkill @msg dlg " + DLGSTR( BankerDialog, DlgStr + 54 ) + "@";
                break;
            case SK_REPAIR:
                lexems += "$AnySkill @msg dlg " + DLGSTR( BankerDialog, DlgStr + 55 ) + "@";
                break;
            case SK_SPEECH:
                lexems += "$AnySkill @msg dlg " + DLGSTR( BankerDialog, DlgStr + 56 ) + "@";
                break;
            case SK_BARTER:
                lexems += "$AnySkill @msg dlg " + DLGSTR( BankerDialog, DlgStr + 57 ) + "@";
                break;
            case SK_GAMBLING:
                lexems += "$AnySkill @msg dlg " + DLGSTR( BankerDialog, DlgStr + 58 ) + "@";
                break;
            case SK_OUTDOORSMAN:
                lexems += "$AnySkill @msg dlg " + DLGSTR( BankerDialog, DlgStr + 59 ) + "@";
                break;
            default:
                break;
            }
        }
        player.SayMsg( SAY_APPEND, TEXTMSG_DLG, DLGSTR( BankerDialog, DlgStr + 5 ), lexems );

    }

    // Количество денег на счету.
    if( player.Skill[ SK_SPEECH ] >= 110 - ( player.Stat[ ST_CHARISMA ] + player.Stat[ ST_LUCK ] ) / 2 )
    {
        lexems = "";
        lexems += "$ReplMoney " + cr.Stat[ ST_REPLICATION_MONEY ] + "$ReplCount " + cr.Stat[ ST_REPLICATION_COUNT ];
        player.SayMsg( SAY_APPEND, TEXTMSG_DLG, DLGSTR( BankerDialog, DlgStr + 8 ), lexems );
    }
}

void dlg_ArenaPoints( Critter& player, Critter@ npc, string@ lexems )
{
    if( IS_DIALOG_SAY_MODE( lexems ) || IS_DIALOG_END( lexems ) )
        return;
    lexems = "$dohrena " + player.Stat[ ST_ARENA_POINTS ];
}

void dlg_ForSearching( Critter& player, Critter@ barman, string@ playerName )
{
    if( !valid( barman ) )
        return;
    if( !IS_DIALOG_SAY_MODE( playerName ) || IS_DIALOG_END( playerName ) )
        return;
    if( playerName.length() <= 1 )
        return;
    uint   BankerDialog = barman.Stat[ ST_DIALOG_ID ];
    uint   DlgStr = 200;
    // Имя запрашиваемого криттера и инициализация переменной с лексемами.
    string lexems = "$Victim " + playerName;
    // Пол бармена.
    if( barman.Stat[ ST_GENDER ] == GENDER_FEMALE )
    {
        lexems += "$BarmanGen @msg dlg " + DLGSTR( BankerDialog, DlgStr + 10 ) + "@";
    }
    else
    {
        lexems += "$BarmanGen @msg dlg " + DLGSTR( BankerDialog, DlgStr + 9 ) + "@";
    }
    // Игрок не найден.
    Critter@ cr = GetPlayer( playerName );
    if( !valid( cr ) )
    {
        player.SayMsg( SAY_DIALOG, TEXTMSG_DLG, DLGSTR( BankerDialog, DlgStr + 0 ), lexems );
        return;
    }
    // Пол запрашиваемого криттера.
    if( cr.Stat[ ST_GENDER ] == GENDER_FEMALE )
    {
        lexems += "$Gender @msg dlg " + DLGSTR( BankerDialog, DlgStr + 8 ) + "@";
    }
    else
    {
        lexems += "$Gender @msg dlg " + DLGSTR( BankerDialog, DlgStr + 7 ) + "@";
    }
    player.SayMsg( SAY_DIALOG, TEXTMSG_DLG, DLGSTR( BankerDialog, DlgStr + 11 ), lexems );
    return;
}

void dlg_TrySearching( Critter& player, Critter@ barman, string@ playerName )
{

    #define LOC_NAME    # (mapId)                       ( ( mapId + 100 ) * 1000 ) // поиск названия локации в файле FOGM.msg
    if( !valid( barman ) )
        return;
    if( !IS_DIALOG_SAY_MODE( playerName ) || IS_DIALOG_END( playerName ) )
        return;
    if( playerName.length() <= 1 )
        return;
    uint   BankerDialog = barman.Stat[ ST_DIALOG_ID ];
    uint   DlgStr = 200;
    // Имя запрашиваемого криттера и инициализация переменной с лексемами.
    string lexems = "$Victim " + playerName;
    // Пол бармена.
    if( barman.Stat[ ST_GENDER ] == GENDER_FEMALE )
    {
        lexems += "$BarmanGen @msg dlg " + DLGSTR( BankerDialog, DlgStr + 10 ) + "@";
    }
    else
    {
        lexems += "$BarmanGen @msg dlg " + DLGSTR( BankerDialog, DlgStr + 9 ) + "@";
    }
    // Игрок не найден.
    Critter@ cr = GetPlayer( playerName );
    if( !valid( cr ) )
    {
        player.SayMsg( SAY_DIALOG, TEXTMSG_DLG, DLGSTR( BankerDialog, DlgStr + 0 ), lexems );
        return;
    }
    // Пол запрашиваемого криттера.
    if( cr.Stat[ ST_GENDER ] == GENDER_FEMALE )
    {
        lexems += "$Gender @msg dlg " + DLGSTR( BankerDialog, DlgStr + 8 ) + "@";
    }
    else
    {
        lexems += "$Gender @msg dlg " + DLGSTR( BankerDialog, DlgStr + 7 ) + "@";
    }
    // Игрок спрашивает о самом себе.
    if( player.Id == cr.Id )
    {
        player.SayMsg( SAY_DIALOG, TEXTMSG_DLG, DLGSTR( BankerDialog, DlgStr + 1 ) );
        return;
    }
    // Криттер на глобале.
    Map@ map = cr.GetMap();
    if( !valid( map ) )
    {
        player.SayMsg( SAY_DIALOG, TEXTMSG_DLG, DLGSTR( BankerDialog, DlgStr + 2 ), lexems );
        return;
    }
    // Локация, где находится криттер. Диапазоны PID: до 150 и 210-235. Города и репликации.
    if( cr.GetMap().GetLocation().GetProtoId() < 50 || cr.GetMap().GetLocation().GetProtoId() >= 200 )
    {
        lexems += "$Place @msg GM " + LOC_NAME( cr.GetMap().GetLocation().GetProtoId() ) + "@";
        // Криттер находится в той же локации, что и игрок.
        if( barman.GetMap().GetLocation().Id == cr.GetMap().GetLocation().Id )
        {
            player.SayMsg( SAY_DIALOG, TEXTMSG_DLG, DLGSTR( BankerDialog, DlgStr + 3 ), lexems );
            return;
        }
        // Криттер найден, лексемы сформированы - даем информацию.
        player.SayMsg( SAY_DIALOG, TEXTMSG_DLG, DLGSTR( BankerDialog, DlgStr + 4 + Random( 0, 2 ) ), lexems );
    }
    else
    {
        player.SayMsg( SAY_DIALOG, TEXTMSG_DLG, DLGSTR( BankerDialog, DlgStr + 2 ), lexems );
        return;
    }
}

void r_ToHeal( Critter& player, Critter@ npc )
{
    HealCritter( player );
}

void r_DropDrugs( Critter& player, Critter @ npc )
{
    DropDrugEffects( player );
}

void r_DropRadiation( Critter& player, Critter @ npc )
{
    DropRadiation( player );
}

void r_ShowLocation( Critter& player, Critter@ npc, int locNum )
{
    player.SetKnownLoc( false, uint16( locNum ) );
}

void r_FadeOut( Critter& player, Critter@ npc, int time )
{
    if( time == 0 )
        time = 2000;
    FlushScreen( player, false, time );
}

void r_TransitToGlobal( Critter& player, Critter@ npc )
{
    player.TransitToGlobal( false );
}

void r_TransitToLocation( Critter& player, Critter@ npc, int locPid, int mapIndex )
{
    TransitToLoc( player, locPid, mapIndex, 0 );
}

void r_TransitToMap( Critter& player, Critter@ npc, int mapPid, int entranceNum )
{
    TransitToMap( player, mapPid, entranceNum );
}

void r_InfoMessage( Critter& player, Critter@ npc, int strNum )
{
    if( valid( npc ) )
        InfoMessage( player, npc, strNum );
}

// Установка таймаута в часах на отдельного нпц (общий для всех игроков).
void r_TimeoutSet( Critter& player, Critter@ npc, int gameHours )
{
    if( valid( npc ) )
        TimeoutSet( npc, gameHours );
}

void r_TimeoutHSet( Critter& player, Critter@ npc, int hour )
{
    if( valid( npc ) )
        TimeoutRealHourSet( npc, hour );
}

void r_TimeoutMSet( Critter& player, Critter@ npc, int minute )
{
    if( valid( npc ) )
        TimeoutRealMinuteSet( npc, minute );
}

void r_LTimeoutMSet( Critter& player, Critter@ npc, int minute, int varNum )
{
    if( valid( player ) )
        LocalTimeoutMinuteSet( player, varNum, minute );
}

void r_LTimeoutHSet( Critter& player, Critter@ npc, int hour, int varNum )
{
    if( valid( player ) )
        LocalTimeoutHourSet( player, varNum, hour );
}

// Установка таймаута в минутах для связки игрок/нпц.
void r_SetUniqTO( Critter& player, Critter @ npc, int value )
{
    if( !valid( npc ) )
        return;
    GameVar @ to = GetUnicumVar( UVAR_uniq_timeout, player.Id, npc.Id );
    if( !valid( to ) )
        return;
    to = value * 60 + __FullSecond;
}

void r_DoorOpen( Critter& player, Critter@ npc, int entireNum )
{
    DoorControl( player, entireNum, true );
}

void r_DoorClose( Critter& player, Critter@ npc, int entireNum )
{
    DoorControl( player, entireNum, false );
}

// Даем игроку голодиск
void r_GiveHolodisk( Critter& player, Critter@ npc, int holodiskNum )
{
    Item@ holo = player.AddItem( PID_HOLODISK, 1 );
    holo.HolodiskNumber = holodiskNum;
    holo.Update();
}

void r_Attack( Critter& player, Critter@ npc, int npcRole )
{
    Attack( player, npcRole );
}

void r_AttackStop( Critter& player, Critter@ npc, int npcRole )
{
    AttackStop( player, npcRole );
}

void r_Kill( Critter& player, Critter@ npc, int type )
{
    Kill( player, type );
}

void r_KillNPC( Critter& player, Critter@ npc, int type )
{
    if( valid( npc ) )
        npc.ToDead( type, player );
}

void r_KillNPCNoKiller( Critter& player, Critter@ npc, int type )
{
    if( valid( npc ) )
        npc.ToDead( type, null );
}

void r_Damage( Critter& player, Critter@ npc, int dmg, int type, int dir )
{
    Damage( player, dmg, type, dir );
}

// Атака игрока всеми НПЦ на карте, у которых команда совпадает с командой говорящего НПЦ
void r_TeamAttack( Critter& player, Critter@ npc )
{
    if( !valid( npc ) )
        return;
    Map@ map = npc.GetMap();
    if( !valid( map ) )
        return;
    Critter@[] team;
    if( map.GetCritters( 0, FIND_LIFE | FIND_ONLY_NPC, team ) > 0 )
    {
        for( uint i = 0, iMax = team.length(); i < iMax; i++ )
        {
            if( team[ i ].Stat[ ST_TEAM_ID ] == npc.Stat[ ST_TEAM_ID ] )
                AddAttackPlane( team[ i ], 0, player.Id );
        }
    }
}

// Отложенная всплывающая строка над нпц
void r_SayMessageDelayed( Critter& player, Critter @ npc, int strNum, int delaySeconds, int sayType )
{
    if( !valid( npc ) )
        return;
    uint[] values = { npc.Id, uint( sayType ), uint( strNum ) };
    CreateTimeEvent( __FullSecond + delaySeconds, "e_SayMessage", values, false );
}

uint e_SayMessage( uint[] @ values )
{
    if( values.length() < 3 )
        return 0;
    Critter @ cr = GetCritter( values[ 0 ] );
    if( !valid( cr ) )
        return 0;
    int did = cr.Stat[ ST_DIALOG_ID ];
    if( did == 0 )
        return 0;
    cr.SayMsg( values[ 1 ], TEXTMSG_DLG, DLGSTR( did, values[ 2 ] ) );
    return 0;
}

void r_SkillUp( Critter& player, Critter@ npc, int skill )
{
    SkillUp( player, skill );
}

void r_QuestReward( Critter& player, Critter@ npc, int base )
{
    QuestRewardExperience( player, base );
}
void r_QuestReward1( Critter& player, Critter@ npc )
{
    int base = 10;
    if( player.Stat[ ST_LEVEL ] < 20 )
        base = 15;
    if( player.Stat[ ST_LEVEL ] < 10 )
        base = 20;
    if( player.Stat[ ST_LEVEL ] < 5 )
        base = 40;
    QuestRewardExperience( player, base );
}

void r_QuestReward2( Critter& player, Critter@ npc )
{
    int base = 15;
    if( player.Stat[ ST_LEVEL ] < 20 )
        base = 20;
    if( player.Stat[ ST_LEVEL ] < 10 )
        base = 50;
    QuestRewardExperience( player, base );
}

void r_QuestReward3( Critter& player, Critter@ npc )
{
    int base = 35;
    if( player.Stat[ ST_LEVEL ] < 20 )
        base = 45;
    if( player.Stat[ ST_LEVEL ] < 10 )
        base = 60;
    QuestRewardExperience( player, base );
}

import bool CheckEventStatus( uint idx, uint status ) from "game_event";

bool d_GameEventStatus( Critter& player, Critter@ npc, int idx, int status )
{
    return CheckEventStatus( uint( idx ), uint( status ) );
}

bool d_NotLocationKnown( Critter& player, Critter@ npc, int locPid )
{
    return !player.IsKnownLoc( false, uint( locPid ) );
}
void r_CreateLocation( Critter& player, Critter@ npc, int locPid, int worldX, int worldY, int dayDelete, int varNum )
{
    // Создает локацию в радиусе двух зон от заданных координат
    int       delta = __GlobalMapZoneLength * 2;
    Location@ loc = CreateLocationForCritter( player, locPid, worldX, worldY, delta, varNum );
    if( valid( loc ) )
        SetLocationDeleteTime( loc, 60 * 60 * 24 * dayDelete );
}

void r_addExp( Critter& player, Critter@ npc, int baseExp )
{
    r_addExp( player, npc, baseExp, baseExp, 1, 0 );
}

void r_addExp( Critter& player, Critter@ npc, int baseExp, int bonusPerLevel )
{
    r_addExp( player, npc, baseExp, bonusPerLevel, 1, 0 );
}

void r_addExp( Critter& player, Critter@ npc, int baseExp, int bonusPerLevel, int mul )
{
    r_addExp( player, npc, baseExp, bonusPerLevel, mul, 0 );
}

void r_addExp( Critter& player, Critter@ npc, int baseExp, int bonusPerLevel, int mul, int maxLevel )
{
    int bonus = ( ( player.StatBase[ ST_LEVEL ] < maxLevel ) ? player.StatBase[ ST_LEVEL ] : maxLevel ) * bonusPerLevel;
    for( int i = 1, j = bonus; i < mul; i++ )
        bonus *= j;
    player.StatBase[ ST_EXPERIENCE ] += baseExp + bonus;
}

import void InitRandomisationItem( Item& item, bool isCrafted, Critter& cr, string sufix ) from "Mk2";
void        r_AddRPItem( Critter& player, Critter@ npc, int itemPid )
{
    Item@ item = player.AddItem( itemPid, 1 );
    if( valid( item ) )
    {
        InitRandomisationItem( item, true, player, "" );
    }
}
/*
   void r_denKliffLife(Critter& player, Critter@ npc, int itemPid)
   {
        if(valid(npc))
        {
                GameVar@ var =
                Item@ item = player.AddItem(itemPid, 1);
                if(valid(item))
                {
                        InitRandomisationItem(item, true, player, "");
                }
        }
   }*/

void changedParam_DialogResult( Critter& cr, uint i, int oldValue )
{
    int result = cr.ParamBase[ i ];

    r_DialogResult( cr, null, result );
}

enum EDialogResults
{
    begin = 0,
    den_kliff,     // 1
    newbie_petra,  // 2
    end
}

void r_DialogResult( Critter& player, Critter@ npc, int result )
{
    switch( result )
    {
    case EDialogResults::den_kliff:
        if( valid( npc ) )
        {
            // GameVar@ den_kliff_bless_was = GetGameVar()
            GameVar@ den_kliff_bless_was = GetUnicumVar( UVAR_selected_caravan, npc.Id, player.Id );
            if( valid( den_kliff_bless_was ) && den_kliff_bless_was.GetValue() == 0 )
            {
                player.StatBase[ ST_MAX_LIFE ] += 3;
                player.StatBase[ ST_EXPERIENCE ] += 500;
                player.StatBase[ ST_KARMA ] += 10;
                den_kliff_bless_was = 1;
                GameVar@ loyality = GetUnicumVar( UVAR_loyality, npc.Id, player.Id );
                if( valid( loyality ) )
                    loyality += 10;
            }
        }
        else
            Log( "Пидры ломают диалог!" );
        break;

    default:
        break;
    }
}
