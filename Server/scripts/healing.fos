// Скрипт санитара
// TLA mk2 team

#include "_macros.fos"
#include "_msgstr.fos"

// Базовая пауза между приростом ХП.
#define HEALING_DURATION_SUB    ( 20 )

#define STR_HEALING_GAIN        ( 12810 )
#define STR_HEALING_PROCESS     ( 12811 )
#define STR_HEALING_REDUCE      ( 12812 )
#define STR_HEALING_FREE        ( 12813 )

// Базовое количество приростов ХП.
#define COUNT_LEVEL             ( 10 )

import void ChangePlayerScore( Critter& player, uint scoreIndex, int value ) from "Mk2";

void UseDoctor( Critter& cr, Critter@ targetCr, uint16 activePid ) // Export
{
    bool isMedic = ( cr.Perk[ PE_MEDIC ] != 0 );

    if( not validEngineObject( targetCr ) )
        @targetCr = cr;
    bool is_self = ( targetCr.Id == cr.Id );

    // Реаниматор
    if( targetCr.IsDead() )
    {

        if( !( targetCr.IsPlayer() || uint( targetCr.Merc[ MERC_MASTER_ID ] ) == cr.Id ) || ( ( targetCr.Anim2Dead <= ANIM2_DEAD_PRONE_FRONT || targetCr.Anim2Dead >= ANIM2_DEAD_BACK ) || cr.IsNpc() ) )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_NORESSURECT );
            return;
        }

        Map@ map = cr.GetMap();
        if( not validEngineObject( map ) || !map.IsHexPassed( targetCr.HexX, targetCr.HexY ) )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_NORESSURECT );
            return;
        }

        switch( map.GetProtoId() )
        {
        case MAP_repl_bank_den:
        case MAP_repl_bank_redding:
        case MAP_repl_bank_modoc:
        case MAP_repl_bank_klamath:
        case MAP_repl_bank_newreno:
        case MAP_repl_bank_gecko:
        case MAP_repl_bank_broken:
        case MAP_repl_bank_ncr:
        case MAP_repl_bank_sf:
        case MAP_repl_bank_vcity:
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_NORESSURECT );
            return;
        }
        default:
            break;
        }

        if( cr.Perk[ PE_REANIMATOR ] == 0 || ( Random( 1, 100 ) > int( cr.Skill[ SK_DOCTOR ] * 0.25 + cr.Stat[ ST_LUCK ] * 2 ) ) )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_NORESSURECT );
            cr.TimeoutBase[ TO_SK_DOCTOR ] = cr.Timeout[ TO_SK_DOCTOR ] + DOCTOR_TIMEOUT( cr );
            return;
        }

        if( cr.IsPlayer() && uint( cr.Timeout[ TO_SK_DOCTOR ] ) > REAL_SECOND( 9 * 60 ) )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_WEARINESS );
            return;
        }

        targetCr.ToLife();
        targetCr.StatBase[ ST_CURRENT_HP ] = Random( int( targetCr.Stat[ ST_MAX_LIFE ] * 0.33 ), int( targetCr.Stat[ ST_MAX_LIFE ] * 0.5 ) );
        targetCr.TimeoutBase[ TO_REPLICATION ] = 0;
        cr.StatBase[ ST_EXPERIENCE ] += 225;
        cr.TimeoutBase[ TO_SK_DOCTOR ] = cr.Timeout[ TO_SK_DOCTOR ] + DOCTOR_TIMEOUT( cr );
        return;
    }

    if( !_CritIsInjured( targetCr ) )
    {
        if( targetCr.Stat[ ST_CURRENT_HP ] < targetCr.Stat[ ST_MAX_LIFE ] )
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_NODOCTOR_NEEDFIRSTAID );
        else if( is_self )
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_NONEED_DOCTOR );
        return;
    }

    if( uint( cr.Timeout[ TO_SK_DOCTOR ] ) > REAL_SECOND( 9 * 60 ) )
    {
        if( cr.IsPlayer() )
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_WEARINESS );
        return;
    }

    int   uninjured = 0;
    int   sk = cr.Skill[ SK_DOCTOR ];
    uint8 mode = 0;

    if( activePid == 0 )
    {
        Item@ item = cr.GetItem( 0, SLOT_BONUS );
        if( valid( item ) && ( item.GetProtoId() == PID_DOCTORS_BAG || item.GetProtoId() == PID_PARAMEDICS_BAG ) )
            activePid = item.GetProtoId();
        else
            activePid = cr.GetSlotProto( SLOT_HAND1, mode ).ProtoId;
    }
    if( activePid == PID_DOCTORS_BAG )
    {
        if( isMedic )
            sk += 45;
        else
            sk += 25;
        if( Random( 0, 30 ) == 0 )
            cr.DeleteItem( PID_DOCTORS_BAG, 1 );
    }
    else if( activePid == PID_PARAMEDICS_BAG )
    {
        if( isMedic )
            sk += 70;
        else
            sk += 50;
        if( Random( 0, 30 ) == 0 )
            cr.DeleteItem( PID_PARAMEDICS_BAG, 1 );
    }

    for( int i = DAMAGE_EYE; i <= DAMAGE_TONGUE; ++i )
    {
        if( targetCr.Damage[ i ] != 0 )
        {
            if( ( sk > Random( 0, 200 ) && 95 > Random( 0, 100 ) ) || ( cr.Perk[ PE_LIVING_ANATOMY ] * 10 ) > Random( 0, 100 ) )
            {
                targetCr.DamageBase[ i ] = 0;
                if( cr.IsPlayer() )
                    cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_HEAL_DMG( i - DAMAGE_POISONED ) );
                uninjured++;
            }
            else if( cr.IsPlayer() )
            {
                cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_NOHEAL_DMG( i - DAMAGE_POISONED ) );
            }
            sk = int( sk * 2 * 0.33 );
        }
    }

    if( cr.IsPlayer() )
    {
        if( uninjured > 0 )
        {
            cr.StatBase[ ST_EXPERIENCE ] += uninjured * 200;
            ChangePlayerScore( cr, SCORE_DOCTOR, uninjured );
        }
    }
    cr.TimeoutBase[ TO_SK_DOCTOR ] = cr.Timeout[ TO_SK_DOCTOR ] + DOCTOR_TIMEOUT( cr );
}

void Healing( Critter& cr, Critter& tr ) // Export
{
    Healing( cr, tr, 0 );
}

void Healing( Critter& cr, Critter& tr, uint16 activePid ) // Export
{
    // Log("Stat[ST_MAX_LIFE]="+tr.Stat[ST_MAX_LIFE]);
    // Log("Stat[ST_CURRENT_HP]="+tr.Stat[ST_CURRENT_HP]);
    bool isMedic = ( cr.Perk[ PE_MEDIC ] != 0 );
    bool isPlayer = cr.IsPlayer();
    bool is_self = ( tr.Id == cr.Id );

    if( tr.Stat[ ST_CURRENT_HP ] >= tr.Stat[ ST_MAX_LIFE ] && tr.Stat[ ST_CURRENT_AP ] >= 0 )
    {
        if( _CritIsInjured( tr ) )
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_NOFIRSTAID_NEEDDOCTOR );
        else if( is_self )
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_NONEED_FIRSTAID );
        return;
    }

    int sk = int( cr.Skill[ SK_FIRST_AID ] + cr.Skill[ SK_FIRST_AID ] * 25 * 0.01 ); // WTF?
    int percentFirstHeal = 20;
    int firstHeal = 1;

    if( activePid == 0 )
    {
        uint8 mode = 0;
        for( uint8 slot = SLOT_HAND1; slot <= SLOT_BONUS;)
        {
            const ProtoItem@ proto = cr.GetSlotProto( slot, mode );
            if( valid( proto ) )
                activePid = proto.ProtoId;
            if( activePid == PID_FIRST_AID_KIT )
            {
                sk += 25;
                if( isMedic )
                    sk += 20;
                percentFirstHeal += 10;
                if( Random( 0, 30 ) == 0 )
                    cr.DeleteItem( PID_FIRST_AID_KIT, 1 );
                break;
            }
            else if( activePid == PID_FIELD_MEDIC_KIT )
            {
                sk += 50;
                if( isMedic )
                    sk += 20;
                percentFirstHeal += 20;
                if( Random( 0, 30 ) == 0 )
                    cr.DeleteItem( PID_FIELD_MEDIC_KIT, 1 );
                break;
            }
            if( slot == SLOT_HAND2 )
                slot += 3;
            else
                slot++;
        }
    }

    int mod = 11 - cr.Stat[ ST_LUCK ];
    mod = CLAMP( mod, 1, 10 );
    int heal = Random( sk / mod, sk );
    if( is_self && cr.Perk[ PE_VAMPIRE_REGENERATION ] > 0 )
        heal += 24;
    if( cr.Perk[ PE_HEALER ] > 0 )
        heal += 35 * cr.Perk[ PE_HEALER ];
    // Если у игрока есть перк HEALER, то добавить 35 регенерирующихся ХП, за разряд
    if( heal < 1 )
        heal = 1;

    int maxHealing = CLAMP( tr.Stat[ ST_MAX_LIFE ] - tr.Stat[ ST_CURRENT_HP ], 0, tr.Stat[ ST_MAX_LIFE ] );
    firstHeal += int( heal * percentFirstHeal * 0.01 );
    if( heal > maxHealing )
        heal = maxHealing;
    if( isPlayer )
    {
        GameVar@ firstAidCount = ::GetUnicumVar( UVAR_first_aid_count, cr.Id, tr.Id );
        if( valid( firstAidCount ) )
        {
            if( firstAidCount < 16 )
                cr.StatBase[ ST_EXPERIENCE ] += MIN( 3 * cr.Skill[ SK_FIRST_AID ], maxHealing * 3 );
            firstAidCount += 1;
            ChangePlayerScore( cr, SCORE_DOCTOR, 1 );
        }
    }
    cr.TimeoutBase[ TO_SK_FIRST_AID ] = cr.Timeout[ TO_SK_FIRST_AID ] + FIRST_AID_TIMEOUT( cr );

    if( tr.Stat[ ST_HEALING_LEVEL ] < 0 )
        tr.StatBase[ ST_HEALING_LEVEL ] = 0;
    tr.StatBase[ ST_HEALING_LEVEL ] += heal;
    // Log("tr.StatBase[ST_HEALING_LEVEL]="+tr.StatBase[ST_HEALING_LEVEL]);
    uint newRate = tr.Stat[ ST_HEALING_LEVEL ] / COUNT_LEVEL;
    if( tr.Stat[ ST_HEALING_LEVEL ] > maxHealing )
        tr.StatBase[ ST_HEALING_LEVEL ] = int( maxHealing + maxHealing * 0.25 );
    // tr.StatBase[ST_HEALING_LEVEL]=CLAMP(tr.StatBase[ST_HEALING_LEVEL],0,2000);
    tr.StatBase[ ST_HEALING_LEVEL ] -= firstHeal;
    if( firstHeal >= heal )
    {
        tr.StatBase[ ST_CURRENT_HP ] += heal;
        tr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 104064, "$heal" + firstHeal );
        return;
    }
    tr.StatBase[ ST_CURRENT_HP ] += firstHeal;
    tr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 104064, "$heal" + firstHeal );

    // Log("ST_HEALING_LEVEL: " + tr.StatBase[ST_HEALING_LEVEL]);
    if( newRate < 1 )
        newRate = 1;
    // Log("newRate: " + newRate);
    if( tr.GetTimeEvents( CTE_HEALING ) != 0 )
        tr.EraseTimeEvents( CTE_HEALING );
    tr.AddTimeEvent( "cte_Healing", GetHealingDuration( tr ), CTE_HEALING, newRate );
    // cr.Say( SAY_NETMSG, "Heal " + heal );
}

void DropHealing( Critter& tr ) // Export
{
    tr.EraseTimeEvents( CTE_HEALING );
    tr.StatBase[ ST_HEALING_LEVEL ] = 0;
}

uint cte_Healing( Critter& tr, int, int& rate, int& )
{
// Log("rate: " +rate);
    if( tr.IsDead() )
        return 0;
    rate += Random( 0, int( rate * 0.25 ) );
    tr.StatBase[ ST_HEALING_LEVEL ] = CLAMP( tr.StatBase[ ST_HEALING_LEVEL ] - rate, 0, 2000 );
    tr.StatBase[ ST_CURRENT_HP ] += rate;
    tr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 104064, "$heal" + rate );
    // Log("Уровень отлечиваемых ХП: " + tr.StatBase[ST_HEALING_LEVEL]);
    // Log("Передалось ХП: " + rate);
    // Log("----------------------");
    return GetHealingDuration( tr );
}

uint GetHealingDuration( Critter& tr )
{
    int duration = REAL_SECOND( CLAMP( HEALING_DURATION_SUB - tr.Stat[ ST_HEALING_RATE ], 3, HEALING_DURATION_SUB ) );
    // Log("tr.StatBase[ST_HEALING_RATE]="+tr.StatBase[ST_HEALING_RATE]);
    if( tr.Stat[ ST_CURRENT_HP ] >= tr.Stat[ ST_MAX_LIFE ] )
    {
        tr.StatBase[ ST_CURRENT_HP ] = tr.Stat[ ST_MAX_LIFE ];
        tr.StatBase[ ST_HEALING_LEVEL ] = 0;
        return 0;
    }
    if( tr.Stat[ ST_HEALING_LEVEL ] <= 0 )
    {
        //	Log("Стоп.");
        return 0;
    }
    return duration;
}
