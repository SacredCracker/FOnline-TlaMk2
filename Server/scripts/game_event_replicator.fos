// Author: rifleman17
#include "_macros.fos"
#include "entire.fos"
#include "_bags.fos"
#include "_colors.fos"
#include "_teams.fos"

#define PHASE_NOT_STARTED      ( 0 )
#define PHASE_STATE_RUNNING    ( 1 )
#define PHASE_STOPPED          ( 2 )

#define StatusGVar             ( GVAR_ge_repl_station_status )
#define STATUS_EVENT_BEGIN     ( 1 )

#define AddSandbag             # ( map, x, y, numBags )( map.AddItem( x, y, PID_SANDBAG_1 - 1 + numBags, 1 ) )
#define ENTIRE_QGIVER          ( 140 )
#define ENTIRE_GUARD           ( 141 )
#define ENTIRE_SCIENTIST       ( 142 )
#define ENTIRE_DEAD_GUARD      ( 143 )
#define ENTIRE_DEAD_ZOMBIE     ( 144 )
#define ENTIRE_ZOMBIE_0        ( 145 ) // Место спавна и первоначальных брожений
#define ENTIRE_ZOMBIE_1        ( 146 ) // Первая точка, к которой идут гули
#define ENTIRE_ZOMBIE_2        ( 147 ) // Вторая точка
#define ENTIRE_ZOMBIE_3        ( 148 ) // Третья, после этого гули выбираются на поверхность
#define ENTIRE_ZOMBIE_EXIT     ( 289 ) // Гекс, с которого гули выходят на глобал

#define EVENT_ZOMBIE_STOP      ( 12 )

#define ENTIRE_SMOLETT         ( 300 )
#define ENTIRE_SCIENTIST       ( 301 )
#define ENTIRE_HUB             ( 302 )

#define ENTIRE_WARIOR          ( 303 )
#define ENTIRE_LOOK_TO         ( 304 )
#define NPC_ROLE_DEF           ( 304 )              // Роль для всех временных нпц на поверхности

#define TIME_MOVE              ( REAL_MINUTE( 1 ) ) // Время, после которого гули меняют свое положение

#define MSG_ALARM              ( 300 )              // Номер сообщения, на которое зомби реагируют

#define PID_ZOMBIE             ( 529 )              // Прототип критттера-зомби
#define EVENT_ZOMBIE           ( 11 )
#define ROLE_ZOMBIE            ( 123 )



// #define DL                     # (s) ( Log( "GE: " + s ) )
#define DL                     # ( s )

import bool CheckEventStatus( uint idx, uint status ) from "game_event";
import void StopGameEvent( uint idx ) from "game_event";
import void RunGameEvent( uint idx ) from "game_event";
import bool GetFreeHex( Map& map, uint radius, uint16& hx, uint16& hy ) from "caravan";
import void SkillUp( Critter& player, int skill ) from "stdlib";

const uint[] colorsReplicator =
{
    25599, 25500, COLOR_RGB( 0, 0xFF, 0x99 ), COLOR_RGB( 0, 0xFF, 0x99 ), COLOR_RGB( 0x33, 0xCC, 0xCC ),
    COLOR_RGB( 0x99, 0x99, 0xff ), COLOR_RGB( 0, 0xCC, 0x66 )
};

const uint[][] entiresSandbags =
{
    { 149, 158 },
    { 158, 162 },
    { 163, 167 },
    { 170, 177 }
};


// GameEvent
uint e_BeginEvent( uint[] @ values )
{
    SetReplicationAbandoned();
    return 0;
}

uint e_StopEvent( uint[] @ values )
{
    // Остановка эвента
    StopEvent();
    return 0;
}

void SetReplicationAbandoned()
{
    GameVar@ status = GetGlobalVar( StatusGVar );
    if( valid( status ) )
        status = STATUS_EVENT_BEGIN;
    Location@ loc = GetLocationByPid( LOCATION_Replication4, 0 );
    if( valid( loc ) )
    {
        Map@ map = loc.GetMapByIndex( 0 );
        if( valid( map ) )
        {
            // Расположение укреплений из мешков
            for( uint i = 0, l = entiresSandbags.length(); i < l; i++ )
                for( uint j = entiresSandbags[ i ][ 0 ], k = entiresSandbags[ i ][ 1 ]; j <= k; j++ )
                {
                    if( j > entiresSandbags[ i ][ 0 ] )
                        PlaceSandbags( map, j - 1, j, 3 );
                }

        }
        // Расстановка нпц
        // Смоллет
        uint16 xC = 0;
        uint16 yC = 0;
        GetEntireFreeHex( map, ENTIRE_LOOK_TO, xC, yC );

        uint16 hx = 0;
        uint16 hy = 0;
		
        if( GetEntireFreeHex( map, ENTIRE_SMOLETT, hx, hy ) )
        {
            int[] params = { ST_REPLICATION_TIME, 5, ST_DIALOG_ID, DIALOG_repl_smallet, ST_NPC_ROLE, NPC_ROLE_DEF, ST_TEAM_ID, TEAM_ReplictionHubb, ST_BAG_ID, BAG_VaultCity_Military, MODE_NO_STEAL, 1, MODE_NO_LOOT, 1, MODE_NO_DROP, 1 };
            map.AddNpc( 489, hx, hy, GetDirection( hx, hy, xC, yC ), params, null, null );
        }
        Entire[] entires;
        if( ParseEntires( map, entires, ENTIRE_WARIOR ) > 0 )
        {
            for( uint i = 0, l = entires.length(); i < l; i++ )
            {
                int[] params = { ST_REPLICATION_TIME, 5, ST_DIALOG_ID, DIALOG_repl_ewarrior, ST_NPC_ROLE, NPC_ROLE_DEF, ST_TEAM_ID, TEAM_ReplictionHubb, ST_BAG_ID, 42, MODE_NO_STEAL, 1, MODE_NO_LOOT, 1, MODE_NO_DROP, 1 };
                map.AddNpc( 503, entires[ i ].HexX, entires[ i ].HexY, GetDirection( entires[ i ].HexX, entires[ i ].HexY, xC, yC ), params, null, null );
            }
        }
        entires.resize( 0 );
        if( ParseEntires( map, entires, ENTIRE_HUB ) > 0 )
        {
            for( uint i = 0, l = entires.length(); i < l; i++ )
            {
                int[] params = { ST_REPLICATION_TIME, 5, ST_DIALOG_ID, DIALOG_repl_ehub, ST_NPC_ROLE, NPC_ROLE_DEF, ST_TEAM_ID, TEAM_ReplictionHubb, ST_BAG_ID, BAG_Navarro_EnclavePatrol_Male2, MODE_NO_STEAL, 1, MODE_NO_LOOT, 1, MODE_NO_DROP, 1 };
                map.AddNpc( 485, entires[ i ].HexX, entires[ i ].HexY, GetDirection( entires[ i ].HexX, entires[ i ].HexY, xC, yC ), params, null, null );
            }
        }
        if( GetEntireFreeHex( map, ENTIRE_SCIENTIST, hx, hy ) )
        {
            int[] params = { ST_REPLICATION_TIME, 5, ST_DIALOG_ID, DIALOG_repl_escientist, ST_NPC_ROLE, NPC_ROLE_DEF, ST_TEAM_ID, TEAM_ReplictionHubb, ST_BAG_ID, BAG_Navarro_EnclavePatrol_Male2, MODE_NO_STEAL, 1, MODE_NO_LOOT, 1, MODE_NO_DROP, 1 };
            map.AddNpc( 301, hx, hy, GetDirection( hx, hy, xC, yC ), params, null, null );
        }
        @ map = loc.GetMapByIndex( 2 );
        if( valid( map ) )
        {
            PlaceReplicatorTanks( map );
            map.SetScript( "_MapInit" );
        }
    }
}

void PlaceSandbags( Map& map, uint eFrom, uint eTo, uint sandbagCount )
{
    Entire@ entireFrom = GetEntire( map, eFrom, 0 );
    Entire@ entireTo = GetEntire( map, eTo, 0 );
    if( valid( entireFrom ) && valid( entireTo ) )
    {
        uint16 x = entireFrom.HexX, y = entireFrom.HexY;
        uint8  dir = GetDirection( x, y, entireTo.HexX, entireTo.HexY );
        int    distantion = GetDistantion( x, y, entireTo.HexX, entireTo.HexY );
        for( int i = 0; i < distantion; i++ )
        {
            map.MoveHexByDir( x, y, dir, 1 );
            AddSandbag( map, x, y, sandbagCount );
        }
    }
}

void PlaceReplicatorTanks( Map& map )
{
    Item@[] items;
    Item@ item;
    Item@ tank;
    if( map.GetItems( PID_REPLICATOR_TANK_BROKEN, items ) > 0 )
    {
        for( uint i = 0, l = items.length(); i < l; i++ )
        {
            @item = items[ i ];
            if( valid( item ) )
            {
                @tank = map.AddItem( item.HexX, item.HexY, PID_REPLICATOR_TANK, 1 );
                if( valid( tank ) )
                {
                    tank.SetScript( "_ReplTankInit" );
                    DeleteItem( item );
                }
            }
        }
    }
}

// Остановка эвента
void StopEvent()
{
    GameVar@ status = GetGlobalVar( StatusGVar );
    if( valid( status ) )
        status = 0;
    Location@ loc = GetLocationByPid( LOCATION_Replication4, 0 );
    if( valid( loc ) )
    {
        Map@ map = loc.GetMapByIndex( 0 );
        if( valid( map ) )
        {
            CreateTimeEvent( __FullSecond + REAL_HOUR( 1 ), "e_DeleteSandbags", map.Id, true );
        }
        @map = loc.GetMapByIndex( 2 );
        Critter@[] zombies;
        if( map.GetCritters( 0, FIND_ONLY_NPC | FIND_ALL, zombies ) > 0 )
        {
            for( uint i = 0, l = zombies.length(); i < l; i++ )
            {
                Critter@ cr = zombies[ i ];
                if( valid( cr ) && cr.IsNpc() && cr.Stat[ ST_NPC_ROLE ] ==  ROLE_ZOMBIE )
                    DeleteNpc( cr );
            }
        }
    }
}

uint e_DeleteSandbags( uint[] @ values )
{
    Map@ map  = GetMap( values[ 0 ] );
    if( valid( map ) )
    {
        // Перенос игроков на глобал
        Critter@[] critters;
        if( map.GetCritters( 0, FIND_ONLY_PLAYERS | FIND_LIFE, critters ) > 0 )
        {
            for( uint i = 0, l = critters.length(); i < l; i++ )
            {
                Critter@ cr = critters[ i ];
                if( valid( cr ) && valid( cr.GetMap() ) )
                {
                    cr.TransitToGlobal( false );
                }
            }
        }
        // удаление мешков
        Item@[] items;
        map.GetItems( PID_SANDBAG_1, items );
        map.GetItems( PID_SANDBAG_2, items );
        map.GetItems( PID_SANDBAG_3, items );
        map.GetItems( PID_SANDBAG_4, items );
        map.GetItems( PID_SANDBAG_5, items );
        for( uint i = 0, l = items.length(); i < l; i++ )
        {
            Item@ item = items[ i ];
            if( valid( item ) )
                DeleteItem( item );
        }
        // удаление зомби
        // удаление хабологов
        critters.resize( 0 );
        if( map.GetCritters( 0, FIND_ONLY_NPC | FIND_ALL, critters ) > 0 )
        {
            for( uint i = 0, l = critters.length(); i < l; i++ )
            {
                Critter@ npc = critters[ i ];
                if( valid( npc ) && npc.IsNpc() && ( npc.Stat[ ST_NPC_ROLE ] == ROLE_ZOMBIE || npc.Stat[ ST_NPC_ROLE ] == NPC_ROLE_DEF ) )
                    DeleteNpc( npc );
            }
        }
    }
    return 0;
}

// Скрипт люка
void t_ReplDoor( Critter& player, Scenery& trigger, bool entered, uint8 dir )
{
    if( player.IsPlayer() )
    {
        GameVar@ status = GetGlobalVar( StatusGVar );
        if( valid( status ) &&     status == STATUS_EVENT_BEGIN )
        {
            Location@ loc = player.GetMap().GetLocation();
            if( loc.GetProtoId() == LOCATION_Replication4 )
            {
                Map@ map = loc.GetMapByIndex( 2 );
                if( valid( map ) )
                {
                    player.TransitToMap( map.Id, 0, false );
                }
            }
        }
    }
}

void t_Attack( Critter& player, Scenery& trigger, bool entered, uint8 dir )
{
    if( player.IsPlayer() && entered )
    {
        Critter@[] critters;
        Map@ map = player.GetMap();
        if( valid( map ) && map.GetCrittersHex( player.HexX, player.HexY, 20, FIND_LIFE | FIND_ONLY_NPC, critters ) > 0 )
        {
            for( uint i = 0, l = critters.length(); i < l; i++ )
            {
                Critter@ cr = critters[ i ];
                if( valid( cr ) && cr.IsNpc() && cr.Stat[ ST_NPC_ROLE ] == ROLE_ZOMBIE )
                {
                    AddAttackPlane( cr, 0, player );
                    if( Random( 1, 3 ) == 2 )
                        cr.SayMsg( SAY_SHOUT, TEXTMSG_TEXT, 4001 );
                }
            }
        }
    }
}

bool s_ReplDoor( Critter& player, Scenery& scenery, int skill, Item@ item )
{
    GameVar@ status = GetGlobalVar( StatusGVar );
    if( valid( status ) &&     status == STATUS_EVENT_BEGIN )
    {
        DL( "Check ok" );
        Location@ loc = player.GetMap().GetLocation();
        if( loc.GetProtoId() == LOCATION_Replication4 )
        {
            Map@ map = loc.GetMapByIndex( 2 );
            if( valid( map ) )
            {
                player.TransitToMap( map.Id, 0, false );
                DL( "transit" );
                return true;
            }
        }
    }
    return false;
}

// Скрипт карты
void _MapInit( Map& map, bool firstTime )
{
    map.SetEvent( MAP_EVENT_LOOP_0, "_MapLoop0" );
    map.SetEvent( MAP_EVENT_LOOP_1, "_MapLoop1" );   // Появление мобов
    map.SetEvent( MAP_EVENT_LOOP_2, "_MapLoop2" );
    map.SetLoopTime( 0, 5000 );
    map.SetLoopTime( 1, 60000 );
    map.SetLoopTime( 2, 30000 );
}

// Случайная подсветка репликатора, чтобы было понятно какой взрывать

void _MapLoop0( Map& map )
{
    Item@[] items;
    Item@ item;
    if( map.GetItems( PID_REPLICATOR_TANK, items ) > 0 )
    {
        for( uint i = 0, l = items.length(); i < l; i++ )
        {
            @item = items[ i ];
            if( valid( item ) && Random( 1, 2 ) == 2 )
            {
                item.LightIntensity = Random( 30, 80 );
                item.LightColor = colorsReplicator[ Random( 0, colorsReplicator.length() - 1 ) ];
                item.LightDistance = Random( 2, 6 );
                SETFLAG( item.Flags, ITEM_LIGHT );
                item.Update();
            }
        }
    }
}

// Генерация мобов, если их меньше 20
void _MapLoop1( Map& map )
{
    if( !CheckEventStatus( EVENT_ZOMBIE, PHASE_STATE_RUNNING ) )
    {
        // DL("loop 1---- убрать");
        // return;
    }
    if( map.GetCritters( PID_ZOMBIE, FIND_LIFE_AND_KO | FIND_ONLY_NPC, null ) < 20 )
    {
        Item@[] replicators;
        uint numRepl = map.GetItems( PID_REPLICATOR_TANK, replicators );
        if( numRepl == 0 )
        {
            // Остановка события
            RunGameEvent( EVENT_ZOMBIE_STOP );
            map.SetScript( "" );
            return;
        }
        else
        {
            uint16   hX = 0, hY = 0;
            Item@    replicator;
            Critter@ cr;
            for( uint i = 0; i < numRepl; i++ )
            {
                @replicator = replicators[ i ];
                if( valid( replicator ) && Random( 1, 3 ) > 1 )
                {
                    hX = replicator.HexX;
                    hY = replicator.HexY;
                    if( GetFreeHex( map, 7, hX, hY ) )
                    {
                        // в ST_VAR1 записываем текущий ближайший гекс, рядом с которым он крутится
                        // в ST_VAR2 - время спавна
                        int[] params = { ST_TEAM_ID, TEAM_Mob1, ST_VAR1, ENTIRE_ZOMBIE_0, ST_VAR2, __FullSecond, ST_NPC_ROLE, ROLE_ZOMBIE };
                        map.AddNpc( PID_ZOMBIE, hX, hY, 6, params, null, "game_event_replicator@_ZombieInit" );
                        map.SetTextMsg( replicator.HexX, replicator.HexY, COLOR_GREEN, TEXTMSG_TEXT, 4003 );
                    }
                }
            }
        }
    }
}

// Перемещение мобов на следующий пункт сбора
void _MapLoop2( Map& map )
{
    Critter@[] zombies;
    Critter@  cr;
    uint16    hX = 0;
    uint16    hY = 0;
    Location@ loc = map.GetLocation();
    Map@      mapGround = loc.GetMapByIndex( 0 );
    map.GetCritters( PID_ZOMBIE, FIND_LIFE | FIND_ONLY_NPC, zombies );
    for( uint i = 0, l = zombies.length(); i < l; i++ )
    {
        @cr = zombies[ i ];
        if( valid( cr ) )
        {
            uint entire = cr.Stat[ ST_VAR1 ];
            uint lastOrder = cr.Stat[ ST_VAR2 ];
            if( cr.IsNoPlanes() && lastOrder + TIME_MOVE < __FullSecond )
            {
                hX = cr.HexX;
                hY = cr.HexY;
                switch( entire )
                {
                case ENTIRE_ZOMBIE_EXIT:
                    // TODO:// Здесь нужно переключить счетчик сбежавших омбей
                    DeleteNpc( cr );
                    return;
                case ENTIRE_ZOMBIE_0:
                    DL( "0-" );
                case ENTIRE_ZOMBIE_1:
                case ENTIRE_ZOMBIE_2:
                    if( GetEntireFreeHex( map, cr.Stat[ ST_VAR1 ] + 1, hX, hY ) )
                    {
                        if( GetFreeHex( map, 7, hX, hY ) )
                        {
                            cr.StatBase[ ST_VAR2 ] = __FullSecond;
                            cr.StatBase[ ST_VAR1 ] += 1;
                            cr.SetHomePos( hX, hY, Random( 0, 5 ) );
                        }
                    }
                    break;
                case ENTIRE_ZOMBIE_3:
                    if( valid( mapGround ) )
                    {
                        if( cr.TransitToMap( mapGround.Id, 288, false ) )
                        {
                            cr.SetScript( "_ZombieOutInit" );
                        }
                    }
                    break;
                }
            }
        }
    }
}

// Cкрипт репликатора. Если у игрока взят квест, при применении взрывчатки на репликатор устанавливается таймер на взрыв.

#define QVAR_EXPLODE            ( LVAR_q_ge_repl_explode_tank ) // Локальная переменная, статус квеста "Горячий shotdown."
#define STATUS_QVAR_ACTIVE      ( 1 )                           // Взорвите репликационный чан, который вышел из строя.
#define STATUS_QVAR_SETUP       ( 2 )                           // Взрывчатка установлена. Уносите ноги, пока пластид не разнес к чертям все вокруг!
#define STATUS_QVAR_EXECUTED    ( 3 )                           // Вы взорвали один из репликационных чанов, производящих полчища безумных гулей. Возвращайтесь на поверхность и требуйте награду.
#define TOUT_EXPLODE            ( REAL_SECOND( 5 ) )            // Время до взрыва после установки взрывчатки

void _ReplTankInit( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_USE_ON_ME, "_ReplTankUseOnMe" );
}

import void Explode( Map@ map, uint16 hexX, uint16 hexY, Critter@ cr, uint16 explodePid, uint ownerId, int bonusDamage, int bonusRadius ) from "explode";
import void SmokeBlast( Map& map, uint16 hexX, uint16 hexY, uint16 smokePid, uint ownerId ) from "Mk2";

bool _ReplTankUseOnMe( Item& item, Critter& cr, Item@ usedItem )
{
    GameVar@ qVar = GetLocalVar( QVAR_EXPLODE, cr.Id );
    if( ( usedItem.GetProtoId() == PID_PLASTIC_EXPLOSIVES || usedItem.GetProtoId() == PID_ACTIVE_PLASTIC_EXPLOSIVE ) && valid( qVar ) && qVar == STATUS_QVAR_ACTIVE )
    {
        DeleteItem( usedItem );
        // Создаем событие взрыва и сообщаем игроку о том, что надо убегать
        qVar = STATUS_QVAR_SETUP;
        uint mapId = 0;
        Map@ map = cr.GetMap();
        if( valid( map ) )
        {
            mapId = map.Id;
        }
        uint[] values = { cr.Id, item.Id, mapId };
        CreateTimeEvent( __FullSecond + TOUT_EXPLODE, "e_ExplodeReplTank", values, true );
        return true;
    }
    return false;
}

uint e_ExplodeReplTank( uint[] @ values )
{
    uint     crId = values[ 0 ];
    uint     itemId = values[ 1 ];
    uint     mapId = values[ 2 ];

    Critter@ cr = GetCritter( crId );
    Item@    item = GetItem( itemId );
    Map@     map;
    if( mapId > 0 )
        @map = GetMap( mapId );

    if( valid( cr ) && valid( item ) )
    {
        GameVar@ qVar = GetLocalVar( QVAR_EXPLODE, cr.Id );
        if( valid( qVar ) && qVar == STATUS_QVAR_SETUP )
        {
            // Сообщение о выполнении квеста
            qVar = STATUS_QVAR_EXECUTED;
            SkillUp( cr, SK_TRAPS );
        }
        if( valid( map ) )
        {
            Explode( map, item.HexX, item.HexY, null, PID_ACTIVE_PLASTIC_EXPLOSIVE, 0, 300, Random( 1, 5 ) );
            map.AddItem( item.HexX, item.HexY, PID_REPLICATOR_TANK_BROKEN, 1 );
            DeleteItem( item );
            SmokeBlast( map, item.HexX, item.HexY, PID_MUSTARD_GAS, crId );
        }
    }
    return 0;
}

// Скрипт зомби на поверхности
void _ZombieOutInit( Critter& cr, bool firstTime )
{
    cr.StatBase[ ST_REPLICATION_TIME ] = -1;
    cr.SetEvent( CRITTER_EVENT_DEAD, "_OnZombieDead" );
    // При атаке на зомби, все остальные тоже сходят с ума
    cr.SetEvent( CRITTER_EVENT_ATTACKED, "_OnZombieAttackedGround" );
    cr.SetEvent( CRITTER_EVENT_MESSAGE, "_OnZombieMessage" );
    cr.SetEvent( CRITTER_EVENT_IDLE, "_OnZombieIdleGround" );
    cr.SetEvent( CRITTER_EVENT_PLANE_END, "_OnZombiePlaneEnd" );

}

bool _OnZombieAttackedGround( Critter& cr, Critter& attacker )
{

    cr.SendMessage( MSG_ALARM,  attacker.Id, MESSAGE_TO_I_SEE );
    if( Random( 1, 11 ) > 10 )
    {
        cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, 4001 );
        return false;
    }
    if( cr.Stat[ ST_VAR5 ] == 0 )
    {
        Critter@[] critters;
        Map@ map = cr.GetMap();
        if( valid( map ) && map.GetCritters( 0, FIND_LIFE_AND_KO | FIND_ALL, critters ) > 0 )
        {
            for( uint i = 0, l = critters.length(); i < l; i++ )
            {
                Critter@ target = critters[ i ];
                if( valid( target ) && target.Stat[ ST_NPC_ROLE ] != cr.Stat[ ST_NPC_ROLE ] )
                {
                    AddAttackPlane( cr, 0, target );
                }
            }
            cr.SayMsg( SAY_SHOUT, TEXTMSG_TEXT, 4001 );
        }
        cr.StatBase[ ST_VAR5 ] = 1;
    }
    return false;
}

void _OnZombieIdleGround( Critter& cr )
{
    if( !cr.IsLife() )
        return;
    Map@   map = cr.GetMap();
    uint16 hX = cr.HexX;
    uint16 hY = cr.HexY;
    if( GetEntireFreeHex( map, ENTIRE_ZOMBIE_EXIT, hX, hY ) )
    {
        if( GetDistantion( cr.HexX, cr.HexY, hX, hY ) < 6 )
        {
            // Выход на глобал
            DeleteNpc( cr );
            return;
        }
        cr.StatBase[ ST_VAR1 ] = ENTIRE_ZOMBIE_EXIT;
        if( GetFreeHex( map, 3, hX, hY ) )
        {
            cr.StatBase[ ST_VAR2 ] = __FullSecond;
            cr.StatBase[ ST_VAR1 ] = ENTIRE_ZOMBIE_EXIT;
            cr.SetHomePos( hX, hY, Random( 0, 5 ) );
        }
    }
}
// Скрипт зомби в подземелье
void _ZombieInit( Critter& cr, bool firstTime )
{
    cr.StatBase[ ST_REPLICATION_TIME ] = -1;
    cr.SetEvent( CRITTER_EVENT_DEAD, "_OnZombieDead" );
    // При атаке на зомби, все остальные тоже сходят с ума
    cr.SetEvent( CRITTER_EVENT_ATTACKED, "_OnZombieAttacked" );
    cr.SetEvent( CRITTER_EVENT_MESSAGE, "_OnZombieMessage" );
    cr.SetEvent( CRITTER_EVENT_IDLE, "_OnZombieIdle" );
    cr.SetEvent( CRITTER_EVENT_PLANE_END, "_OnZombiePlaneEnd" );
}


// PLANE_RUN_GLOBAL - вызвать глобальный обработчик, который определит сохранить или удалить план;
// PLANE_KEEP - сохранить план, без вызова глобального обработчика;
// PLANE_DISCARD - удалить план, без вызова глобального обработчика.
int _OnZombiePlaneEnd( Critter& cr, NpcPlane& plane, int reason, Critter@ someCr, Item@ someItem )
{
    if( reason != REASON_SUCCESS && cr.IsLife() )
    {
        // Проверяем, не домой ли он шел
        uint16 hx = 0;
        uint16 hy = 0;
        uint8  dir = 0;
        uint   mapId = 0;
        cr.GetHomePos( mapId, hx, hy, dir );
        Map@   map = cr.GetMap();
        if( plane.Type == AI_PLANE_WALK &&
            plane.Walk_HexX == hx &&
            plane.Walk_HexY == hy &&
            plane.Walk_Dir == dir &&
            map.GetPathLength( cr.HexX, cr.HexY, hx, hy, 0 ) == 0 )
        {
            // Застрял
            DL( "Homepos gag" );
            if( GetEntireFreeHex( map, cr.Stat[ ST_VAR1 ], hx, hy ) )
            {
                if( GetFreeHex( map, 7, hx, hy ) )
                {
                    cr.SetHomePos( hx, hy, Random( 0, 5 ) );
                }
            }
        }
        return PLANE_DISCARD;
    }
    return PLANE_RUN_GLOBAL;
}

#define STR_IDLE       ( 4002 )
#define RADIUS_ATTACK( 10 )
void _OnZombieIdle( Critter& cr )
{
    if( cr.IsDead() )
        return;
    Map@ map = cr.GetMap();
    if( valid( map ) && map.GetProtoId() == MAP_replication4_alternate && Random( 1, 3 ) == 3 )
    {
        Critter@[] critters;
        if( map.GetCrittersHex( cr.HexX, cr.HexY, RADIUS_ATTACK, FIND_LIFE | FIND_ONLY_PLAYERS, critters ) > 0 )
        {
            for( uint i = 0, l = critters.length(); i < l; i++ )
            {
                Critter@ target = critters[ i ];
                if( valid( target ) )
                {
                    AddAttackPlane( cr, 0, target );
                    cr.AddEnemyInStack( cr.Id );
                }
            }
            cr.SayMsg( SAY_SHOUT, TEXTMSG_TEXT, 4001 );
            return;
        }
    }
    if( cr.IsLife() && cr.IsNoPlanes() && Random( 0, 3 ) == 1 )
    {
        cr.MoveRandom();
        if( Random( 1, 12 ) == 1 )
            cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, 4002 );
    }
}

import bool AddAttackPlane( Critter& npc, uint priority, Critter& target ) from "npc_planes";
void        _OnZombieMessage( Critter& cr, Critter& fromCr, int message, int value )
{
    if( message == MSG_ALARM && cr.IsNpc() && cr.GetPlanes( AI_PLANE_ATTACK, null ) == 0 )
    {
        Critter@ target = GetCritter( value );
        // if(valid(target) && target.Stat[ST_NPC_ROLE] != ROLE_ZOMBIE) Фильтр по роли, чтобы не били своих - пусть бьют
        if( valid( target ) )
        {
            AddAttackPlane( cr, 0, target );
            cr.AddEnemyInStack( value );
        }
    }

}

bool _OnZombieAttacked( Critter& cr, Critter& attacker )
{
    // if(attacker.IsPlayer())
    // {
    cr.SendMessage( MSG_ALARM,  attacker.Id, MESSAGE_TO_ALL_ON_MAP );
    // }
    return false;
}

void _OnZombieDead( Critter& cr, Critter@ killer )
{
    uint killerId = 0;
    if( valid( killer ) )
    {
        killerId = killer.Id;
        GameVar@ qStatus = GetLocalVar( LVAR_q_ge_repl_nopasaran, killerId );
        if( valid( qStatus ) && qStatus > 0 && qStatus < 6 )
        {
            killer.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 4005 );
        }
    }
    cr.AddTimeEvent( "cte_RespawnZombie", REAL_SECOND( Random( 30, 90 ) ), CTE_ZOMBIE_RESPAWN, killerId );
    // TODO: добавить счетчик убитых зомби сюда
}

#define STR_RESPAWN    ( 4000 )
#define STR_COUNTER    (
uint cte_RespawnZombie( Critter& cr, int, int& killerId, int& )
{
    DL( "respawn/ Anim:" + cr.Anim2Dead );
    GameVar@ qStatus;
    Critter@ killer;
    if( killerId > 0 )
    {
        @qStatus = GetLocalVar( LVAR_q_ge_repl_nopasaran, killerId );
        @killer = GetCritter( killerId );
    }
    if( cr.IsDead() && cr.Anim2Dead < ANIM2_DEAD_BLOODY_SINGLE )
    {
        Map@ map = cr.GetMap();
        if( !valid( map ) )
            return 0;
        if( !map.IsHexPassed( cr.HexX, cr.HexY ) )
            return Random( 30, 90 );
        cr.StatBase[ ST_CURRENT_HP ] = cr.Stat[ ST_MAX_LIFE ] / 2;
        cr.ToLife();
        cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_RESPAWN );
        DL( "success" );
        if( valid( killer ) && valid( qStatus ) && qStatus > 0 && qStatus < 6 )
        {
            killer.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 4007 );
        }
    }
    else
    {
        if( valid( killer ) && valid( qStatus ) && qStatus > 0 && qStatus < 6 )
        {
            killer.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 4006 );
            qStatus = qStatus.GetValue() + 1;
        }

    }
    return 0;
}

// Хабологи-торговцы на репл. станциях

void t_Notify( Critter& player, Scenery& trigger, bool entered, uint8 dir )
{
    if( entered && player.IsPlayer() && player.Stat[ ST_LEVEL ] > 9 )
    {
        GameVar@ status = GetGlobalVar( StatusGVar );
        if( valid( status ) && status == STATUS_EVENT_BEGIN )
        {
            GameVar@ counter = GetLocalVar( LVAR_q_ge_repl_notifictions, player.Id );
            GameVar@ qStatus = GetLocalVar( LVAR_q_ge_repl_findstation, player.Id );
            if( valid( counter ) && counter < 3 && valid( qStatus ) && qStatus == 0 )
            {
                Critter@[] critters;
                Map@ map = player.GetMap();
                if( valid( map ) && map.GetCritters( 0, FIND_ONLY_NPC | FIND_LIFE, critters ) > 0 )
                {
                    for( uint i = 0, l = critters.length(); i < l; i++ )
                    {
                        Critter@ cr = critters[ i ];
                        if( valid( cr ) && cr.Stat[ ST_DIALOG_ID ] == DIALOG_repl_trader )
                        {
                            cr.SayMsg( SAY_NORM, TEXTMSG_TEXT, 4004, "$player" + GetPlayerName( player.Id ) );
                            counter = counter.GetValue() + 1;
                            return;
                        }
                    }
                }
            }
        }
    }
}


// debug
// ~run debug ToMapEntire 224 0 3
// ~run game_event_replicator Stop 0 0 0
void Run( Critter& cr, int, int, int )
{
    SetReplicationAbandoned();
}
void Stop( Critter& cr, int, int, int )
{
    StopEvent();
}
