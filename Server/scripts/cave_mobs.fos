// Author: rifleman17
// Скрипт генератора мобов в пещерах, аналог оригинальному из Ф2

#include "_ai.fos"
#include "_bags.fos"
#include "_macros.fos"
#include "_npc_pids.fos"
#include "_teams.fos"
#include "entire.fos"

#define ENTIRE_SPAWN       ( 99 )
#define ENTIRE_CHEST       ( 98 )

#define SCRIPT_GECKO       ( "Mk2@Mob::_MobInit" )
#define SCRIPT_SCORP       ( "Mk2@Mob::_MobInit" )
#define SCRIPT_DCLAW       ( "Mk2@Mob::_MobInit" )
#define SCRIPT_ECRAT       ( "Mk2@Mob::_MobInit" )
#define SCRIPT_ROBBER      ( "cave_mobs@_CaveNpcInit" )
#define MESSAGE_ATTACK     ( 32 )                   // Сообщение от игрока "атакуйте меня". Отсылается всем видимым мобам, см. encounter_npc.fos
#define PID_CHEST          ( PID_CHEST )
#define ENTIRE_DIST        ( Random( 2, 5 ) )       // Дистанция от контрольного гекса до точки установки Криттера
#define AI_ROBBERS         ( AIPACKET_MERC_RAIDER ) // Общий аи пакет для рейдеров в пещерах
#define SEE_PLAYER_FROM    ( 12020 )                // начало строк "увидел игрока
#define SEE_PLAYER_TO      ( 12038 )                // конец строк "увидел игрока"

#define IS_CAVE            ( 59 )                   //

import void EncounterNpc_NpcInit( Critter& npc, bool firstTime ) from "Mk2";
import bool AddAttackPlane( Critter& npc, uint priority, Critter& target, bool run ) from "npc_planes";

import void initEvents( Map& map, bool firstTime ) from "events_in_encaunter"; // Ra

class CCaveMobInfo
{
    uint16 Pid;
    string Script;
    uint16 Bag;
    uint16 AI;
    uint16 Team;

    void Set( uint16 pid, string script, uint16 bag, uint16 ai, uint16 team )
    {
        this.Pid = pid;
        this.Script = script;
        this.Bag = bag;
        this.AI = ai;
        this.Team = team;
    }

    Critter@ TryPlaceMob( Entire@ entire, Map@ map, uint8 dir )
    {
        if( !valid( entire ) || !validEngineObject( map ) )
            return null;
        uint16 crX = entire.HexX;
        uint16 crY = entire.HexY;
        map.MoveHexByDir( crX, crY, dir, ENTIRE_DIST );

        if( map.GetPathLength( crX, crY, entire.HexX, entire.HexY, 0 ) > 0 && map.IsHexPassed( crX, crY ) )
        {
            int[] params =
            {
                ST_AI_ID, this.AI,
                ST_TEAM_ID, this.Team,
                ST_BAG_ID, this.Bag,
                MODE_ENCAUNTER_MOB, 1
            };
            Critter@ mob = map.AddNpc( this.Pid, crX, crY, GetDirection( crX, crY, entire.HexX, entire.HexY ), params, null, this.Script );
            if( validEngineObject( mob ) )
                return mob;
        }
        return null;
    }
}

class CCaveItemInfo
{
    uint16 Pid;
    uint8  Min;
    uint8  Max;

    void Set( uint16 pid, uint8 min, uint8 max )
    {
        this.Pid = pid;
        this.Min = min;
        this.Max = max;
    }

    void AddToChect( Item@ chest )
    {
        if( !validEngineObject( chest ) )
            return;
        uint num = Random( this.Min, this.Max );
        if( num == 0 )
            return;
        chest.AddItem( this.Pid, num, 0 );
    }
}

class CCaveContainerInfo
{
    uint16 Pid;
    uint8  Entire;
    uint8  TrapValue;
    uint8  LockerComplexity;

    CCaveItemInfo[] Items;

    void Set( uint16 pid, uint16 entire, uint8 trapValue, uint8 lockerCompl )
    {
        this.Pid = pid;
        this.Entire = entire;
        this.TrapValue = trapValue;
        this.LockerComplexity = lockerCompl;
    }

    void PlaceCont( Map @ map )
    {
        if( !validEngineObject( map ) )
            return;
        Entire[] entires;
        uint len = ParseEntires( map, entires, ENTIRE_CHEST );
        if( len > 0 )
        {
            bool filled = false;
            uint tries = 0;
            int  maxChests = Random( 2, 3 );
            while( maxChests > 0 && tries < 10 )
            {
                Entire@ ent = entires[ Random( 0, len - 1 ) ];
                if( map.GetItems( ent.HexX, ent.HexY, null ) == 0 )
                {
                    maxChests--;
                    Item@ chest = map.AddItem( ent.HexX, ent.HexY, PID_CHEST, 1 );
                    if( validEngineObject( chest ) && !filled )
                    {
                        filled = true;
                        for( uint i = 0, iMax = this.Items.length(); i < iMax; i++ )
                        {
                            this.Items[ i ].AddToChect( chest );
                        }
                    }
                }
                tries++;
            }
        }
    }
}

class CCaveEncounterInfo
{
    CCaveEncounterInfo()
    {
        this.IsSpecial = false;
    }
    bool               IsSpecial;
    uint8              MobsNum;
    CCaveMobInfo[] Mobs;
    CCaveContainerInfo Container;
    Map@               CaveMap;

    void AddCaveMobInfo( uint16 pid, string script, uint16 bag, uint16 ai, uint16 team )
    {
        Mobs.grow( 1 );
        Mobs.last().Set( pid, script, bag, ai, team );
    }

    void AddCaveChestInfo( uint16 pid, uint16 entire, uint8 trapValue, uint8 lockerCompl )
    {
        this.Container = CCaveContainerInfo();
        this.Container.Set( pid, entire, trapValue, lockerCompl );
    }

    void AddCaveItemInfo( uint16 pid, uint8 min, uint8 max )
    {
        if( !valid( this.Container ) )
            return;
        this.Container.Items.grow( 1 );
        this.Container.Items.last().Set( pid, min, max );
    }

    void FillMap( Map@ map, Critter @[] @ group )
    {
        if( !validEngineObject( map ) )
            return;
        if( this.IsSpecial && valid( this.Container ) )
            this.Container.PlaceCont( map );
        Entire[] entires;
        uint len = ParseEntires( map, entires, ENTIRE_SPAWN );
        if( len > 0 )
        {
            int tries = 0;
            for( uint i = 0; i < len; i++ )
            {
                for( uint k = 0; k < this.MobsNum; k++ )
                {
                    tries = 10;
                    Critter@ mob = null;
                    while( !validEngineObject( mob ) && tries > 0 )
                    {
                        CCaveMobInfo @ mInfo = this.Mobs[ Random( 0, this.Mobs.length() - 1 ) ];
                        if( valid( mInfo ) )
                        {
                            @mob = mInfo.TryPlaceMob( entires[ i ], map, Random( 0, 5 ) );
                        }
                        tries--;
                    }
                    if( validEngineObject( mob ) )
                    {
                        for( uint j = 0, jMax = group.length(); j < jMax; j++ )
                        {
                            Critter@ target = group[ j ];
                            if( validEngineObject( target ) && !target.IsDead() && target.IsPlayer() )
                            {
                                mob.AddEnemyInStack( target.Id );
                            }
                        }
                    }
                }
            }
        }
    }
}

CCaveEncounterInfo@ SetupEncounterCave( Map@ map, Critter@[] group )
{
    uint8 maxLevel = 0;
    uint8 minLuck = 10;
    uint8 minLevel = 30;
    for( uint i = 0, iMax = group.length(); i < iMax; i++ )
    {
        if( validEngineObject( group[ i ] ) )
        {
            if( uint8( group[ i ].Stat[ ST_LEVEL ] ) > maxLevel )
                maxLevel = group[ i ].Stat[ ST_LEVEL ];
            if( uint8( group[ i ].Stat[ ST_LUCK ] ) < minLuck )
                minLuck = group[ i ].Stat[ ST_LUCK ];
            if( uint8( group[ i ].Stat[ ST_LEVEL ] ) < minLevel )
                minLevel = group[ i ].Stat[ ST_LEVEL ];
        }
    }
    CCaveEncounterInfo @ eInfo = CCaveEncounterInfo();
    SetupMobs( eInfo, maxLevel );
    SetupChest( eInfo, minLuck, minLevel );
    return eInfo;
}

const uint16[] Pids_TreasureLow = { PID_ZIP_GUN, PID_10MM_PISTOL, PID_MOLOTOV_COCKTAIL, PID_FLARE, PID_SPEAR, PID_BRASS_KNUCKLES, PID_LEATHER_JACKET };
const uint16[] Pids_TreasureMid = { PID_10MM_SMG, PID_SAWED_OFF_SHOTGUN, PID_FRAG_GRENADE, PID_COMBAT_KNIFE, PID_CROWBAR, PID_LEATHER_ARMOR };
const uint16[] Pids_TreasureHigh = { PID_HUNTING_RIFLE, PID_ASSAULT_RIFLE, PID_MINIGUN, PID_PLASMA_GRENADE, PID_WAKIZASHI_BLADE, PID_WRENCH, PID_POWER_FIST, PID_METAL_ARMOR };
const uint16[] Pids_Ammo = { PID_7_62MM_AMMO, PID_5MM_AP, PID_14MM_AP, PID_SMALL_ENERGY_CELL, PID_223_FMJ, PID_SHOTGUN_SHELLS, PID_SHOTGUN_SHELLS, PID_SHOTGUN_SHELLS, PID_SHOTGUN_SHELLS, PID_45_CALIBER_AMMO, PID_SMALL_ENERGY_CELL, PID_10MM_JHP, PID_2MM_EC_AMMO, PID_10MM_JHP, PID_10MM_JHP };

void SetupChest( CCaveEncounterInfo& eInfo, uint8 minLuck, uint8 minLevel )
{
    if( !eInfo.IsSpecial )
        return;
    uint8 lockCompl = 0;  // ToDO
    uint8 trapVal = 0;    // ToDO
    int   numSpecial = CLAMP( uint( minLuck / 3 ), 1, 3 );
    eInfo.AddCaveChestInfo( PID_CHEST, ENTIRE_CHEST, trapVal, lockCompl );
    if( Random( 1, 2 ) == 1 )
        eInfo.AddCaveItemInfo( PID_STIMPAK, 1, 5 );
    if( Random( 1, 4 ) == 1 )
    {
        eInfo.AddCaveItemInfo( Pids_TreasureLow[ Random( 0, Pids_TreasureLow.length() - 1 ) ], 1, 1 );
        numSpecial--;
        if( minLevel > 9 && numSpecial > 0 )
        {
            numSpecial--;
            eInfo.AddCaveItemInfo( Pids_TreasureMid[ Random( 0, Pids_TreasureMid.length() - 1 ) ], 1, 1 );
        }
        if( minLevel >= 20 && numSpecial > 0 )
        {
            numSpecial--;
            eInfo.AddCaveItemInfo( Pids_TreasureHigh[ Random( 0, Pids_TreasureHigh.length() - 1 ) ], 1, 1 );
        }
    }
    if( CLAMP( Random( 1, 11 - minLuck ), 1, 2 ) == 1 )
    {
        eInfo.AddCaveItemInfo( Pids_Ammo[ Random( 0, Pids_Ammo.length() - 1 ) ], minLevel, minLevel * 5 );
    }
    eInfo.AddCaveItemInfo( PID_BOTTLE_CAPS, minLuck * 20, minLuck * minLuck * 20 );
}

void SetupMobs( CCaveEncounterInfo& eInfo, uint8 maxLevel )
{
    uint8 val = Random( 1, 13 );
    CCaveMobInfo @ mInfo;
    switch( val )
    {
    case 1:
        eInfo.MobsNum = Random( 3, 5 );
        if( maxLevel < 10 )
            eInfo.AddCaveMobInfo( NPC_PID_SmallSilverGecko, SCRIPT_GECKO, BAG_Empty, AIPACKET_GECKO, TEAM_Mob0 );
        if( maxLevel > 9 && maxLevel < 16 )
            eInfo.AddCaveMobInfo( NPC_PID_ToughSilverGecko, SCRIPT_GECKO, BAG_Empty, AIPACKET_GECKO, TEAM_Mob0 );
        if( maxLevel > 15 && maxLevel < 21 )
            eInfo.AddCaveMobInfo( NPC_PID_FireGecko, SCRIPT_GECKO, BAG_Fire_Gecko_Weapon, AIPACKET_GECKO, TEAM_Mob0 );
        if( maxLevel > 20 )
            eInfo.AddCaveMobInfo( NPC_PID_ToughFireGecko, SCRIPT_GECKO, BAG_Empty, AIPACKET_GECKO, TEAM_Mob0 );
        break;
    case 2:
        eInfo.MobsNum = Random( 3, 5 );
        if( maxLevel < 10 )
            eInfo.AddCaveMobInfo( NPC_PID_GoldenGecko, SCRIPT_GECKO, BAG_Empty, AIPACKET_GECKO, TEAM_Mob0 );
        if( maxLevel > 9 && maxLevel < 16 )
            eInfo.AddCaveMobInfo( NPC_PID_ToughGoldenGecko, SCRIPT_GECKO, BAG_Empty, AIPACKET_GECKO, TEAM_Mob0 );
        if( maxLevel > 15 && maxLevel < 21 )
            eInfo.AddCaveMobInfo( NPC_PID_FireGecko, SCRIPT_GECKO, BAG_Empty, AIPACKET_GECKO, TEAM_Mob0 );
        if( maxLevel > 20 )
            eInfo.AddCaveMobInfo( NPC_PID_ToughFireGecko, SCRIPT_GECKO, BAG_Empty, AIPACKET_GECKO, TEAM_Mob0 );
        break;
    case 3:
        eInfo.MobsNum = Random( 3, 5 );
        eInfo.AddCaveMobInfo( NPC_PID_SmallRadscorpion, SCRIPT_SCORP, BAG_Empty, AIPACKET_SCORPION, TEAM_Mob0 );
        break;
    case 4:
        eInfo.MobsNum = Random( 3, 5 );
        eInfo.AddCaveMobInfo( NPC_PID_LargeRadscorpion, SCRIPT_SCORP, BAG_Empty, AIPACKET_SCORPION, TEAM_Mob0 );
        break;
    case 5:
        eInfo.MobsNum = Random( 3, 5 );
        eInfo.AddCaveMobInfo( NPC_PID_SmDeathclaw, SCRIPT_DCLAW, BAG_Empty, AIPACKET_DEATHCLAW, TEAM_Mob0 );
        break;
    case 6:
        eInfo.MobsNum = 5;
        eInfo.AddCaveMobInfo( NPC_PID_Deathclaw, SCRIPT_DCLAW, BAG_Empty, AIPACKET_DEATHCLAW, TEAM_Mob0 );
        break;
    case 7:
        eInfo.MobsNum = Random( 3, 5 );
        eInfo.AddCaveMobInfo( NPC_PID_MutatedMolerat, SCRIPT_ECRAT, BAG_Empty, AIPACKET_RAT, TEAM_Mob0 );
        break;
    case 8:
        eInfo.MobsNum = Random( 4, 5 );
        eInfo.AddCaveMobInfo( NPC_PID_ToughPigRat, SCRIPT_ECRAT, BAG_Empty, AIPACKET_RAT, TEAM_Mob0 );
    case 9:
        if( maxLevel < 10 )
        {
            eInfo.AddCaveMobInfo( NPC_PID_SmallSilverGecko, SCRIPT_GECKO, BAG_Empty, AIPACKET_GECKO, TEAM_Mob0 );
            eInfo.AddCaveMobInfo( NPC_PID_GoldenGecko, SCRIPT_GECKO, BAG_Empty, AIPACKET_GECKO, TEAM_Mob0 );
            eInfo.MobsNum = Random( 3, 5 );
        }
        else
        {
            eInfo.AddCaveMobInfo( NPC_PID_ToughSilverGecko, SCRIPT_GECKO, BAG_Empty, AIPACKET_GECKO, TEAM_Mob0 );
            eInfo.AddCaveMobInfo( NPC_PID_ToughGoldenGecko, SCRIPT_GECKO, BAG_Empty, AIPACKET_GECKO, TEAM_Mob0 );
            eInfo.MobsNum = 5;
            if( maxLevel > 9 && maxLevel < 20 )
            {
                eInfo.AddCaveMobInfo( NPC_PID_FireGecko, SCRIPT_GECKO, BAG_Empty, AIPACKET_GECKO, TEAM_Mob0 );
            }
            else
            {
                eInfo.AddCaveMobInfo( NPC_PID_ToughFireGecko, SCRIPT_GECKO, BAG_Empty, AIPACKET_GECKO, TEAM_Mob0 );
            }
        }
        break;
    case 10:
        eInfo.MobsNum = Random( 3, 5 );
        eInfo.AddCaveMobInfo( NPC_PID_SmallRadscorpion, SCRIPT_SCORP, BAG_Empty, AIPACKET_SCORPION, TEAM_Mob0 );
        eInfo.AddCaveMobInfo( NPC_PID_LargeRadscorpion, SCRIPT_SCORP, BAG_Empty, AIPACKET_SCORPION, TEAM_Mob0 );
        break;
    case 11:
        eInfo.AddCaveMobInfo( NPC_PID_SmDeathclaw, SCRIPT_DCLAW, BAG_Empty, AIPACKET_DEATHCLAW, TEAM_Mob0 );
        eInfo.AddCaveMobInfo( NPC_PID_Deathclaw, SCRIPT_DCLAW, BAG_Empty, AIPACKET_DEATHCLAW, TEAM_Mob0 );
        eInfo.MobsNum = 5;
        break;
    case 12:
        eInfo.AddCaveMobInfo( NPC_PID_MutatedMolerat, SCRIPT_ECRAT, BAG_Empty, AIPACKET_RAT, TEAM_Mob0 );
        eInfo.AddCaveMobInfo( NPC_PID_ToughPigRat, SCRIPT_ECRAT, BAG_Empty, AIPACKET_RAT, TEAM_Mob0 );
        eInfo.MobsNum = 5;
        break;
    case 13:
        eInfo.IsSpecial = true;
        if( maxLevel < 10 )
        {
            eInfo.AddCaveMobInfo( NPC_PID_CaveRobber_male_1, SCRIPT_ROBBER, BAG_CaveBanditLvl1, AI_ROBBERS, TEAM_Bandit );
            eInfo.AddCaveMobInfo( NPC_PID_CaveRobber_female_1, SCRIPT_ROBBER, BAG_CaveBanditLvl1, AI_ROBBERS, TEAM_Bandit );
            eInfo.MobsNum = Random( 2, 3 );
            break;
        }
        if( maxLevel > 9 && maxLevel < 21 )
        {
            eInfo.AddCaveMobInfo( NPC_PID_CaveRobber_male_2, SCRIPT_ROBBER, BAG_CaveBanditLvl2, AI_ROBBERS, TEAM_Bandit );
            eInfo.AddCaveMobInfo( NPC_PID_CaveRobber_female_2, SCRIPT_ROBBER, BAG_CaveBanditLvl2, AI_ROBBERS, TEAM_Bandit );
            eInfo.MobsNum = Random( 3, 4 );
            break;
        }
        if( maxLevel > 20 )
        {
            eInfo.AddCaveMobInfo( NPC_PID_CaveRobber_male_3, SCRIPT_ROBBER, BAG_VaultCity_Guard, AI_ROBBERS, TEAM_Bandit );
            eInfo.AddCaveMobInfo( NPC_PID_CaveRobber_female_3, SCRIPT_ROBBER, BAG_VaultCity_Guard, AI_ROBBERS, TEAM_Bandit );
            eInfo.MobsNum = Random( 3, 4 );
            break;
        }
    default:
        return;
    }
}

void GenerateCavernEncounter( Map @ map, Critter@[] @ critters )
{
    if( !validEngineObject( map ) || !valid( critters ) )
        return;
    CCaveEncounterInfo@ eInfo = SetupEncounterCave( map, critters );
    if( valid( eInfo ) )
    {
        map.SetData( IS_CAVE, 1 );
        initEvents( map, true );
        map.SetScript( "events_in_encaunter@initEvents" );

        eInfo.FillMap( map, critters );
        // map.SetEvent(MAP_EVENT_IN_CRITTER,"_CaveInCritter");
    }
}

void _CaveInCritter( Map& map, Critter& cr )
{
    if( cr.IsPlayer() )
    {
        uint[] values( 2 );
        values[ 0 ] = cr.Id;
        values[ 1 ] = map.Id;
        CreateTimeEvent( ::__FullSecond + REAL_SECOND( 8 ), "e_PlayerHere", values, false );
    }
}

uint e_PlayerHere( uint[] @ values )
{
    if( valid( values ) && values.length() > 1 )
    {
        Critter@ cr = GetCritter( values[ 0 ] );
        if( validEngineObject( cr ) && cr.IsPlayer() )
        {
            Map@ map = cr.GetMap();
            if( validEngineObject( map ) && map.Id == values[ 1 ] )
            {
                cr.SendMessage( MESSAGE_ATTACK, cr.Id, MESSAGE_TO_WHO_SEES_ME );
                cr.SendMessage( MESSAGE_ATTACK, cr.Id, MESSAGE_TO_I_SEE );
            }
        }
    }
    return 0;
}

void _CaveNpcInit( Critter& cr, bool firstTime )
{
    EncounterNpc_NpcInit( cr, firstTime );
    cr.SetEvent( CRITTER_EVENT_SHOW_CRITTER, "_CaveNpcShowCritter" );
}

void _CaveNpcShowCritter( Critter& cr, Critter& showCrit )
{
    if( showCrit.IsPlayer() )
    {
        if( Random( 0, 50 ) < 100 )
            cr.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_COMBAT, Random( SEE_PLAYER_FROM, SEE_PLAYER_TO ) * 10 );
        AddAttackPlane( cr, 0, showCrit, __RunOnCombat );
    }
}
