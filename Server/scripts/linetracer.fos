// Author: Atom
#define __LINETRACER_MODULE__
#include "_macros.fos"
#include "linetracer_h.fos"

// utilities for tracing
// pathfinding/critter-gathering functions etc.

// math
#define SQRT3T2_FLOAT    ( 3.4641016151f )
#define SQRT3_FLOAT      ( 1.732050807568877f )
#define BIAS_FLOAT       ( 0.02f )
#define RAD2DEG          ( 57.29577951f )

float GetDirectionF( uint16 hx, uint16 hy, uint16 tx, uint16 ty )
{
    float nx = 3 * ( float(tx) - float(hx) ),
          ny = SQRT3T2_FLOAT * ( float(ty) - float(hy) ) - ( float(tx % 2) - float(hx % 2) ) * SQRT3_FLOAT;
    return 180.0f + RAD2DEG* atan2( ny, nx ); // in degrees, because cvet loves the degrees
}

float AllDist1 = 0;
float AllDist2 = 0;

float MaxAllDist1 = 0;
float MaxAllDist2 = 0;

float get_TraceAllDist1()
{
	return AllDist1;
}

float get_TraceAllDist2()
{
	return AllDist2;
}

float get_MaxTraceAllDist1()
{
	return MaxAllDist1;
}

float get_MaxTraceAllDist2()
{
	return MaxAllDist2;
}

#ifdef __SERVER
uint LineTracerHex( uint16 hx, uint16 hy, uint16 tx, uint16 ty, Map& map, uint dist, ITraceContext@ context )
#endif
#ifdef __CLIENT
uint LineTracerHex( uint16 hx, uint16 hy, uint16 tx, uint16 ty, uint dist, ITraceContext@ context )
#endif
{
    if( dist == 0 )
        dist = GetDistantion( hx, hy, tx, ty );
    float dir = GetDirectionF( hx, hy, tx, ty );
    uint8 dir1, dir2;
    if( ( 30.0f <= dir ) && ( dir < 90.0f ) )
    {
        dir1 = 5;
        dir2 = 0;
    }
    else if( ( 90.0f <= dir ) && ( dir < 150.0f ) )
    {
        dir1 = 4;
        dir2 = 5;
    }
    else if( ( 150.0f <= dir ) && ( dir < 210.0f ) )
    {
        dir1 = 3;
        dir2 = 4;
    }
    else if( ( 210.0f <= dir ) && ( dir < 270.0f ) )
    {
        dir1 = 2;
        dir2 = 3;
    }
    else if( ( 270.0f <= dir ) && ( dir < 330.0f ) )
    {
        dir1 = 1;
        dir2 = 2;
    }
    else
    {
        dir1 = 0;
        dir2 = 1;
    }

    uint16 cx = hx,
           cy = hy,
           px = hx,
           py = hy,
           t1x, t1y, t2x, t2y;

    float x1 = 3 * float(hx) + BIAS_FLOAT,
          y1 = SQRT3T2_FLOAT * float(hy) - ( float(hx % 2) ) * SQRT3_FLOAT + BIAS_FLOAT,
          x2 = 3 * float(tx) + BIAS_FLOAT,
          y2 = SQRT3T2_FLOAT * float(ty) - ( float(tx % 2) ) * SQRT3_FLOAT + BIAS_FLOAT,
          dx = x2 - x1,
          dy = y2 - y1,
          c1x, c1y, c2x, c2y,            // test hex
          dist1, dist2;
	
	AllDist1 = 0;
	AllDist2 = 0;
    for( uint i = 1; i <= dist; i++ )
    {
        t1x = cx;
        t2x = cx;
        t1y = cy;
        t2y = cy;
        #ifdef __SERVER
        map.MoveHexByDir( t1x, t1y, dir1, 1 );
        map.MoveHexByDir( t2x, t2y, dir2, 1 );
        #endif
        #ifdef __CLIENT
        MoveHexByDir( t1x, t1y, dir1, 1 );
        MoveHexByDir( t2x, t2y, dir2, 1 );
        #endif
        c1x = 3 * float(t1x);
        c1y = SQRT3T2_FLOAT * float(t1y) - ( float(t1x % 2) ) * SQRT3_FLOAT;
        c2x = 3 * float(t2x);
        c2y = SQRT3T2_FLOAT * float(t2y) - ( float(t2x % 2) ) * SQRT3_FLOAT;
        dist1 = dx * ( y1 - c1y ) - dy * ( x1 - c1x );
        dist2 = dx * ( y1 - c2y ) - dy * ( x1 - c2x );
        dist1 = ( ( dist1 > 0 ) ? dist1 : -dist1 );
        dist2 = ( ( dist2 > 0 ) ? dist2 : -dist2 );
		AllDist1 += dist1;
		AllDist2 += dist2;
        if( dist1 <= dist2 )
        {
			MaxAllDist1 += dist1;
			MaxAllDist2 += dist2;
            cx = t1x;
            cy = t1y;
        }                                            // left hand biased
        else
        {
			MaxAllDist1 += dist2;
			MaxAllDist2 += dist1;
            cx = t2x;
            cy = t2y;
        }

        // if MoveHexByDir tried to leave the map and failed:
        if( ( cx == px ) && ( cy == py ) )
            return i - 1;
        else
        {
            px = cx;
            py = cy;
        }

        #ifdef __SERVER
        if( context.Exec( map, cx, cy ) )
        #endif
        #ifdef __CLIENT
        if( context.Exec( cx, cy ) )
        #endif
            return i;

    }
    return dist;
}

#ifdef __SERVER
uint LineTracerSquare( uint16 hx, uint16 hy, uint16 tx, uint16 ty, Map& map, uint dist, ITraceContext@ context )
#endif
#ifdef __CLIENT
uint LineTracerSquare( uint16 hx, uint16 hy, uint16 tx, uint16 ty, uint dist, ITraceContext@ context )
#endif
{
    float dir = atan2( float(ty - hy), float(tx - hx) ),
          dx = cos( dir ),
          dy = sin( dir );
    if( abs( dx ) > abs( dy ) )
    {
        dy /= abs( dx );
        dx = ( dx > 0 ? 1.0f : -1.0f );
    }
    else
    {
        dx /= abs( dy );
        dy = ( dy > 0 ? 1.0f : -1.0f );
    }
    uint16 x1 = uint16( float(hx) + 0.5f ),
           y1 = uint16( float(hy) + 0.5f ),
    #ifdef __SERVER
           maxx = map.GetWidth(),
           maxy = map.GetHeight(),
    #endif
    #ifdef __CLIENT
           maxx = GetMapWidth(),
           maxy = GetMapHeight(),
    #endif
    cx, cy;

    for( uint i = 1; i <= dist; i++ )
    {
        x1 += uint16( dx );
        y1 += uint16( dy );
        cx = uint16( floor( x1 ) );
        cy = uint16( floor( y1 ) );
        if( cx >= maxx || cy >= maxy )
            return i - 1;
        #ifdef __SERVER
        if( context.Exec( map, cx, cy ) )
            return i;
        #endif
        #ifdef __CLIENT
        if( context.Exec( cx, cy ) )
            return i;
        #endif
    }
    return dist;
}
