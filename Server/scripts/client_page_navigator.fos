#ifndef __PAGENAVIGATOR__
#define __PAGENAVIGATOR__

// Группа элементов для организации многостраничного листания списков или гридов
// включает кнопки: вперед, назад, в начало, в конец.
// Отображает общее количество страниц и текущую страницу
// TODO: Заменить ручное указание строк на вывод из msg-файлов

#include "_client_defines.fos"
#include "client_gui_h.fos"
#include "_macros.fos"
#include "_colors.fos"
#include "client_rectangle_h.fos"

#define CMD_MOVE_PREV     ( 1 )
#define CMD_MOVE_FIRST    ( 2 )
#define CMD_MOVE_NEXT     ( 3 )
#define CMD_MOVE_LAST     ( 4 )

interface IPageNavigatorCallback {
    void OnPageChanged( int newPage );
    void GetPages( int& maxPages, int& currentPage );
}

class PageNavigator : IGUI::ElementCallbackInit
{
    Rectangle@              Bounds;
    int                     ButtonWidth;
    int                     PagesCount;        // Всего страниц
    int                     PageCurrent;       // Текущая страница
    PageNavigateButton@     BtnGoFirst;
    PageNavigateButton@     BtnGoLast;
    PageNavigateButton@     BtnGoNext;
    PageNavigateButton@     BtnGoPrev;
    IPageNavigatorCallback@ NavigatorCallback;
    PageNavigateLabel@      Label;

    PageNavigator( Rectangle & bounds, int btnWidth, int btnFont, int foreColor, int activeColor, int disColor )
    {
        PagesCount  = 1;
        PageCurrent = 1;
        @Bounds     = bounds;
        Rectangle@ rec = Bounds.Copy();
        rec.Width   = btnWidth;
        @BtnGoFirst = PageNavigateButton( rec.Copy(), this, CMD_MOVE_FIRST, btnFont, foreColor, activeColor, disColor, " << " );
        rec.Move( rec.Width, 0 );
        @BtnGoPrev  = PageNavigateButton( rec.Copy(), this, CMD_MOVE_PREV,  btnFont, foreColor, activeColor, disColor, " < " );
        rec.X = Bounds.X + Bounds.Width - rec.Width;
        @BtnGoLast  = PageNavigateButton( rec.Copy(), this, CMD_MOVE_LAST,  btnFont, foreColor, activeColor, disColor, " >> " );
        rec.Move( -rec.Width, 0 );
        @BtnGoNext  = PageNavigateButton( rec.Copy(), this, CMD_MOVE_NEXT,  btnFont, foreColor, activeColor, disColor, " > " );
        rec.X = Bounds.X + 2 * rec.Width;
        rec.Width = Bounds.Width - 4 * rec.Width;
        @Label      = PageNavigateLabel( rec.Copy(), "Page 1 of 1", btnFont, foreColor );
    }

    void Init( int screen )
    {
        if( valid( BtnGoFirst ) )
            BtnGoFirst.Init( screen );
        if( valid( BtnGoNext ) )
            BtnGoNext.Init( screen );
        if( valid( BtnGoLast ) )
            BtnGoLast.Init( screen );
        if( valid( BtnGoPrev ) )
            BtnGoPrev.Init( screen );
        if( valid( Label ) )
            Label.Init( screen );
        if( valid( NavigatorCallback ) )
        {
            NavigatorCallback.GetPages( PagesCount, PageCurrent );
        }
        GUI_AddScreenElement( screen, null, 0, 0 )
        .CallbackInit( this );

    }

    void OnInit()
    {
        PagesCount  = 1;
        PageCurrent = 1;
        Refresh();
    }

    void SetCallback( IPageNavigatorCallback& callback )
    {
        @NavigatorCallback = callback;
        NavigatorCallback.GetPages( PagesCount, PageCurrent );
    }

    void OnNavigateButtonClick( int cmdType )
    {

        switch( cmdType )
        {
        case CMD_MOVE_PREV:
            if( PageCurrent > 1 )
                PageCurrent--;
            else
                return;
            break;
        case CMD_MOVE_FIRST:
            if( PageCurrent > 1 )
                PageCurrent = 1;
            else
                return;
            break;
        case CMD_MOVE_NEXT:
            if( PageCurrent < PagesCount )
                PageCurrent++;
            else
                return;
            break;
        case CMD_MOVE_LAST:
            if( PageCurrent < PagesCount )
                PageCurrent = PagesCount;
            else
                return;
            break;
        default:
            return;
        }
        if( valid( NavigatorCallback ) )
        {
            NavigatorCallback.OnPageChanged( PageCurrent );
        }
    }

    void Refresh()
    {
        if( valid( NavigatorCallback ) )
        {
            // NavigatorCallback.OnPageChanged(PageCurrent);
            NavigatorCallback.GetPages( PagesCount, PageCurrent );
        }
        SetButtonsEnabled();
        SetLabelText();
    }

    void SetLabelText()
    {
        if( valid( Label ) )
            Label.ChangeText( PageCurrent, PagesCount );
    }

    void SetButtonsEnabled()
    {
        if( valid( BtnGoFirst ) )
            BtnGoFirst.ChangeEnabled( PageCurrent > 1 );
        if( valid( BtnGoPrev ) )
            BtnGoPrev.ChangeEnabled( PageCurrent > 1 );
        if( valid( BtnGoLast ) )
            BtnGoLast.ChangeEnabled( PageCurrent < PagesCount );
        if( valid( BtnGoNext ) )
            BtnGoNext.ChangeEnabled( PageCurrent < PagesCount );
    }

}

class PageNavigateLabel : IGUI::ElementCallbackInit
{
    Rectangle@      Bounds;
    IGUIElementOpt@ Options;
    string          DefaultText;
    int             Font;
    int             Color;

    PageNavigateLabel( Rectangle & bounds, string defaultText, int font, int color )
    {
        @Bounds = bounds;
        DefaultText = defaultText;
        Font = font;
        Color = color;
    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
        Options.Text( DefaultText, Font, Color, Color, FT_CENTERXY );
    }

    void Init( int screen )
    {
        GUI_AddScreenElement( screen, null, Bounds.X, Bounds.Y )
        .Position( Bounds.X, Bounds.Y, Bounds.Width, Bounds.Height )
        .CallbackInit( this )
        .Text( DefaultText, Font, Color, Color, FT_CENTERXY );
    }

    void ChangeText( int pageCurrent, int pageTotal )
    {
        if( valid( Options ) )
            Options.Text( "Page " + pageCurrent + " из " + pageTotal, Font, Color, Color, FT_CENTERXY );
    }
}

// TODO: заменить текстовые кнопки картинками
class PageNavigateButton : IGUI::ElementCallbackMouseClick, IGUI::ElementCallbackInit
{
    Rectangle@      Bounds;
    PageNavigator@  Navigator;
    IGUIElementOpt@ Options;
    int             CmdType;
    int             Font;
    int             ForeColor;
    int             ActiveColor;       // Цвет при нажатии на кнопку
    int             DisabledColor;     // Цвет недоступой кнопки
    bool            Enabled;
    string          Label;             // Ярлык на кнопке

    PageNavigateButton( Rectangle & bounds, PageNavigator & navigator, int cmdType, int font, int foreColor, int activeColor, int disabledColor, string label )
    {
        @Bounds = bounds;
        @Navigator = navigator;
        CmdType = cmdType;
        Font = font;
        ForeColor = foreColor;
        ActiveColor = activeColor;
        DisabledColor = disabledColor;
        Label = label;
        Enabled = false;
    }

    void OnMouseClick( int click )
    {
        if( click == MOUSE_CLICK_LEFT && valid( Navigator ) && Enabled )
        {
            Navigator.OnNavigateButtonClick( CmdType );
        }
    }

    void Init( int screen )
    {
        GUI_AddScreenElement( screen, null, Bounds.X, Bounds.Y )
        .Position( Bounds.X, Bounds.Y, Bounds.Width, Bounds.Height )
        .CallbackMouseClick( this )
        .Text( Label, Font, ( Enabled ? ForeColor : DisabledColor ), ( Enabled ? ActiveColor : DisabledColor ), FT_CENTERXY )
        .CallbackInit( this );
    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
        ChangeEnabled( Enabled );
    }

    void ChangeEnabled( bool enable )
    {
        Enabled = enable;
        if( valid( Options ) )
        {
            Options.Font( Font, ( enable ? ForeColor : DisabledColor ) );
            Options.Text( Label, Font, ( enable ? ForeColor : DisabledColor ), ( enable ? ActiveColor : DisabledColor ), FT_CENTERXY );
        }
    }



}

#endif // __PAGENAVIGATOR__
