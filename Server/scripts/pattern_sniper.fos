#include "pattern_common.fos"

/* Снайпер-сникер.
   ----------------------
   -  Стреляет всегда в глаза, если цель игрок и не в нокауте.
   -  После выстрела шкерится на большое расстояние и прячется в сник.
   -  Если здоровье ниже 50% и есть стимпаки - лечится перед уходом в сник.
   -  В режиме ожидания сидит в снике.
   -  Начинает огонь при попадании цели в эффективный радиус стрельбы.
   ----------------------
   Особенности, общие для снайперов всех уровней:
   -  Бесшумный бег
   -  Снайпер                   PE_SNIPER
   -                             PE_BETTER_CRITICALS
   -  Удача 10
                                                         PE_BONUS_RANGED_DAMAGE
   -- Обращение с оружием	     PE_WEAPON_HANDLING
   --                                                    PE_LIVING_ANATOMY
   ----------------------
   Параметры для ур 1.
   -  Легкое оружие 50..75
   -  Сник          50..75
   -  Восприятие    7
   -  Резисты       35..50
   -  АР            10
   -  HP            100
   ----------------------
 */
const int[] sniperStats_ =
{
// Level SGMin SGMax SnMin SnMax PE ResMin ResMax AP  HPMin
    1,    160,  190,  250,   300, 9, 25,    30,    15, 170,
    2,    180,  215,  280,   300, 11, 35,    50,    18, 220,
    3,    220,  250,  290,   300, 13, 45,    60,    22, 280,
    4,    260,  300,  300,   300, 15, 55,    70,   28, 400
};
#define S_COUNT              ( 4 )
#define S_POS                # (pos) ( ( ( pos < S_COUNT ) ? pos : 0 ) * 10 )
#define S_LEVEL              # (pos) ( sniperStats_[ S_POS( pos ) ] )
#define S_SMALL_GUNS         # (pos) ( Random( sniperStats_[ S_POS( pos ) + 1 ], sniperStats_[ S_POS( pos ) + 2 ] ) )
#define S_SNEAK              # (pos) ( Random( sniperStats_[ S_POS( pos ) + 3 ], sniperStats_[ S_POS( pos ) + 4 ] ) )
#define S_PERCEPTION         # (pos) ( sniperStats_[ S_POS( pos ) + 5 ] )
#define S_RESIST             # (pos) ( Random( sniperStats_[ S_POS( pos ) + 6 ], sniperStats_[ S_POS( pos ) + 7 ] ) )
#define S_AP                 # (pos) ( sniperStats_[ S_POS( pos ) + 8 ] )
#define S_HP                 # (pos) ( sniperStats_[ S_POS( pos ) + 9 ] )

#define ENEMY_SRCH_RADIUS    ( 45 )
#define RUN_AWAY_DISTANCE    ( 25 )
#define ATTACK_DISTANCE      ( 45 )

#define PLANE_ID_RUNAWAY     ( 76 )
#define RUNAWAY_PRIORITY     ( AI_PLANE_ATTACK_PRIORITY * 2 )

class SniperPattern : CommonPattern
{
    // получение сообщений
    void _Message( Critter& sniper, Critter& fromCr, int message, int value )
    {
        if( message == MSG_ATTACK_TARGET )
        {
            if( sniper.IsCurPlane( AI_PLANE_ATTACK ) )
                return;
            if( sniper.Stat[ ST_TEAM_ID ] != fromCr.Stat[ ST_TEAM_ID ] )
                return;
            if( !this._MsgReact( sniper, fromCr, message ) )
                return;

            Critter @target = GetCritter( value );
            if( valid( target ) )
            {
                this.AttackPlayer( sniper, target );
            }
            return;
        }
        if( message == MSG_PLAYER_MUST_DIE )
        {
            Critter @target = GetCritter( value );
            if( valid( target ) )
            {
                this.AttackPlayer( sniper, target );
            }
            return;
        }
    }

    // Атака снайпера
    bool _Attack( Critter& cr, Critter& target )
    {
        if( target.IsNpc() )
            return false;
        if( target.IsKnockout() )
            return false;
        cr.SendMessage( MSG_ATTACK_TARGET, target.Id, MESSAGE_TO_I_SEE );

        // В активном слоте - оружие?
        uint8 mode = 0;
        ProtoItem @ weapon = cr.GetSlotProto( SLOT_HAND1, mode );
        if( !valid( weapon ) )
            return false;
        if( weapon.Type != ITEM_TYPE_WEAPON || _WeaponSkill( weapon, _WeaponModeUse( mode ) ) != SK_SMALL_GUNS )
            return false;

        Item @ weap = _CritGetItemHand( cr );
        if( !valid( weap ) )
            return false;

        ProtoItem @ ammo = GetProtoItem( weap.AmmoPid );
        if( !valid( ammo ) )
            return false;


        // Скопировано из основного обработчика
        cr.TimeoutBase[ TO_AGGRESSOR ] = __FullSecond + REAL_MINUTE( 1 );
        CombatAttack( cr, target, weapon, _WeaponModeMake( 0, HIT_LOCATION_EYES ), ammo );
        this._SetOnAfterAttackEvent( cr, target );
        return true;
    }

    // Снайпер убегает, если осталось мало АП
    void _SetOnAfterAttackEvent( Critter& sniper, Critter& target )
    {
        if( target.IsNpc() )
            return;
        uint[] values = { sniper.Id, target.Id };
        CreateTimeEvent( __FullSecond + 60, "pattern_sniper@e_OnAfterAttack", values, false );

    }

    // Выбор плана отступления
    void TryRunAway( Critter& sniper )
    {
        uint16 x = sniper.HexX;
        uint16 y = sniper.HexY;
        uint8  dir = sniper.Dir;
        if( !_GetRunAwayPoint( sniper, x, y, dir ) )
            return;
        AddWalkPlane( sniper, RUNAWAY_PRIORITY, PLANE_ID_RUNAWAY, 0, x, y, dir, true, 0 );
    }

    // Простой снайпера
    void _Idle( Critter& sniper )
    {
        // DL("snmiper isle/Sneak lvk="+sniper.Skill[SK_SNEAK]);
        if( sniper.IsDead() )
            return;
        if( sniper.Mode[ MODE_HIDE ] == 0 && sniper.IsLife() )
        {
            sniper.ModeBase[ MODE_HIDE ] = 1;
        }
        Critter @[] players;
        if( sniper.GetCritters( false, FIND_LIFE | FIND_ONLY_PLAYERS, players ) > 0 )
        {
            uint[] distances( players.length() );
            for( uint i = 0, iMax = players.length(); i < iMax; i++ )
            {
                distances[ i ] = GetCrittersDistantion( sniper, players[ i ] );
                this.AttackPlayer( sniper, players[ i ] );
            }
            uint minInd = 0;
            if( _GetFirstMinIndex( distances, minInd ) )
            {
                EraseAttackPlane( sniper, players[ minInd ] );

                this.AttackPlayer( sniper, AI_PLANE_ATTACK_PRIORITY + 10, players[ minInd ] );
            }
        }

    }

    // Завершение выполнения плана
    int _PlaneEnd( Critter& sniper, NpcPlane& plane, int reason, Critter@ someCr, Item@ someItem )
    {
        if( plane.Identifier == PLANE_ID_RUNAWAY )
        {
            if( reason == REASON_SUCCESS )
            {
                this.HideSniper( sniper );
                sniper.StatBase[ ST_VAR7 ] = 0;             // Счетчик попыток добежать
            }
            else
            {
                sniper.StatBase[ ST_VAR7 ]++;

                if( sniper.StatBase[ ST_VAR7 ] < 9 && sniper.StatBase[ ST_VAR7 ] > 6 )
                {
                    TryRunAway( sniper );
                }
                if( sniper.StatBase[ ST_VAR7 ] < 7 )          // Не получилось добежать, пытаемся куданибудь рzдом
                {
                    Map @ map = sniper.GetMap();
                    if( valid( map ) )
                    {
                        if( GetFreeHex( map, 4, plane.Walk_HexX, plane.Walk_HexY ) )
                        {
                            return PLANE_DISCARD;
                        }

                    }
                }
            }
        }
        return PLANE_RUN_GLOBAL;
    }

    // Вспомогательная функция - стелс для снайпера
    void HideSniper( Critter& sniper )
    {
        sniper.ModeBase[ MODE_HIDE ] = 1;
        _NpcEraseAllPlanesAttack( sniper );
    }

    void SetEvents( Critter& cr )
    {
        cr.SetEvent( CRITTER_EVENT_ATTACK, "_SniperAttack" );
        cr.SetEvent( CRITTER_EVENT_PLANE_END, "_SniperPlaneEnd" );
        cr.SetEvent( CRITTER_EVENT_PLANE_BEGIN, "_SniperPlaneBegin" );
        cr.SetEvent( CRITTER_EVENT_IDLE, "_SniperIdle" );
        cr.SetEvent( CRITTER_EVENT_MESSAGE, "_SniperMessage" );
        cr.SetEvent( CRITTER_EVENT_SHOW_CRITTER, "_SniperShowCritter" );
        cr.SetEvent( CRITTER_EVENT_ATTACKED, "_SniperAttacked" );
        cr.SetEvent( CRITTER_EVENT_DEAD, "_SniperDead" );
    }

    bool _HaveToRun( Critter& sniper, Critter& player )
    {

        // Игрок жив, ранен, осталось мало здоровья или хватает АП на выстрел
        if( player.IsLife() && !player.IsKnockout() )
        {
            uint8 mode = 8;
            const ProtoItem @ weapon = sniper.GetSlotProto( SLOT_HAND1, mode );
            if( valid( weapon ) )
            {
                if( weapon.Type == ITEM_TYPE_WEAPON )
                {
                    if( player.Stat[ ST_CURRENT_HP ] > 30 &&
                        sniper.Stat[ ST_CURRENT_AP ] < int( _WeaponApCost( weapon, _WeaponModeUse( mode ) ) ) &&
                        player.Stat[ ST_MAX_LIFE ] > player.Stat[ ST_CURRENT_HP ] )
                    {
                        return true;
                    }
                    else
                    {
                        if( sniper.Stat[ ST_CURRENT_HP ] > 30 &&
                            sniper.Stat[ ST_MAX_LIFE ] > sniper.Stat[ ST_CURRENT_HP ] )
                        {
                            return true;                                     // У самого нпц со здоровьем плохо
                        }
                        else
                        {
                            return false;                                    // Надо добивать
                        }

                    }
                }
            }

        }
        // Видит ли снайпер игроков
        if( sniper.GetCritters( false, FIND_LIFE | FIND_ONLY_PLAYERS, null ) > 0 )
            return true;
        // Всть игроки в радиусе поиска
        Map @map = sniper.GetMap();
        if( !valid( map ) )
            return false;

        return map.GetCrittersHex( sniper.HexX, sniper.HexY, ENEMY_SRCH_RADIUS, FIND_LIFE | FIND_ONLY_PLAYERS, null ) > 0;
    }
    // end class
}

#ifndef _NoBaseInstance
SniperPattern pattern; // Для наследников нужно определить _NoBaseInstance
#endif

// Установка параметров криттера
// lvl - уровень крутости от 0 до 4
void SetSniperStats( Critter& cr, uint8 lvl )
{
    lvl = CLAMP( lvl, 0, S_COUNT - 1 );
    if( lvl < 1 )
        return;
    if( lvl > 2 )
        cr.PerkBase[ PE_SNIPER ] = 1;
    cr.PerkBase[ PE_SHARPSHOOTER ] = 1;
    if( lvl > 2 )
        cr.PerkBase[ PE_BETTER_CRITICALS ] = 1;
    cr.PerkBase[ PE_BONUS_RANGED_DAMAGE ] = lvl;
    cr.PerkBase[ PE_WEAPON_HANDLING ] = 1;
    cr.PerkBase[ PE_LIVING_ANATOMY ] = 1;
    if( lvl > 3 )
        cr.PerkBase[ PE_BONUS_RATE_OF_FIRE ] = 1;
    cr.PerkBase[ PE_SILENT_RUNNING ] = 1;

    cr.StatBase[ ST_LUCK ] = 10;
    cr.StatBase[ ST_PERCEPTION ] = S_PERCEPTION( lvl );
    cr.StatBase[ ST_MAX_LIFE ] = S_HP( lvl );
    cr.StatBase[ ST_ACTION_POINTS ] = S_AP( lvl );
    cr.StatBase[ ST_CURRENT_HP ] = S_HP( lvl );

    cr.StatBase[ ST_CRITICAL_RESISTANCE ] = CLAMP( lvl * Random( 8, 15 ), 30, 75 );

    for( int i = ST_NORMAL_RESIST; i <= ST_POISON_RESISTANCE; i++ )
    {
        if( i != ST_EMP_RESIST )
        {
            cr.StatBase[ i ] = S_RESIST( lvl );
        }
    }

    cr.SkillBase[ SK_SMALL_GUNS ] = S_SMALL_GUNS( lvl );
    cr.SkillBase[ SK_SNEAK ] = S_SNEAK( lvl );
}

void _SniperInit( Critter& cr, bool firstTime )
{
    _CritterInit( cr, firstTime );
}

void _SniperDead( Critter& cr, Critter@ killer )
{
    pattern._Dead( cr, killer );
}

void _SniperShowCritter( Critter& cr, Critter& showCrit )
{
    pattern._ShowCritter( cr, showCrit );
}

// Cнайпер начал некий план
int _SniperPlaneBegin( Critter& cr, NpcPlane& plane, int reason, Critter@ someCr, Item@ someItem )
{
    return pattern._PlaneBegin( cr, plane, reason, someCr, someItem );
}

// Снайпер получил сообщение
void _SniperMessage( Critter& sniper, Critter& fromCr, int message, int value )
{
    pattern._Message( sniper, fromCr, message, value );
}

// Снайпер атакован
bool _SniperAttacked( Critter& sniper, Critter& attacker )
{
    return pattern._Attacked( sniper, attacker );
}

// Атака снайпера
bool _SniperAttack( Critter& cr, Critter& target )
{
    return pattern._Attack( cr, target );
}

// Простой снайпера
void _SniperIdle( Critter& sniper )
{
    pattern._Idle( sniper );
}

// Завершение выполнения плана
int _SniperPlaneEnd( Critter& sniper, NpcPlane& plane, int reason, Critter@ someCr, Item@ someItem )
{
    return pattern._PlaneEnd( sniper, plane, reason, someCr, someItem );
}

// Через 1 игровую минуту после выстрела Снайпер будет пытаться уйти из зоны видимости
uint e_OnAfterAttack( uint[] @ values )
{
    // DL("On after attack");
    if( !valid( values ) )
        return 0;
    if( values.length() < 2 )
        return 0;

    Critter @ sniper = GetCritter( values[ 0 ] );
    Critter @ target = GetCritter( values[ 1 ] );
    if( !valid( sniper ) || !valid( target ) )
        return 0;

    bool run = pattern._HaveToRun( sniper, target );
    // DL("Run "+(run?"is":"not") + " needed. Cur AP "+sniper.Stat[ST_CURRENT_AP]);
    if( run )
    {
        pattern.TryRunAway( sniper );

    }

    return 0;
}

bool _GetRunAwayPoint( Critter& sniper, uint16& x, uint16& y, uint8& dir )
{
    // 1. поиск игроков во всех направлениях
    Map @map = sniper.GetMap();
    if( !valid( map ) )
        return false;
    uint[] enemies( 6 );
    for( uint i = 0, iMax = enemies.length(); i < iMax; i++ )
    {
        x = sniper.HexX;
        y = sniper.HexY;
        map.MoveHexByDir( x, y, i, RUN_AWAY_DISTANCE );
        enemies[ i ] = map.GetCrittersPath( sniper.HexX, sniper.HexY, x, y, 30, RUN_AWAY_DISTANCE, FIND_LIFE | FIND_ONLY_PLAYERS, null );
    }

    uint min = 0;
    uint max = 0;
    if( !_GetLimits( enemies, min, max ) )
        return false;
    // Проверяем, что не вылезем за границы карты
    // копируем направления с минимальным числом врагов в новый массив
    uint[] safeDirs;
    for( uint check_dir = 0, dirMax = enemies.length(); check_dir < dirMax && check_dir < 6; check_dir++ )
    {
        if( enemies[ check_dir ] == min )
        {
            safeDirs.insertLast( check_dir );
        }
    }
    uint[] distances( safeDirs.length() );
    for( uint i = 0, iMax = safeDirs.length(); i < iMax; i++ )
    {

        x = sniper.HexX;
        y = sniper.HexY;
        map.MoveHexByDir( x, y, safeDirs[ i ], RUN_AWAY_DISTANCE );
        distances[ i ] = GetDistantion( sniper.HexX, sniper.HexY, x, y );
    }
    if( !_GetRandomMaxIndex( distances, max ) )
        return false;

    x = sniper.HexX;
    y = sniper.HexY;
    map.MoveHexByDir( x, y, safeDirs[ max ], RUN_AWAY_DISTANCE );
    dir = GetDirection( x, y, sniper.HexX, sniper.HexY );

    return GetFreeHex( map, 4, x, y );
}

/* ************************************************* DEBUG ************************************************* */
void testSniper( Critter& cr, int lvl, int team, int bag )
{
    int[] params = { ST_BAG_ID, bag, ST_TEAM_ID, team };
    Critter @ npc = cr.GetMap().AddNpc( 222, cr.HexX - 5, cr.HexY - 5, 0, params, null, null );
    SetSniperStats( npc, lvl );
    pattern.SetEvents( npc );
}
// ~run pattern_sniper test 0 0 0
// ~run test SetStat 1 7 1000
// ~run test SetStat 1 72 1000
void dmg( Critter& cr, int lvl, int team, int )
{
    for( uint i = DAMAGE_BEGIN; i <= DAMAGE_END; i++ )
    {
        cr.DamageBase[ i ] = 0;
    }
}
