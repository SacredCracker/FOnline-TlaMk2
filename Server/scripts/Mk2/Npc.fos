// FOS Server

class NpcDescriptor : Critter::CritterDescriptor, Mk2::NpcPacket, Dialog::Interlocutor
{
	NpcDescriptor()
	{
		PlaneRun_IsRun = false;
		PlaneRun_LastHexCheck.Set( 0,0 );
		
		LastDir = 0;
		
		@EventsNpcPlaneRun = @::array<Mk2::FuncdefEventNpcPlaneRun@>();
		@EventsNpcPlaneBegin = @::array<Mk2::FuncdefEventNpcPlaneBegin@>();
		@EventsNpcPlaneEnd = @::array<Mk2::FuncdefEventNpcPlaneEnd@>();
	}

	::Item@ FindBestWeapon( ::Critter& target )
	{
		// Предполагаемый урон		Предполагаемый шанс попасть		Количество попаданий на убийство
		float damage = 0, 			hitValue = 0, 				countHitToDead = -1;
		const int lifeTarget = target.Stat[ST_CURRENT_HP];
		
		// countHitToDead * ( hitValue * 0.1 ) - приоритет итема
		::Item@[] items;
        const uint count = RealCr.GetItemsByType( ITEM_TYPE_WEAPON, items );
        for( uint i = 0; i < count; i++ )
        {
			//damage = 
        }
		return null;
	}
	
	const uint get_MasterId( ) override
	{
		return uint(RealCr.MercBase[ MERC_MASTER_ID ]); 
	}
	
	bool CritterInit( ::Critter& npc, bool firstTime ) override
	{
		LastDir = npc.Dir;
		DamageHp = 0;
		
		return CritterDescriptor::CritterInit( npc, firstTime );
	}
	
	Ai::Attitude@ GetAttitude( Ai::aiobject@ otherObj, Ai::Situation@ situation ) override
	{
		Mk2::Descriptor@ engineDescriptor = cast<Mk2::Descriptor>(@otherObj);
		if( cast<Ai::CombatSituation>(@situation) !is null )
		{
			if( @engineDescriptor !is null )
			{
				if( RealCr.Id == otherObj.MasterId )
				{
					return Ai::AttitudeMaster();
				}
			}
		}
		return null;
	}
	
	bool CritterFinish( ::Critter& npc, bool toDelete ) override
	{		
		if(!CritterDescriptor::CritterFinish( npc, toDelete ))
			return false;
			
		npc.DropPlanes();
		return true;
	}
	
	::string@ get_Name( ) override
	{
		return "NpcDescriptor";
	}
	
	bool CritterDead( ::Critter@ npc, ::Critter@ killer ) override
	{
		if( !CritterDescriptor::CritterDead( @npc, @killer ) )
			return false;
			
		// ST_KILL_EXPERIENCE
		int allExp = npc.Stat[ST_KILL_EXPERIENCE], expDamage =  ExpDamage, exp = 0;
		for(uint i=0, iMax=CrittersToDamage.length(); i<iMax; i++)
		{
			::Critter@ player=::GetCritter(CrittersToDamage[i].A);
			
			if(validEngineObject(player))
			{
				exp = CrittersToDamage[i].B * expDamage;
				if( exp > allExp )
					exp = allExp;
				player.StatBase[ST_EXPERIENCE] += exp;
				allExp-=exp;
			}
		}
		
		if( validEngineObject( killer ) )
		{
			killer.StatBase[ST_EXPERIENCE] += allExp;
		}
		
		CrittersToDamage.resize(0);
		DamageHp = 0;
		return true;
	}
	
	bool CritterIdle( ::Critter& npc ) override
	{
		if(  !CritterDescriptor::CritterIdle( npc ) )
				return false;
		
		if( npc.Cond == COND_LIFE && _CritIsInjured(npc) && npc.Stat[ ST_CURRENT_HP ] < npc.Stat[ ST_MAX_LIFE ] && IsHumanoid(npc) )
		{
			::array<::NpcPlane@> planes;
			uint countPlane = npc.GetPlanes( planes );
			for( uint i = 0; i<countPlane; i++)
			{
				if(valid(planes[i]) && planes[i].Type==AI_PLANE_WALK && planes[i].Walk_TypeWalkReason == AI_PLANE_WALK_HEAL && planes[i].Walk_Reason_CritterId == npc.Id )
					return true;
			}
			
			::NpcPlane@ plane=::CreatePlane();
			plane.Type=AI_PLANE_WALK;
			plane.Priority=0;
			plane.Identifier=0;
			plane.IdentifierExt=0;
			plane.Walk_HexX=npc.HexX;
			plane.Walk_HexY=npc.HexY;
			plane.Walk_Cut=1;
			plane.Walk_Dir=npc.Dir;
			plane.Walk_Reason_CritterId = npc.Id;
			plane.Walk_TypeWalkReason = AI_PLANE_WALK_HEAL;
			npc.AddPlane(plane);
		}
		return true;
	}
	
	void TakeDamage( Mk2::CombatProccessPacket@ combatpacket, int reason, int& totalDmg ) override
	{
		::CombatProccess@ combatData = cast<::CombatProccess@>(@combatpacket);
		if( @combatData is null )
		{
			Log( "Error cast combatpacket" );
			return;
		}
		int lastHp = RealCr.Stat[ST_CURRENT_HP];
		CritterDescriptor::TakeDamage( @combatData, reason, totalDmg );
		
		if( reason == 1 ) 
		{
			int damage = lastHp - RealCr.Stat[ST_CURRENT_HP];
			
			if( validEngineObject( combatData.Attacker ) && !RealCr.IsDead() )
			{
				if( damage > lastHp )
					damage = lastHp;
				if( DamageHp <= MaxHp )
				{
					DamageHp += damage;
					CrittersToDamage.insertLast( Npc::DoubleUint( combatData.Attacker.Id, damage ) );
				}
			}
			
			if( IsHumanoid(RealCr))
			{
				if( combatData.Aim == HIT_LOCATION_EYES && validEngineObject(combatData.Attacker) && RealCr.IsLife() ) // Стреляют по глазам
				{
					RealCr.SetDir(combatData.Attacker.Dir);
					LastDir = RealCr.Dir;
				}
					
				if( combatData.IsCritical ) // крит
				{					
					if(RealCr.CountItem(Content::Item::MUTIE)>0)
					{
						int countDrugs = RealCr.Stat[ST_COUNT_DRUGS]+RealCr.Stat[ST_COUNT_DRUGS_EXT];
						if ( countDrugs<=RealCr.Trait[TRAIT_CHEM_RESISTANT]+1 )
						{
							::NpcPlane@ child=::CreatePlane();
							child.Type=AI_PLANE_WALK;
							child.Priority=AI_PLANE_HEAL_PRIORITY*2;
							child.Identifier=0;
							child.IdentifierExt=0;
							child.Walk_HexX=RealCr.HexX;
							child.Walk_HexY=RealCr.HexY;
							child.Run=false;
							child.Walk_Var0 = Content::Item::MUTIE;
							child.Walk_Cut=0;
							child.Walk_Dir=LastDir;
							child.Walk_Reason_CritterId = RealCr.Id;
							child.Walk_TypeWalkReason = AI_PLANE_WALK_HEAL;
							::NpcPlane@ curPlan = RealCr.GetCurPlane(); 
							if( valid(curPlan))
								curPlan.SetChild(child);
							else
								RealCr.AddPlane(child);
						}
					}
				}
				
				if( combatData.Damage[DAMAGE_NORMAL] >= (RealCr.Stat[ST_CURRENT_HP] * 0.15) )
				{
					if(RealCr.CountItem(Content::Item::PSYCHO)>0)
					{
						int countDrugs = RealCr.Stat[ST_COUNT_DRUGS]+RealCr.Stat[ST_COUNT_DRUGS_EXT];
						if ( countDrugs<=RealCr.Trait[TRAIT_CHEM_RESISTANT]+1 )
						{
							::NpcPlane@ child=::CreatePlane();
							child.Type=AI_PLANE_WALK;
							child.Priority=AI_PLANE_HEAL_PRIORITY*2;
							child.Identifier=0;
							child.IdentifierExt=0;
							child.Walk_HexX=RealCr.HexX;
							child.Walk_HexY=RealCr.HexY;
							child.Run=false;
							child.Walk_Var0 = Content::Item::PSYCHO;
							child.Walk_Cut=0;
							child.Walk_Dir=LastDir;
							child.Walk_Reason_CritterId = RealCr.Id;
							child.Walk_TypeWalkReason = AI_PLANE_WALK_HEAL;
							::NpcPlane@ curPlan = RealCr.GetCurPlane(); 
							if( valid(curPlan))
								curPlan.SetChild(child);
							else
								RealCr.AddPlane(child);
						}
					}
				}
			}
		}
		
		if(validEngineObject( combatData.Attacker ))
		{
			if( !RealCr.IsDead() )
			{
				::NpcPlane@ curPlane = RealCr.GetCurPlane();
				uint r0 = combatData.Attacker.Id;
				uint r1 = totalDmg;
				uint r2 = 0;
				if( valid(curPlane) && ::__EventNpcPlaneRun.Raise( RealCr, curPlane, REASON_ATTACK_IM_DAMAGE, r0, r1, r2) )
				{
					::array<::NpcPlane@> planes;
					uint count=RealCr.GetPlanes(planes);
					for(uint i=0; i<count; i++)
					{
						if( @curPlane == @planes[i] )
						{
							RealCr.ErasePlane(i);
							RealCr.AddPlane(curPlane);
							break;
						}
					}
				}
				else if(!valid(curPlane))
					RefreshPriorPlaneAttack( curPlane, combatData.Attacker);
			}
		}
	}
	
	bool IsSet( Mk2::Descriptor@ new ) override
	{
		if ( CritterDescriptor::IsSet( @new ) )
		{
			Npc::NpcDescriptor@ newNpc = cast<Npc::NpcDescriptor>(@new);
            if(@newNpc !is null)
			{
				@newNpc.EventsNpcPlaneRun = @EventsNpcPlaneRun;
				@newNpc.EventsNpcPlaneBegin = @EventsNpcPlaneBegin;
				@newNpc.EventsNpcPlaneEnd = @EventsNpcPlaneEnd;
			}
			return true;
		}
		return false;
	}
	
	uint value_LastTickPlaneTarget = 0;
		
	bool get_LastTickPlaneTarget(uint idx)
	{
		if( (::GetTick() - ( value_LastTickPlaneTarget ) > idx ) || ::GetTick() < value_LastTickPlaneTarget )
		{
			value_LastTickPlaneTarget = ::GetTick();
			return true;
		}	
		return false;
	}
		
	bool RefreshPriorPlaneAttack( ::NpcPlane@ plane, ::Critter@ target )
	{
		if( !LastTickPlaneTarget[(16 - RealCr.Stat[ST_INTELLECT]) * 20] || !validEngineObject(target) || !validEngineObject(target.GetMap()) || !validEngineObject(RealCr.GetMap()) || target.GetMap().Id!= RealCr.GetMap().Id )
			return false;

		Npc::TargetAttackPriority prior(RealCr);
			
		if(!valid(plane))
			@plane = RealCr.GetCurPlane();
								
		::array<::NpcPlane@> planes;
		::NpcPlane@ priorAttack = plane;
							
		bool changePrior = false;
								
		int Value0 = prior.Get(RealCr,target), Value1 = 0;//( totalDmg > hp )?1:(hp/totalDmg + ((hp%totalDmg==0)?0:1));
			
		uint forEnd = RealCr.GetPlanes( planes );
				
		for( uint i = 0; i<forEnd; i++)
		{
			if(valid(planes[i]) && planes[i].Type==AI_PLANE_ATTACK )
			{
				::Critter@ targeti = ::GetCritter(planes[i].Attack_TargId);
				if(!validEngineObject(targeti) || !validEngineObject(targeti.GetMap()) || targeti.GetMap().Id!= RealCr.GetMap().Id || !RealCr.IsSee (targeti)) continue;
					
				Value1 = prior.Get(RealCr,targeti);
					
				if( prior.isRadiusDamage && prior.RadiusDamage > 0 )			
				{
					if( Value0 < Value1 )
					{
						Value0 = Value1;
						@ priorAttack = planes[i];
						@ target = targeti;
						changePrior = true;
					}
				}
				else
				{				
					if(Value1 != 0 && (Value0 > Value1 || Value0==0))
					{
						Value0 = Value1;
						@ priorAttack = planes[i];
						@ target = targeti;
						changePrior = true;
					}
				}
			}
		}
		
		::array<::Critter@> critters;
		forEnd = RealCr.GetCritters (false, FIND_LIFE_AND_KO, critters);

		for( uint i = 0; i<forEnd; i++)
		{
			::Critter@ targeti = critters[i];
			if(!validEngineObject(targeti) || !validEngineObject(targeti.GetMap()) || targeti.GetMap().Id!= RealCr.GetMap().Id || !RealCr.IsSee (targeti)) continue;				
			
			if( RealCr.EventUseSkill ( SKILL_CHECK_ENEMY, targeti, null, null) )
			{
				Value1 = prior.Get(RealCr,targeti);
					
				if( prior.isRadiusDamage && prior.RadiusDamage > 0 )			
				{
					if( Value0 < Value1 )
					{
						Value0 = Value1;
						::NpcPlane@ newPlane = ::CreatePlane( );
						newPlane.Type = AI_PLANE_ATTACK;
						newPlane.Priority = AI_PLANE_ATTACK_PRIORITY;
						newPlane.Attack_TargId = targeti.Id;
						newPlane.Attack_MinHp = ::__DeadHitPoints;
						newPlane.Attack_IsGag = false;
						newPlane.Attack_GagHexX = 0;
						newPlane.Attack_GagHexY = 0;
						newPlane.Attack_LastHexY = targeti.HexY;
						newPlane.Attack_LastHexX = targeti.HexX;
						newPlane.Run = false;
						
						@ priorAttack = newPlane;
						@ target = targeti;
						changePrior = true;
					}
				}
				else
				{				
					if(Value0 > Value1 || Value0==0)
					{
						Value0 = Value1;
						::NpcPlane@ newPlane = ::CreatePlane( );
						newPlane.Type = AI_PLANE_ATTACK;
						newPlane.Priority = AI_PLANE_ATTACK_PRIORITY;
						newPlane.Attack_TargId = targeti.Id;
						newPlane.Attack_MinHp = ::__DeadHitPoints;
						newPlane.Attack_IsGag = false;
						newPlane.Attack_GagHexX = 0;
						newPlane.Attack_GagHexY = 0;
						newPlane.Attack_LastHexY = targeti.HexY;
						newPlane.Attack_LastHexX = targeti.HexX;
						newPlane.Run = false;
						
						@ priorAttack = newPlane;
						@ target = targeti;
						changePrior = true;
					}
				}
			}
		}
		
		if(valid(priorAttack) && changePrior)
		{
			if(valid(plane) )
			{		
				plane.GetChild(0);
				if(plane.GetChildIndex(priorAttack) != 0)
					return false;			
				plane.SetChild(priorAttack);
			}
			else
				@plane = priorAttack;
		}
		value_LastTickPlaneTarget = ::GetTick();
		return changePrior;
	}

	bool NpcPlaneEnd(::Critter& npc, ::NpcPlane& plane, int reason, ::Critter@ someCr, ::Item@ someItem)
	{
		for( uint i = 0, iEnd = EventsNpcPlaneEnd.length(); i < iEnd; i++ )
		{
			if( !EventsNpcPlaneEnd[i]( npc, plane, reason, someCr, someItem ) )
				return false;
		}
		
		bool retValue = MainPlane_NpcPlaneEnd(npc,plane,reason,someCr,someItem);
		if(retValue)
		{
			
			/*
				Убираем план из менеджера, и получаем самый подходящий.
			*/
		}
		return retValue;
	}
		
	bool NpcPlaneBegin(::Critter& npc, ::NpcPlane& plane, int reason, ::Critter@ someCr, ::Item@ someItem)
	{
		int teamId = npc.Stat[ST_TEAM_ID];
		//npc.Say( SAY_NORM_ON_HEAD, "teamId " + teamId );
		if( teamId != 0 )
		{
			if( someCr !is null )
			{
				if( teamId == someCr.Stat[ST_TEAM_ID] )
				{
					//npc.Say( SAY_NORM_ON_HEAD, "block attack" );
					Log( "Error: " + npc.Id + " block teammate attack" );
					return false;
				}
			}
		}
	
		for( uint i = 0, iEnd = EventsNpcPlaneBegin.length(); i < iEnd; i++ )
		{
			if( !EventsNpcPlaneBegin[i]( npc, plane, reason, someCr, someItem ) )
				return false;
		}

		bool retValue = MainPlane_NpcPlaneBegin(npc,plane,reason,someCr,someItem);
		if(retValue)
		{
			/*
				Добавляем план в менеджер, менеджер должен обработать его, и вернуть если он подходит для текущей ситуации. Если он подходит для ситуации, но есть более лучший план, то он сохранит его на потом.
			*/
		}
		return retValue;
	}

	bool NpcPlaneRun(::Critter& npc, ::NpcPlane& plane, int reason, uint& r0, uint& r1, uint& r2)
	{
		for( uint i = 0, iEnd = EventsNpcPlaneRun.length(); i < iEnd; i++ )
			if( !EventsNpcPlaneRun[i]( npc, plane, reason, r0, r1, r2 ) )
				return false;

		::Critter@ target=::GetCritter( r0 );
		if ( not validEngineObject( target ) ) 
			return MainPlane_NpcPlaneRun( npc, plane, reason, r0, r1, r2 );	
		RefreshPriorPlaneAttack( plane, target);
		
		if(plane.Type==AI_PLANE_ATTACK)
		{
			uint8 mode=0;
			uint RadiusDamage = 0;
			int use=0;
			uint wpnDist=1;
			const ::ProtoItem@ weapon=npc.GetSlotProto(SLOT_HAND1,mode);
			if(valid(weapon))
			{
				RadiusDamage = 0;
				use=_WeaponModeUse(mode);
				wpnDist=_WeaponMaxDist(weapon,use);
				RadiusDamage = weapon.HexWeapon_Radius;
			}
			
			uint visibleDist = npc.Stat[ST_VISIBLE_DIST];
			if(visibleDist<wpnDist)
				wpnDist = visibleDist;
			const ::ProtoItem@ ammo=(valid(weapon) && weapon.Weapon_MaxAmmoCount>0 && weapon.Weapon_Caliber!=0?::GetProtoItem(_CritGetItemHand(npc).AmmoPid):null);

			bool isRadiusDamage = RadiusDamage != 0;
				
			uint8 targetMode=0;
			const ::ProtoItem@ targetWeapon=target.GetSlotProto(SLOT_HAND1,targetMode);
			int targetUse=0;
			uint targetWpnDist=1;
			if(valid(targetWeapon))
			{
				targetUse=_WeaponModeUse(targetMode);
				targetWpnDist=_WeaponMaxDist(targetWeapon,targetUse);
			}
			if( reason == REASON_ATTACK_USE_AIM ) // Тут мы уже атакуем
			{
				uint distantion=::GetCrittersDistantion( npc, target );
					
				// Трассировка проемов и дверей, не зачем туда идти если мы не одни.
				::Map@ map = npc.GetMap();
				if( not PlaneRun_LastHexCheck.IsDouble( npc.HexX, npc.HexY ) )
				{
					PlaneRun_LastHexCheck.Set( npc.HexX, npc.HexY );
					
					{
						uint16 moveX = target.HexX, moveY = target.HexY; 
					
						uint8 MyDir = npc.Dir, targetDir = target.Dir, attackDir = ::GetDirection ( npc.HexX, npc.HexY, target.HexX, target.HexY ),
								attackedDir = ::GetDirection ( target.HexX, target.HexY, npc.HexX, npc.HexY );
						
						// Зажаты ли мы ( разница между направлениями должна быть в 3 поворота ) 
						bool isGrip = false;
						
						::array<uint8> DirBussy;
						
						for( uint j = 0, jMax = 6; j < jMax; j++)
						{
							moveX = npc.HexX; moveY = npc.HexY;
							map.MoveHexByDir (moveX, moveY, j , 1);
							if( not map.IsHexPassed(moveX, moveY) ) // Гекс не простреливается
							{
								DirBussy.insertLast( j );
							}
						}	
						
						for( uint d = 0, dMax = DirBussy.length(); d < dMax; d++)
						{
							for( uint j = 0; j < dMax; j++)
								if( (DirBussy[d] + 6 - DirBussy[j]) % 6 == 3  )
								{
									isGrip = true;
									break;
								}
								
							if( isGrip ) break;
						}	
						if( not isGrip )
							isGrip = validEngineObject( map.GetDoor (npc.HexX, npc.HexY) );
						if( isGrip ) 
						{
						
							uint16 baseHx=npc.HexX;
							uint16 baseHy=npc.HexY;
							
							if(wpnDist > 1)
							{
								uint16 baseHx=target.HexX;
								uint16 baseHy=target.HexY;
								
								uint16 yMax = target.HexY + wpnDist;
								uint16 yMin = target.HexY - wpnDist;
								
								uint16 xMax = target.HexX + wpnDist;
								uint16 xMin = target.HexX - wpnDist;
								
								uint16 MapWidth = map.GetWidth( );
								uint16 MapHeight = map.GetHeight( );
								
								uint16 bestX = 0, bestY = 0, bestLen = 0;
												
								if(MapWidth <  xMax )
									xMax = MapWidth;
								if(xMin < 0)
									xMin = 0;
								if(MapHeight <  yMax )
									yMax = MapHeight;
								if(yMin < 0)
									yMin = 0;
												
								for(int hexX = xMin, xEnd = xMax; hexX <= xEnd ; hexX++)
								{
									uint16 hx = hexX;
									uint16 hy = yMin;
									if( hx > 0 && MapWidth > hx )
									{
										map.GetHexCoord  ( target.HexX, target.HexY, hx, hy, 0, wpnDist );
										uint idist = map.GetPathLength (npc,hx,hy,0);
										if( hx!= 0 && hy != 0 && ( idist<bestLen || bestLen == 0 ))
										{
											bestX = hx;
											bestY = hy;
											bestLen=idist;
										}
									}
								}
									
								for(int hexY = yMin, yEnd = yMax; hexY <= yEnd; hexY++)
								{				
									uint16 hx = xMax;
									uint16 hy = hexY;
									if( hx > 0 && MapWidth > hx )
									{
										map.GetHexCoord  ( target.HexX, target.HexY, hx, hy, 0, wpnDist );
										uint idist = map.GetPathLength (npc,hx,hy,0);
										if( hx!= 0 && hy != 0 && ( idist<bestLen || bestLen == 0 ))
										{
											bestX = hx;
											bestY = hy;
											bestLen=idist;
										}
									}
								}
									
								for(int hexX = xMax, xEnd = xMin; hexX >= xEnd; hexX--)
								{					
									uint16 hx = hexX;
									uint16 hy = yMax;
									if( hx > 0 && MapWidth > hx )
									{
										map.GetHexCoord  ( target.HexX, target.HexY, hx, hy, 0, wpnDist );
										uint idist = map.GetPathLength (npc,hx,hy,0);
										if( hx!= 0 && hy != 0 && ( idist<bestLen || bestLen == 0 ))
										{
											bestX = hx;
											bestY = hy;
											bestLen=idist;
										}
									}
								}
																	
								for(int hexY = yMax, yEnd = yMin; hexY >= yEnd; hexY--)
								{
									uint16 hx = xMin;
									uint16 hy = hexY;
									if( hx > 0 && MapWidth > hx )
									{
										map.GetHexCoord  ( target.HexX, target.HexY, hx, hy, 0, wpnDist );
										uint idist = map.GetPathLength (npc,hx,hy,0);
										if( hx!= 0 && hy != 0 && ( idist<bestLen || bestLen == 0 ))
										{
											bestX = hx;
											bestY = hy;
											bestLen=idist;
										}
									}
								}
								
								if( bestLen != 0 )
								{
									::NpcPlane@ child=::CreatePlane();
									child.Type=AI_PLANE_WALK;
									child.Priority=plane.Priority*2;
									child.Walk_HexX=bestX;
									child.Walk_HexY=bestY;
									child.Walk_Dir=0;
									child.Run=plane.Run;
									child.Walk_Cut=0;
									plane.SetChild(child);
									return true;
								}
							
							}
							
							uint LastLength = 0, currLength = 0;
							uint16 x = 0, y = 0;
							for( uint j = attackedDir+1, jMax = j+6; j < jMax; j++) // Движемся по часовой стрелке, и ищeм свободный гекс. Выбираем самый дальний.
							{
								uint8 currDir = j%6;
								// 
								moveX = target.HexX; moveY = target.HexY;
								map.MoveHexByDir (moveX, moveY, j%6 , 1);
								if( map.IsHexRaked (moveX, moveY) && map.IsHexPassed (moveX, moveY) )
								{
									currLength = map.GetPathLength(npc, moveX, moveY, 0);
									if( currLength > LastLength ) 
									{
										x = moveX;
										y = moveY;
										LastLength = currLength;
									}
								}
							}
								
							if( LastLength != 0 )
							{
								::NpcPlane@ walkplane=::CreatePlane();
								walkplane.Type=AI_PLANE_WALK;
								walkplane.Priority=plane.Priority*2;
								walkplane.Walk_HexX=x;
								walkplane.Walk_HexY=y;
								walkplane.Walk_Dir=0;
								walkplane.Run=plane.Run;
								walkplane.Walk_Cut=0;
								plane.SetChild(walkplane);
								return true;
							}
							else if(wpnDist > 1) // Если мы не милишники, то остаемся на месте.
							{
								PlaneRun_IsRun = true;
								return true;
							}
						}
					}
				}			
						
				if(distantion == 1) // ближний бой
				{
					if( IsHumanoid(npc) )
					{
						if( !npc.CityRole_IsGuard && npc.Skill[ SK_STEAL ] >= 150 )
						{
							::Item@ item = npc.GetItem( Content::Item::DYNAMITE, -1 );
							if(validEngineObject(item))
							{						
								if( OnUseExplode( npc, item, null, null, null, 2))
								{
									@ item = npc.GetItem( Content::Item::ACTIVE_DYNAMITE, -1 );
									if(validEngineObject(item))
									{
										::NpcPlane@ newPlane=::CreatePlane();
										newPlane.Type=AI_PLANE_WALK;
										newPlane.Priority=plane.Priority*2;
										newPlane.Identifier=0;
										newPlane.IdentifierExt=0;
										newPlane.Walk_HexX=target.HexX;
										newPlane.Walk_HexY=target.HexY;
										newPlane.Run=plane.Run;
										newPlane.Walk_Cut=1;
										newPlane.Walk_Reason_CritterId = target.Id;
										newPlane.Walk_Var0 = item.Id;
										newPlane.Walk_TypeWalkReason = AI_PLANE_WALK_STEAL;
										plane.SetChild(newPlane);
										PlaneRun_IsRun = true;	
									}
								}
								return true;
							}
							else if( ::Random( 0, 1000 ) <= npc.Skill[ SK_STEAL ] && npc.Timeout[TO_BATTLE] == 0 )
							{
								::array<::Item@> items;
								uint countItem = target.GetItemsByType (ITEM_TYPE_DRUG, items);
								countItem += target.GetItemsByType (ITEM_TYPE_AMMO, items);
								if(countItem>0)
									@ item = items[::Random(0,countItem - 1)];
								
								if(validEngineObject(item))
								{
									::NpcPlane@ newPlane=::CreatePlane();
									newPlane.Type=AI_PLANE_WALK;
									newPlane.Priority=plane.Priority*2;
									newPlane.Identifier=0;
									newPlane.IdentifierExt=0;
									newPlane.Walk_HexX=target.HexX;
									newPlane.Walk_HexY=target.HexY;
									newPlane.Run=plane.Run;
									newPlane.Walk_Cut=1;
									newPlane.Walk_Reason_CritterId = target.Id;
									newPlane.Walk_Var0 = item.Id;
									newPlane.Walk_TypeWalkReason = AI_PLANE_WALK_STEAL;
									plane.SetChild(newPlane);
								}
								return true;
							}
						}
					}
				}
					
				if( IsHumanoid(npc) && npc.IsLife( ) && ( ( int(npc.Stat[ ST_CURRENT_HP ] * 1.5) < npc.Stat[ ST_MAX_LIFE ] &&(  npc.Timeout[TO_SK_FIRST_AID]==0 || npc.CountItem(Content::Item::SUPER_STIMPAK) > 0 || npc.CountItem(Content::Item::STIMPAK) > 0) ) || ( _CritIsInjured(npc) && npc.Timeout[TO_SK_DOCTOR] == 0 )) )
				{
					::NpcPlane@ child=::CreatePlane();
					child.Type=AI_PLANE_WALK;
					child.Priority=plane.Priority*2;
					child.Identifier=0;
					child.IdentifierExt=0;
					child.Walk_HexX=npc.HexX;
					child.Walk_HexY=npc.HexY;
					child.Run=plane.Run;
					child.Walk_Cut=0;
					child.Walk_Dir=LastDir;
					child.Walk_Reason_CritterId = npc.Id;
					child.Walk_TypeWalkReason = AI_PLANE_WALK_HEAL;
					plane.SetChild(child);
					return true;
				}
					
				
				return MainPlane_NpcPlaneRun( npc, plane, reason, r0, r1, r2 );
			}
			else if( reason == REASON_ATTACK_DISTANTION )
			{
				if( PlaneRun_IsRun )
				{
					HashWeaponDistantion.Drop();
					PlaneRun_IsRun = false;
					return true;
				}
				else
				{
					
					int dist=::GetDistantion(npc.HexX,npc.HexY,target.HexX,target.HexY);
					
					if(  (npc.IsCanWalk()) && wpnDist > 3 )//Zone_Attack(npc, target.HexX, target.HexY,SLOT_HAND1 ) )
					{
						uint lastBest = HashWeaponDistantion.Best;	
						
						HashWeaponDistantion.Drop();
						HashWeaponDistantion.Max = wpnDist;
						
						if(RadiusDamage != 0)
							HashWeaponDistantion.Min = RadiusDamage + 1;
						
						if( targetWpnDist <= 5 && wpnDist > targetWpnDist && HashWeaponDistantion.Min <= targetWpnDist)
							HashWeaponDistantion.Min = targetWpnDist + 1;
							
						HashWeaponDistantion.Best = dist;
								
						if( valid( weapon ) && ( _WeaponSkill(weapon,use) == SK_BIG_GUNS || _WeaponSkill(weapon,use) == SK_ENERGY_WEAPONS ) && _WeaponRound(weapon, use) > 2 )
						{
							if(npc.Stat[ST_CURRENT_HP] == MaxHp)
								HashWeaponDistantion.Best = HashWeaponDistantion.Min;
						}
						else if( HashWeaponDistantion.Min <= 3 && valid(targetWeapon) && ( _WeaponSkill(targetWeapon,targetUse) == SK_BIG_GUNS || _WeaponSkill(targetWeapon,targetUse) == SK_ENERGY_WEAPONS ) && _WeaponRound(weapon, targetUse) > 2 )
						{
							HashWeaponDistantion.Min = 5;
						}

						HashWeaponDistantion.Check();
						HashWeaponDistantion.Get(r1,r0,r2);					
						return true;
					}
				}
			}
			else if(reason==REASON_ATTACK_WEAPON)
			{
				return MainPlane_NpcPlaneRun( npc, plane, reason, r0, r1, r2 );
			}
			else if( reason==REASON_ATTACK_IM_DAMAGE)
			{
				return false;
			}
			else if( reason==REASON_ATTACK_I_GOT_DAMAGE )
			{
				return true;
			}
		} //*/
		return MainPlane_NpcPlaneRun( npc, plane, reason, r0, r1, r2 );
	}

	Npc::HashData HashWeaponDistantion;
	// Получение опыта
	
	const int get_MaxHp( )
	{
		return RealCr.Stat[ST_MAX_LIFE];
	}
	
	const float get_ExpDamage( )
	{
		float exp = float(RealCr.Stat[ST_KILL_EXPERIENCE]) / float(MaxHp);
		if( exp < 0.1 )
			return 0.1;
		return uint( exp );
	}
	
	::array<Npc::DoubleUint> CrittersToDamage;
	
	::array<Mk2::FuncdefEventNpcPlaneRun@>@		EventsNpcPlaneRun;
	::array<Mk2::FuncdefEventNpcPlaneBegin@>@		EventsNpcPlaneBegin;
	::array<Mk2::FuncdefEventNpcPlaneEnd@>@		EventsNpcPlaneEnd;
	
	bool PlaneRun_IsRun;
	uint8 LastDir;
	int DamageHp;
	
	Npc::DoubleUint16 PlaneRun_LastHexCheck;
}

class TargetAttackPriority : Ai::Priority
{
	::string debugNameTarget = "";
	uint MapId = 0;
	
	int targetWpnDist = 0;
	int isTargetUnarmed = 0;
	int use = 0;
	int wpnDist = 1;
	int totalDmg = 0;
	int dmgType = 0;
	int weaponSkill = SK_UNARMED;
	int targetDR;
	int targetDT;
	int dmgMin;
	int dmgMax;
	int dmgMul = 1;
	int dmgDiv = 1;
	int bt;
	int hp;
	int DeadHitPoints;
	
	bool isRadiusDamage = false;
	
	uint8 targetMode;
	
	uint ammoCount;			
	uint RadiusDamage;
	
	int Ammo_DrMod = 0;
	
	bool isPenetrate = false;
	
	TargetAttackPriority( ::Critter& npc )
	{
		debugNameTarget = "";
		
		::Map@ map = npc.GetMap();
		MapId = validEngineObject(map) ? map.Id : 0;
			
		uint8 mode=0;
		targetMode = 0;
		
		const ::ProtoItem@ weapon=npc.GetSlotProto(SLOT_HAND1,mode);
		
		if(valid(weapon))
		{
			const ::ProtoItem@ ammo=(weapon.Weapon_MaxAmmoCount>0 && weapon.Weapon_Caliber!=0?::GetProtoItem(_CritGetItemHand(npc).AmmoPid):null);
			if(valid(ammo))
			{
				Ammo_DrMod = ammo.Ammo_DrMod;
				dmgMul=ammo.Ammo_DmgMult; // technically, should be *2
				dmgDiv=ammo.Ammo_DmgDiv;  // technically, should be *2
			}
			
			ammoCount = _WeaponRound(weapon, use);	
			RadiusDamage = weapon.HexWeapon_Radius;
			isRadiusDamage = RadiusDamage != 0;
			use=_WeaponModeUse(mode);
			wpnDist=_WeaponMaxDist(weapon,use);
			dmgMin=_WeaponDmgMin(weapon,use);
			dmgMax=_WeaponDmgMax(weapon,use);
			dmgType=_WeaponDmgType(weapon,use);
			isPenetrate = weapon.Weapon_Perk==WEAPON_PERK_PENETRATE;
			weaponSkill = _WeaponSkill(weapon,use);
		} 
					
		targetWpnDist=1;
		isTargetUnarmed = 0;
		
		totalDmg = 0;
		
		targetDR=0;
		targetDT=0;
		bt=0;
							
		DeadHitPoints=0;
				
		hp = 0;
	}
	
	int Get( ::Critter& npc, ::Critter& target )
	{
		if(MapId==0) return -1;
		if( target.IsPlayer() )
			debugNameTarget = ::GetPlayerName( target.Id );
		else debugNameTarget = "Npc_" + target.Id;	
		
		::Map@ map = ::GetMap( MapId );
		const ::ProtoItem@ targetWeapon=target.GetSlotProto(SLOT_HAND1,targetMode);
		
		int targetUse=0;
		targetWpnDist=1;
		isTargetUnarmed = 0;
			
		if(valid(targetWeapon))
		{
			targetUse=_WeaponModeUse(targetMode);
			targetWpnDist=_WeaponMaxDist(targetWeapon,targetUse);
		}
		else
			isTargetUnarmed = 1;
			
		totalDmg = 0;
		
		targetDR=target.Stat[ST_NORMAL_RESIST+dmgType-1];
		targetDT=target.Stat[ST_NORMAL_ABSORB+dmgType-1];
		
		bt=target.Stat[ST_BODY_TYPE];
							
		if(isPenetrate) targetDT*=0.2;
		targetDR+=((npc.Trait[TRAIT_FINESSE]!=0)?30:0);
		if(npc.Perk[PE_PYROMANIAC]!=0 && dmgType==DAMAGE_FIRE) totalDmg+=15;
		targetDR+=Ammo_DrMod;
		targetDR=CLAMP(targetDR,0,100);
						
		totalDmg=(dmgMax+dmgMin + 2*npc.Perk[PE_BONUS_RANGED_DAMAGE])*0.5;
		totalDmg*=dmgMul;
		if(dmgDiv!=0) totalDmg/=dmgDiv;
		totalDmg-=targetDT;
		totalDmg-=(totalDmg*targetDR)*0.01;
		totalDmg*=ammoCount;
		if(totalDmg<0) totalDmg=0;
		if(npc.Perk[PE_LIVING_ANATOMY]!=0 &&  !(bt==BT_ALIEN || bt==BT_ROBOT)) totalDmg+=15;
		if(npc.Perk[PE_PYROMANIAC]!=0 && dmgType==DAMAGE_FIRE) totalDmg+=20;
		totalDmg-=(totalDmg*npc.Perk[PE_TOUGHNESS]*5)*0.01;
				
		DeadHitPoints=target.Stat[ST_DEAD_HIT_POINTS];
		if( (DeadHitPoints == ::__DeadHitPoints && ( bt != BT_MEN && bt != BT_WOMEN 
			&& bt != BT_CHILDREN && bt != BT_SUPER_MUTANT && bt != BT_GHOUL && bt!=BT_BRAHMIN && bt!=BT_DOG))
				|| target.Mode[MODE_NO_KNOCK]!=0) 
					DeadHitPoints=0;
				
		hp = target.Stat[ ST_CURRENT_HP ] + DeadHitPoints;
		int Value0 = 0;
		
		if(npc.IsSee (target))
		{
			if( isRadiusDamage && RadiusDamage > 0)			
			{
				int Value1 = totalDmg;
				::array<::Critter@> critters;
				for( int i = 0, iEnd = map.GetCrittersHex (target.HexX, target.HexY, RadiusDamage, FIND_LIFE_AND_KO, critters); i < iEnd; i++)
				{
					::Critter@ targetc = critters[i];
					if(!validEngineObject(targetc)) continue;
							
					totalDmg = 0;
					
					targetDR=targetc.Stat[ST_NORMAL_RESIST+dmgType-1];
					targetDT=targetc.Stat[ST_NORMAL_ABSORB+dmgType-1];
					
					bt=targetc.Stat[ST_BODY_TYPE];
										
					if(isPenetrate) targetDT*=0.2;
					targetDR+=((npc.Trait[TRAIT_FINESSE]!=0)?30:0);
					if(npc.Perk[PE_PYROMANIAC]!=0 && dmgType==DAMAGE_FIRE) totalDmg+=15;
					targetDR+=Ammo_DrMod;
					targetDR=CLAMP(targetDR,0,100);
										
					totalDmg=(dmgMax+dmgMin + 2*npc.Perk[PE_BONUS_RANGED_DAMAGE])*0.5;
					totalDmg*=dmgMul;
					if(dmgDiv!=0) totalDmg/=dmgDiv;
					totalDmg-=targetDT;
					totalDmg-=(totalDmg*targetDR)*0.01;
					totalDmg*=ammoCount;
					if(totalDmg<0) totalDmg=0;
					if(npc.Perk[PE_LIVING_ANATOMY]!=0 &&  !(bt==BT_ALIEN || bt==BT_ROBOT)) totalDmg+=15;
					if(npc.Perk[PE_PYROMANIAC]!=0 && dmgType==DAMAGE_FIRE) totalDmg+=20;
					totalDmg-=(totalDmg*npc.Perk[PE_TOUGHNESS]*5)*0.01;
									
					if( targetc.IsNpc() && npc.Stat[ST_TEAM_ID] == targetc.Stat[ST_TEAM_ID] && targetc.Stat[ST_TEAM_ID] != 0)
						Value1-=totalDmg;
					else
						Value1+=totalDmg;
				}
				return Value1;
			}
			else
			{
				if(hp > 0 && totalDmg > 0)
				{
					Value0 = ( totalDmg > hp )?1:(hp/totalDmg + ((hp%totalDmg==0)?0:1));
					
					if( !Zone_Attack(npc, target.HexX, target.HexY,SLOT_HAND1 ) || ammoCount > 2)
					{
						int add = map.GetPathLength (npc,target.HexX, target.HexY,1);
						if(add == 0 && weaponSkill != SK_UNARMED && ammoCount < 3) add = 100;
						Value0 += add * ((weaponSkill == SK_UNARMED || ammoCount > 2 )?1:6);
					}		
					Value0 *= 100;
					
					if( Zone_Attack(target, npc.HexX, npc.HexY,SLOT_HAND1 ) )
						Value0 *= 0.5; 
				}
			}	
		}
		
		return Value0;
	}
	
	::string@ get_Name()
	{
		return "TargetAttackPriority_" + ( debugNameTarget == "" ? "TargetAttackPriority" : debugNameTarget );
	}
}

class DoubleUint
{
	DoubleUint( uint a = 0, uint b = 0 )
	{
		A = a;
		B = b;
	}
	
	DoubleUint( const Npc::DoubleUint& other )
	{
		A = other.A;
		B = other.B;
	}
	
	Npc::DoubleUint@ opAdd( const Npc::DoubleUint& other )
	{
		A += other.A;
		B += other.B;
		return this;
	}
	
	uint get_Average( )
	{
		return uint(( A + B ) * 0.5);
	}
	
	uint get_Random( )
	{
		return ::Random( A, B );
	}
	
	uint A;
	uint B;
}

class DoubleUint16
{
	DoubleUint16( uint16 a = 0, uint16 b = 0 )
	{
		A = a;
		B = b;
	}
	
	bool IsDouble( uint16 a = 0, uint16 b = 0 )
	{
		return ( A == a && B == b );
	}
	
	bool IsDouble( Npc::DoubleUint16& other )
	{
		return ( A == other.A && B == other.B );
	}
	
	void Set( uint16 a, uint16 b )
	{
		A = a; 
		B = b;
	}
	
	uint16 A;
	uint16 B;
}

class HashData
{
	void Check( )
	{
		Min = MIN(Min,Max);
		Max = MAX(Min,Max);
		Best = CLAMP(Best,Min,Max);
	}

	void Get( uint& min, uint& best, uint& max)
	{
		min = Min;
		best = Best;
		max = Max;
	}
	
	float get_Average( )
	{
		return ( Min + Max ) * 0.5;
	}
	
	uint get_Random()
	{
		return ::Random( Min, Max );
	}
	
	void Drop( )
	{
		Min = 0;
		Max = 0;
		Best = 0;
	}
	
	uint Min = 0;
	uint Best = 0;
	uint Max = 0;
}

class WeaponData
{
	uint Distantion;
	uint8 Use;
	
	Npc::DoubleUint DamageData;
	
	WeaponData( const ::ProtoItem& weapon, uint8 mode )
	{
		Use = _WeaponModeUse( mode );
		Distantion = _WeaponMaxDist( weapon, Use );
		//DamageData( _WeaponDmgMin( weapon, use ), _WeaponDmgMax( weapon, use ) );
	}
	
	/*Npc::DoubleUint get_Damage( ::Critter& critter )
	{
		Npc::DoubleUint damage( DamageData );
		
		
		
		return damage;
	}*/
}
