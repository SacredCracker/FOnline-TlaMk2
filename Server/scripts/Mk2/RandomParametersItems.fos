// FOS Server Client
/*================================================================================================================================
==Автор: Ra																													==
==Скрипт встановлює випадкові бонуси для предметів.	(мунспик?)																==
==================================================================================================================================*/

enum Define
{
	MinDamage = 7510,
	MaxDamage,
	CritRoll,
	ToHit,
	CritChance,
	UAP,
	
	DRNormal	= 7600,
    DRLaser	= 7601,
    DRFire	= 7602,
    DRPlasma	= 7603,
    DRElectr	= 7604,
    DRExplode	=7605,
    DTNormal	=7606,
    DTLaser	=7607,
    DTFire	=7608,
    DTPlasma	=7609,
    DTElectr	=7610,
    AC			=7611,
    DTExplode	=7612,
    DRRad		=7613,
    CarryWeight		=7614,
    FasterHealing	=7615,
    Harisma			=7616,
    Perception		=7617,
    Strength			=7618,
    CriticalResist	=7619,
    Luck				=7620,
    Ap					=7621,
    DeteriorateResist =7622,

	BonusValueOffset		      =6, //

	BonusDR		          	  =0, //
	BonusDT		          	  =1, //
	BonusAC		          	  =2, //
	BonusST		          	  =3, //
	BonusOther		          	  =4, //
	BonusId		          	  =5, //

	NoneFlag						=0,//

	// Bonus types
	BonusTypeWMinDmg    	  =0, //
	BonusTypeWMaxDmg		  =1, //
	BonusTypeWCritRoll	  =2, //
	BonusTypeWToHit		  =3, //
	BonusTypeWCritChance	  =4, //
	BonusTypeWDist      	  =5, //
	BonusTypeWShotCost	  =6, //
	BonusTypeWReloadCost   =7, //
	BonusTypeWAP           =8, //

	//Прирост в %, за ношение своего предмета
	BonusForHisItem				=30, 	
}

//												ROLL	 0-70		71-90		91-100	
::array<int> BonusDRValue={ 	   /*LEATHER_JACKET_MIN*/		 1,			3,			5,
								   /*LEATHER_JACKET_MAX*/		 4,			7,			9,
								   /*LEATHER_ARMOR_MIN*/		 5, 		4,			7,
								   /*LEATHER_ARMOR_MAX*/		 5,			9,			12,
								   /*METAL_ARMOR_MIN*/			 3,			5,			8,
								   /*METAL_ARMOR_MAX*/			 6,			11,			14,
								   /*COMBAT_ARMOR_MIN*/			 5,			7,			10,
								   /*COMBAT_ARMOR_MAX*/			 8,			13,			16,
								   /*POWERED_ARMOR_MIN*/		 9,			10,			11,
								   /*POWERED_ARMOR_MAX*/ 		 11,		15,			18 };				   

//												ROLL	0-70		71-90		91-100	
::array<int> BonusTHValue={ 	   /*LEATHER_JACKET_MIN*/		1,			1,			1,
								   /*LEATHER_JACKET_MAX*/		1,			1,			2,
								   /*LEATHER_ARMOR_MIN*/		1,			1,			2,
								   /*LEATHER_ARMOR_MAX*/	    1,			2,			3,
								   /*METAL_ARMOR_MIN*/			1,			2,			3,
								   /*METAL_ARMOR_MAX*/			2,			3,			4,
								   /*COMBAT_ARMOR_MIN*/			2,			3,			4,
								   /*COMBAT_ARMOR_MAX*/			3,			4,			6,
								   /*POWERED_ARMOR_MIN*/		3,			4,			7,
								   /*POWERED_ARMOR_MAX*/ 		4,			5,			9 };

//												ROLL	 0-70		71-90		91-100	
::array<int> BonusACValue={ 		/*LEATHER_JACKET_MIN*/		 1,		1,			2,
								   /*LEATHER_JACKET_MAX*/		 1,		2,			3,
								   /*LEATHER_ARMOR_MIN*/		 1, 	2,			3,
								   /*LEATHER_ARMOR_MAX*/		 2,		3,			4,
								   /*METAL_ARMOR_MIN*/			 1,		2,			3,
								   /*METAL_ARMOR_MAX*/			 3,		4,			5,
								   /*COMBAT_ARMOR_MIN*/			 2,		3,			5,
								   /*COMBAT_ARMOR_MAX*/			 3,		4,			6,
								   /*POWERED_ARMOR_MIN*/		 3,		4,			6,
								   /*POWERED_ARMOR_MAX*/ 		 4,		5,			7 };

//												ROLL	 0-70		71-90		91-100	
::array<int> BonusDamageValue={	 				   /*1*/ 	    1,			1,			 2, 
																1,			2,			 3,
												   /*2*/		2,			4,			 6,
																3,			5,			 7,
												   /*3*/		1,			1,			 2,
																1,			2,			 3,	
												   /*4*/		2,			4,			 6,
																3,			5,			 7,
												   /*5*/		4,			5,			 7,
																5,			6,			 8,
												   /*6*/		5,			7,			12,
																6,			10,			15 };
																
#ifdef __SERVER
																
uint8 GetRollValue( ::Critter& cr, ::Item& item)
{
	uint16 roll = ::Random(0,9000);
	if(cr.IsNpc()) roll -=1500;
	roll+=cr.Industrial[IN_ROLL_BONUS_RANDOMISATION]*200;
	
	switch(item.Proto.CraftInfo)
	{
		case IN_LEATHER_ARMOR:
			roll+=cr.Industrial[IN_LEATHER_ARMOR_SPECIALISATION]*400+CLAMP(cr.Industrial[IN_LEATHER_ARMOR_SCORE],0,1000);
			break;
		case IN_METALL_ARMOR:
			roll+=cr.Industrial[IN_METALL_ARMOR_SPECIALISATION]*400+CLAMP(cr.Industrial[IN_METALL_ARMOR_SCORE],0,1000);
			break;
		case IN_COMBAT_ARMOR:
			roll+=cr.Industrial[IN_COMBAT_ARMOR_SPECIALISATION]*400+CLAMP(cr.Industrial[IN_COMBAT_ARMOR_SCORE],0,1000);	
			break;
		case IN_POWER_ARMOR:
			roll+=cr.Industrial[IN_POWER_ARMOR_SPECIALISATION]*400+CLAMP(cr.Industrial[IN_POWER_ARMOR_SCORE],0,1000);	
			break;
		case IN_UNARMED_WEAPON:
			roll+=cr.Industrial[IN_UNARMED_WEAPON_SPECIALISATION]*400+CLAMP(cr.Industrial[IN_UNARMED_WEAPON_SCORE],0,1000);
			break;
		case IN_SMALL_WEAPON:
			roll+=cr.Industrial[IN_SMALL_WEAPON_SPECIALISATION]*400+CLAMP(cr.Industrial[IN_SMALL_WEAPON_SCORE],0,1000);	
			break;
		case IN_BIG_WEAPON:
			roll+=cr.Industrial[IN_BIG_WEAPON_SPECIALISATION]*400+CLAMP(cr.Industrial[IN_BIG_WEAPON_SCORE],0,1000);
			break;
		case IN_ENERGY_WEAPON:
			roll+=cr.Industrial[IN_ENERGY_WEAPON_SPECIALISATION]*400+CLAMP(cr.Industrial[IN_ENERGY_WEAPON_SCORE],0,1000);
			break;
		default:
			break;
	}

	if(roll<7000) return 0;
	if(roll<9000) return 1;
	return 2;
}

// Рандомизация инструментов
void InitRandomisationTools( ::Item& item)
{
	if(not validEngineObject(item)) return;
	uint8 randomisable=item.Proto.Randomisable;
	if(randomisable!=20) return;

	/*
	// Установка лексем на "чистый" предмет
	void SetLex(Item& item, string prefix, string sufix, string des)
	{
		if(item.Proto.Randomisable==0) return;
		item.Info=2;
		item.SetLexems("$p"+prefix+"$s"+sufix+"$b"+des);
		item.Update();
	}*/
}

class BonusManager
{
	BonusManager()
	{
		@busyBonus = array<ThisModule::Bonus@>(0);
	}

	ThisModule::Bonus@ getBonus( )
	{
		if( freebouns == 0 )
			return null;
		
		ThisModule::Bonus@ result = allBonus[ Random( 0, lastBonusIndex ) ];
		while( busyBonus.find( @result ) != -1 )
			@ result = allBonus[ Random( 0, lastBonusIndex ) ];
		busyBonus.insertLast( @result );
		freebouns--;
		return result; 
	}
	
	void drop( )
	{
		lastBonusIndex = allBonus.length();
		freebouns = lastBonusIndex--;
		busyBonus.resize(0);
	}

	protected uint freebouns = 0;
	protected uint lastBonusIndex;
	
	protected ThisModule::Bonus@[]@ busyBonus = null;
	protected ThisModule::Bonus@[]@ allBonus = null;
}

class ArmorBonusManager : ThisModule::BonusManager
{
	ArmorBonusManager()
	{
		ThisModule::Bonus@[] armorBonus = 
		{
			ThisModule::Bonus( RandomParametersItems::Define::DRNormal, 				0,						95 ),
			ThisModule::Bonus( RandomParametersItems::Define::DTNormal, 				0,						75 ),
			ThisModule::Bonus( RandomParametersItems::Define::DRLaser, 				0,						40 ),
			ThisModule::Bonus( RandomParametersItems::Define::DTLaser, 				0,						55, 55, 45, 65, 65 ),
			ThisModule::Bonus( RandomParametersItems::Define::DRFire, 					0,						55, 55, 45, 65, 65 ),
			ThisModule::Bonus( RandomParametersItems::Define::DTFire, 					0,						75 ),
			ThisModule::Bonus( RandomParametersItems::Define::DRPlasma, 				0,						65 ),
			ThisModule::Bonus( RandomParametersItems::Define::DTPlasma, 				0,						50, 50, 35, 50, 50 ),
			ThisModule::Bonus( RandomParametersItems::Define::DRElectr, 				0,						50, 50, 35, 50, 50 ),
			ThisModule::Bonus( RandomParametersItems::Define::DTElectr, 				0,						50, 50, 40, 50, 50 ),
			ThisModule::Bonus( RandomParametersItems::Define::DRExplode, 				0,						50, 50, 40, 50, 50 ),
			ThisModule::Bonus( RandomParametersItems::Define::DTExplode, 				0,						60, 60, 75, 60, 60 ),
			ThisModule::Bonus( RandomParametersItems::Define::DRRad, 					0,						60, 60, 75, 60, 60 ),
			ThisModule::Bonus( RandomParametersItems::Define::CarryWeight, 				STR_CARRYWEIGHT,		0, 0, 0, 15, 0,				6, 1, 2 ),
			ThisModule::Bonus( RandomParametersItems::Define::AC, 						0,						40, 40, 40, 40, 40 ),
			ThisModule::Bonus( RandomParametersItems::Define::FasterHealing, 		STR_FASTERHEALING,		15, 15, 15, 15, 15,			6, 1, 2 ),
			ThisModule::Bonus( RandomParametersItems::Define::Harisma, 				STR_HARISMA,			0, 0, 0, 0, 10,				6, 1, 2 ),
			ThisModule::Bonus( RandomParametersItems::Define::Perception, 				STR_PERCEPTION,			0, 0, 0, 0, 10,				6, 1, 2 ),
			ThisModule::Bonus( RandomParametersItems::Define::Strength, 				STR_STRENGTH,			0, 0, 0, 0, 10,				6, 1, 2 ),
			ThisModule::Bonus( RandomParametersItems::Define::CriticalResist, 		STR_CRITICALRESIST,		25, 25, 25, 45, 45 ),
			ThisModule::Bonus( RandomParametersItems::Define::Luck, 						STR_LUCK,				10, 10, 10, 10, 10,			6, 1, 2 ),
			ThisModule::Bonus( RandomParametersItems::Define::Ap, 						STR_AP,					5, 5, 5, 25, 25,			6, 1, 2 ),
			ThisModule::Bonus( RandomParametersItems::Define::DeteriorateResist, 	STR_DETERIORATERESIST,	15, 15, 15, 30, 30,			6, 1, 2 )		
		};
	
		@allBonus = armorBonus;
	}
}

ArmorBonusManager armorBonuses;

class Bonus
{
	Bonus( uint16 _number, uint16 _lexem, uint8 _chance0, uint8 _chance1, uint8 _chance2, uint8 _chance3, uint8 _chance4, uint8 _border = 0, uint8 _borderadd = 0, uint8 _countadd = 1 )
	{
		number = _number;
		lexem = _lexem;
		chance.resize( 5 );
		border = _border;
		borderAdd = _borderadd;
		countAdd = _countadd;
		chance[0] = _chance0;
		chance[1] = _chance1;
		chance[2] = _chance2;
		chance[3] = _chance3;
		chance[4] = _chance4;
		lastId = 0;
	}
	
	Bonus( uint16 _number, uint16 _lexem, uint8 _chance, uint8 _border = 0, uint8 _borderadd = 0, uint8 _countadd = 1  )
	{
		number = _number;
		lexem = _lexem;
		chance.resize( 5 );
		border = _border;
		borderAdd = _borderadd;
		countAdd = _countadd;
		chance[0] = _chance;
		chance[1] = _chance;
		chance[2] = _chance;
		chance[3] = _chance;
		chance[4] = _chance;
	}
	
	uint check( Item& item, uint _chance, uint8& borderVar, uint8& count, string& bonuses )
	{
		if( lastId == item.Id )
			return 0;
		lastId = item.Id;
		
		if( uint8(Random(0,100)) > chance[_chance] )
			return 0;
			
		if( border != 0 )
		{
			if( borderVar >= border )
				return 0;
				
			borderVar += borderAdd;
		}
		if( lexem != 0 )
			bonuses +="@msg game "+lexem+"@";
		count += countAdd;
		statistic++;
		return number;
	}

	uint lastId;
	uint16 number;
	uint16 lexem;
	uint8[] chance;
	uint8 border;
	uint8 borderAdd;
	uint8 countAdd;
	uint statistic;
}

void InitRandomisationItem( Item& item, bool isCrafted, Critter& cr, string sufix )
{	
	if( !validEngineObject( item ) )
		return;
	
	uint8 randomisable = item.Proto.Randomisable;
	if( randomisable == 0 )
		return;
		
	if( item.GetType() != ITEM_TYPE_WEAPON && item.GetType() != ITEM_TYPE_ARMOR ) 
	{
		InitRandomisationTools(item);
		return;
	}
	
	//if(item.IsStackable()) return;
	const ProtoItem@ pItem = GetProtoItem( item.GetProtoId( ) );
	if( pItem is null )
		return;

	string prefix="$p",
	//		 sufix=sufix,
			 bonuses="$b ",
			 crafter="";
	
	uint8 count=0;
	uint8 countBonusInfo=0;
	uint8 rollValue=0; 
	uint16 costForBonusArmor = uint16( item.Proto.Cost * 0.5 );
	uint16 costForBonusWeapon = uint16( item.Proto.Cost * 0.16 );
		
	if(randomisable<6)
	{
		armorBonuses.drop();
		uint roll = Random(0,1000+cr.Industrial[IN_CHANCE_BONUS_RANDOMISATION]*20+cr.Industrial[IN_ARMOR_MASTER]*40);
		if(isCrafted)
		{
			if(roll<230) 	  roll=0;
			else if(roll<430) roll=1;
			else if(roll<580) roll=2;
			else if(roll<690) roll=3;
			else if(roll<785) roll=4;
			else if(roll<859) roll=5;
			else if(roll<915) roll=6;
			else if(roll<945) roll=7;
			else if(roll<966) roll=8;
			else if(roll<976) roll=9;
			else if(roll<985) roll=10;
			else if(roll<992) roll=11;
			else if(roll<997) roll=12;
			else 			  roll=13;
		}
		else
		{
			if(roll<420) 	  roll=0;
			else if(roll<610) roll=1;
			else if(roll<730) roll=2;
			else if(roll<800) roll=3;
			else if(roll<865) roll=4;
			else if(roll<920) roll=5;
			else if(roll<965) roll=6;
			else if(roll<984) roll=7;
			else if(roll<990) roll=8;
			else if(roll<995) roll=9;
			else if(roll<997) roll=10;
			else if(roll<998) roll=11;
			else if(roll<999) roll=12;
			else 			  roll=13;
		}
		
		for(uint i=0; i<roll; i++)
		{				
			Bonus@ bonus = armorBonuses.getBonus();
			if( @bonus is null )
				break;
			
			uint number = bonus.check( item, randomisable-1, countBonusInfo, count, bonuses );
			if( number != 0 )
			{
				rollValue = GetRollValue(cr, item);
				uint8 offset=(randomisable-1)*RandomParametersItems::Define::BonusValueOffset+rollValue;
				switch( number )
				{
					case RandomParametersItems::Define::DRNormal:
					{
						item.ArmorBonus_DRNormal = Random(BonusDRValue[offset], BonusDRValue[offset+3]);
					} break;
					
					case RandomParametersItems::Define::DTNormal:
					{
						item.ArmorBonus_DTNormal = Random(BonusTHValue[offset], BonusTHValue[offset+3]);					
					} break;
					
					case RandomParametersItems::Define::DRLaser:
					{
						item.ArmorBonus_DRLaser = Random(BonusDRValue[offset], BonusDRValue[offset+3]);					
					} break;
					
					case RandomParametersItems::Define::DTLaser:
					{
						item.ArmorBonus_DTLaser = Random(BonusTHValue[offset], BonusTHValue[offset+3]);	
					} break;
					
					case RandomParametersItems::Define::DRFire:
					{
						item.ArmorBonus_DRFire = Random(BonusDRValue[offset], BonusDRValue[offset+3]);						
					} break;
					
					case RandomParametersItems::Define::DTFire:
					{
						item.ArmorBonus_DTFire = Random(BonusTHValue[offset], BonusTHValue[offset+3]);	
					} break;
					
					case RandomParametersItems::Define::DRPlasma:
					{
						item.ArmorBonus_DRPlasma = Random(BonusDRValue[offset], BonusDRValue[offset+3]);	
					} break;
					
					case RandomParametersItems::Define::DTPlasma:
					{
						item.ArmorBonus_DTPlasma = Random(BonusTHValue[offset], BonusTHValue[offset+3]);	
					} break;
					
					case RandomParametersItems::Define::DRElectr:
					{
						item.ArmorBonus_DRElectr = Random(BonusDRValue[offset], BonusDRValue[offset+3]);	
					} break;
					
					case RandomParametersItems::Define::DTElectr:
					{
						item.ArmorBonus_DTElectr = Random(BonusTHValue[offset], BonusTHValue[offset+3]);	
					} break;
					
					case RandomParametersItems::Define::DRExplode:
					{
						item.ArmorBonus_DRExplode = Random(BonusDRValue[offset], BonusDRValue[offset+3]);	
					} break;
					
					case RandomParametersItems::Define::DTExplode:
					{
						item.ArmorBonus_DTExplode = Random(BonusTHValue[offset], BonusTHValue[offset+3]);
					} break;
					
					case RandomParametersItems::Define::DRRad:
					{
						item.ArmorBonus_DRRad = Random(BonusDRValue[offset], BonusDRValue[offset+3]);	
					} break;
					
					case RandomParametersItems::Define::CarryWeight:
					{
						item.ArmorBonus_CarryWeight =::Random(7+rollValue*3, 16+rollValue*3)*1000;
					} break;
					
					case RandomParametersItems::Define::AC:
					{
						item.ArmorBonus_AC=::Random(BonusACValue[offset], BonusACValue[offset+3]);
					} break;
					
					case RandomParametersItems::Define::FasterHealing:
					{
						item.ArmorBonus_FasterHealing=::Random(2+rollValue*2, 4+rollValue*2);
					} break;
					
					case RandomParametersItems::Define::Harisma:
					{
						item.ArmorBonus_Harisma=1;
					} break;
					
					case RandomParametersItems::Define::Perception:
					{
						item.ArmorBonus_Perception=1;			
					} break;
					
					case RandomParametersItems::Define::Strength:
					{
						item.ArmorBonus_Strength=1;
					} break;
					
					case RandomParametersItems::Define::CriticalResist:
					{
						item.ArmorBonus_CriticalResist = Random(BonusDRValue[offset], BonusDRValue[offset+3]);	
					} break;
					
					case RandomParametersItems::Define::Luck:
					{
						item.ArmorBonus_Luck=1;
					} break;
					
					case RandomParametersItems::Define::Ap:
					{
						item.ArmorBonus_AP=rollValue==2?2:1;
					} break;
					
					case RandomParametersItems::Define::DeteriorateResist:
					{
						item.ArmorBonus_DeteriorateResist=rollValue==2?2:1;			
					} break;
					
					default: 
					{
						count--;
						i--;
					}
					break;
				}
				
				item.Cost += costForBonusArmor * ( rollValue + 1 ) * ( uint( randomisable * 0.5 ) + 1 );
			}
			else i--;
		}

		if(count<2) prefix +=" @msg game "+STR_STANDART+"@";
		else if(count<4) prefix +=" @msg game "+STR_HIGH_QUALITY+"@";
		else if(count<6) prefix +=" @msg game "+STR_QUALITATIVE+"@";
		else if(count<8) prefix +=" @msg game "+STR_WORKSHOP+"@";
		else if(count<10) prefix +=" @msg game "+STR_EXCELLENT+"@";
		else if(count<12) prefix +=" @msg game "+STR_IDEAL+"@";	
		else prefix +=" @msg game "+STR_UNIQUE+"@";
		
		// Статистика Мастера брони
		if(isCrafted && count>1) ScoreMk2::ChangePlayerScore( cr, SCORE_ARMOR_MASTER, uint( count * 0.5 + item.Cost * 0.003 ) );
	}
	else if (randomisable<20)
	{
		::string strMinDamage="",
				 strMaxDamage="",
				 strEtc="";
		
		::array<uint16> varBonusWeapon={ RandomParametersItems::Define::MinDamage, RandomParametersItems::Define::MaxDamage,	RandomParametersItems::Define::CritRoll,	  RandomParametersItems::Define::ToHit,     RandomParametersItems::Define::CritChance, 			RandomParametersItems::Define::UAP};
		::array<uint16> lexBonusWeapon={ STR_MINDAMAGE,  STR_MAXDAMAGE, 	STR_CRITROLL, STR_TOHIT, STR_CRITCHANCE, STR_UAP };
		::array<uint8 > chanceBonusWeapon={ 95, 			95, 			95, 		95, 		  95, 			15,
														95,		  	 	95,		   		95,			95,		 	  95,  			15,
														95,		  	 	95,		   		95,			95,		 	  95,  			15,
														95,		   	 	95,		   		95,			95,		 	  95,  			15,
													  	95,		  	 	95,		   		95,			95,		 	  95,  			15,
													  	95,		  	 	95,		   		95,			95,		 	  95,  			15	
													  };
		uint roll=::Random(0,1000+cr.Industrial[IN_CHANCE_BONUS_RANDOMISATION]*20+cr.Industrial[IN_WEAPON_MASTER]*40);
		if(isCrafted)
		if(roll<250) 	  roll=0;
		else if(roll<600) roll=1;
		else if(roll<800) roll=2;
		else if(roll<940) roll=3;
		else if(roll<980) roll=4;
		else roll=5;
		else
		if(roll<450) 	  roll=0;
		else if(roll<660) roll=1;
		else if(roll<800) roll=2;
		else if(roll<940) roll=3;
		else if(roll<990) roll=4;
		else roll=5;
	
		uint countToBreak = 0;
		for(uint i=0; i<roll; i++)
		{			
			rollValue=GetRollValue(cr, item);
			uint8 offset=(randomisable-6)*RandomParametersItems::Define::BonusValueOffset+rollValue;
			uint number=::Random(0, varBonusWeapon.length()-1);
			if( varBonusWeapon[ number ] != 0 && uint8( Random( 0, 100 ) ) < chanceBonusWeapon[ number + ( ( randomisable - 6 ) * varBonusWeapon.length( ) ) ] )
			{
				if(varBonusWeapon[number]==RandomParametersItems::Define::MinDamage)
				{
					item.WeaponBonus_MinDamage=::Random(BonusDamageValue[offset], BonusDamageValue[offset+3]);
					strMinDamage +="\n@msg game "+lexBonusWeapon[number]+"@"+item.WeaponBonus_MinDamage;
				}
				if(varBonusWeapon[number]==RandomParametersItems::Define::MaxDamage)
				{
					item.WeaponBonus_MaxDamage=::Random(BonusDamageValue[offset], BonusDamageValue[offset+3]);
					strMaxDamage +="\n@msg game "+lexBonusWeapon[number]+"@"+item.WeaponBonus_MaxDamage;
				}
				else if(varBonusWeapon[number]==RandomParametersItems::Define::CritRoll)
				{
					item.WeaponBonus_Critroll=::Random((rollValue+1)*3,(rollValue+1)*5);
					strEtc +="\n@msg game "+lexBonusWeapon[number]+"@"+item.WeaponBonus_Critroll;
				}
				else if(varBonusWeapon[number]==RandomParametersItems::Define::ToHit)
				{
					item.WeaponBonus_ToHit=::Random((rollValue+1)*3,(rollValue+1)*6);				
					strEtc +="\n@msg game "+lexBonusWeapon[number]+"@"+item.WeaponBonus_ToHit;
				}
				else if(varBonusWeapon[number]==RandomParametersItems::Define::UAP)
				{
					item.WeaponBonus_AP=1;	
					strEtc +="\n@msg game "+lexBonusWeapon[number]+"@"+item.WeaponBonus_AP;
				}
				else if(varBonusWeapon[number]==RandomParametersItems::Define::CritChance)
				{
					item.WeaponBonus_CritChance=::Random(rollValue*3+2,rollValue*3+4);
					strEtc +="\n@msg game "+lexBonusWeapon[number]+"@"+item.WeaponBonus_CritChance;
				}

				int use=_WeaponModeUse(item.Mode);
				if ((_WeaponDmgMin(item.Proto, use)+item.WeaponBonus_MinDamage)>(_WeaponDmgMax(item.Proto, use)+item.WeaponBonus_MaxDamage)) 
					item.WeaponBonus_MinDamage=_WeaponDmgMax(item.Proto, use)+item.WeaponBonus_MaxDamage-_WeaponDmgMin(item.Proto, use);

				varBonusWeapon[number]=0;

				item.Cost+=costForBonusWeapon*(rollValue+1);

				count++;
			}
			else i--;

			countToBreak++;
			if(countToBreak>60)
			break;
		}

		bonuses +=strMinDamage+strMaxDamage+strEtc;

		prefix +="";
		
		// Статистика Мастера оружия
		if(isCrafted && validEngineObject(cr) && count>0) ScoreMk2::ChangePlayerScore( cr, SCORE_WEAPON_MASTER, uint( count + item.Cost * 0.002 ) );
	}

	if(isCrafted && validEngineObject(cr) && cr.IsPlayer())	
	{
		bonuses +="\n@msg game " + STR_NAME_CRAFTER + "@" + ::GetPlayerName(cr.Id) +"\n";
		item.CrafterId = cr.Id;
	}
	
	int rand = ::Random( 1, 100 ); 
	if( rand <= 25 ) 
	{ 
		uint countUpgrade = 0;
		if( rand <= 3 ) countUpgrade = 3; 
		else if( rand <= 10 ) countUpgrade = 2; 
		else countUpgrade = 1;
		
		for( uint i = 0; i < countUpgrade; i++ )
		{
			switch( i )
			{
				case 2:
					item.UpgradeSlot0 = item.Id;
					SETFLAG( item.CraftFlags, CF_UPGRADE_SLOT_2 );
					UNSETFLAG( item.CraftFlags, CF_UPGRADE_SLOT_2_BUSSY );
					break;
				case 1:
					item.UpgradeSlot0 = item.Id;
					SETFLAG( item.CraftFlags, CF_UPGRADE_SLOT_1 );
					UNSETFLAG( item.CraftFlags, CF_UPGRADE_SLOT_1_BUSSY );
					break;
				case 0:
					item.UpgradeSlot0 = item.Id;
					SETFLAG( item.CraftFlags, CF_UPGRADE_SLOT_0 );
					UNSETFLAG( item.CraftFlags, CF_UPGRADE_SLOT_0_BUSSY );
					break;
				
				default:
					return;
			}
		}
	}

	item.Cost+=item.Proto.Cost;
	item.Info=2;
	item.SetLexems(prefix+"$s"+sufix+bonuses);

	item.Update();
}

void AddBonus(::Critter& cr, ::Item@ armor)
{
	if(!valid(armor))
		return;
	cr.MyBonusBase[ARMOR_BONUS_CRITICAL_RESISTANCE] = cr.MyBonusBase[ARMOR_BONUS_CRITICAL_RESISTANCE] + armor.ArmorBonus_CriticalResist;
	cr.MyBonusBase[ARMOR_BONUS_ACTION_POINTS] += armor.ArmorBonus_AP;
	cr.MyBonusBase[ARMOR_BONUS_LUCK] += armor.ArmorBonus_Luck;
	cr.MyBonusBase[ARMOR_BONUS_STRENGTH]+=armor.ArmorBonus_Strength;
	cr.MyBonusBase[ARMOR_BONUS_PERCEPTION]+=armor.ArmorBonus_Perception;
	cr.MyBonusBase[ARMOR_BONUS_HARISMA]+=armor.ArmorBonus_Harisma;
	cr.MyBonusBase[ARMOR_BONUS_FASTERHEALING]+=armor.ArmorBonus_FasterHealing;	
	cr.MyBonusBase[ARMOR_BONUS_CARRYWEIGHT]+=armor.ArmorBonus_CarryWeight;
	cr.MyBonusBase[ARMOR_BONUS_DRRAD]+=armor.ArmorBonus_DRRad;
	cr.MyBonusBase[ARMOR_BONUS_DRNORMAL]+=armor.ArmorBonus_DRNormal;
	cr.MyBonusBase[ARMOR_BONUS_DRLASER]+=armor.ArmorBonus_DRLaser;		
	cr.MyBonusBase[ARMOR_BONUS_DRFIRE]+=armor.ArmorBonus_DRFire;
	cr.MyBonusBase[ARMOR_BONUS_DRPLASMA]+=armor.ArmorBonus_DRPlasma;
	cr.MyBonusBase[ARMOR_BONUS_DRELECTR]+=armor.ArmorBonus_DRElectr;
	cr.MyBonusBase[ARMOR_BONUS_DREXPLODE]+=armor.ArmorBonus_DRExplode;
	cr.MyBonusBase[ARMOR_BONUS_DTNORMAL]+=armor.ArmorBonus_DTNormal;
	cr.MyBonusBase[ARMOR_BONUS_DTLASER]+=armor.ArmorBonus_DTLaser;	
	cr.MyBonusBase[ARMOR_BONUS_DTFIRE]+=armor.ArmorBonus_DTFire;
	cr.MyBonusBase[ARMOR_BONUS_DTPLASMA]+=armor.ArmorBonus_DTPlasma;
	cr.MyBonusBase[ARMOR_BONUS_DTELECTR]+=armor.ArmorBonus_DTElectr;
	cr.MyBonusBase[ARMOR_BONUS_DTEXPLODE]+=armor.ArmorBonus_DTExplode;
	cr.MyBonusBase[ARMOR_BONUS_AC]+=armor.ArmorBonus_AC;
	
	switch(armor.Proto.Armor_Perk)
	{
		case ARMOR_PERK_POWERED: // +3 RandomParametersItems::Define::Strength, +30 radiation resist, +45 anticritical chance
			cr.MyBonusBase[ARMOR_BONUS_STRENGTH]+=3;
			cr.MyBonusBase[ARMOR_BONUS_DRRAD]+=30;
			cr.MyBonusBase[ARMOR_BONUS_CRITICAL_RESISTANCE]+=50;
			cr.MyBonusBase[ARMOR_BONUS_MELEE_DAMAGE]+=10;
			break;
		case ARMOR_PERK_POWERED_II: // // +3 RandomParametersItems::Define::Strength, +30 radiation resist, +65 anticritical chance
			cr.MyBonusBase[ARMOR_BONUS_STRENGTH]+=3;
			cr.MyBonusBase[ARMOR_BONUS_DRRAD]+=30;
			cr.MyBonusBase[ARMOR_BONUS_CRITICAL_RESISTANCE]+=55;
			cr.MyBonusBase[ARMOR_BONUS_MELEE_DAMAGE]+=10;
			break;
		case ARMOR_PERK_COMBAT: // +20 radiation resist, +20 anticritical chance
			cr.MyBonusBase[ARMOR_BONUS_DRRAD]+=20;
			cr.MyBonusBase[ARMOR_BONUS_CRITICAL_RESISTANCE]+=15;
			break;
		case ARMOR_PERK_COMBAT_II:  // +20 radiation resist, +30 anticritical chance
			cr.MyBonusBase[ARMOR_BONUS_DRRAD]+=20;
			cr.MyBonusBase[ARMOR_BONUS_CRITICAL_RESISTANCE]+=25;
			break;
		case ARMOR_PERK_COMBAT_BROTHERHOOD: // +20 radiation resist, +40 anticritical chance
			cr.MyBonusBase[ARMOR_BONUS_DRRAD]+=20;
			cr.MyBonusBase[ARMOR_BONUS_CRITICAL_RESISTANCE]+=30;
			break;
		case ARMOR_PERK_ADVANCED_I: // +4 RandomParametersItems::Define::Strength, +60 radiation resist, +75 anticritical chance
			cr.MyBonusBase[ARMOR_BONUS_STRENGTH]+=4;
			cr.MyBonusBase[ARMOR_BONUS_DRRAD]+=60;
			cr.MyBonusBase[ARMOR_BONUS_CRITICAL_RESISTANCE]+=60;
			cr.MyBonusBase[ARMOR_BONUS_MELEE_DAMAGE]+=16;
			break;
		case ARMOR_PERK_ADVANCED_II: // +4 RandomParametersItems::Define::Strength, +1 RandomParametersItems::Define::Perception, +75 radiation resist, +80 anticritical chance
			cr.MyBonusBase[ARMOR_BONUS_STRENGTH]+=4;
			cr.MyBonusBase[ARMOR_BONUS_PERCEPTION]+=1;
			cr.MyBonusBase[ARMOR_BONUS_DRRAD]+=75;
			cr.MyBonusBase[ARMOR_BONUS_CRITICAL_RESISTANCE]+=70;
			cr.MyBonusBase[ARMOR_BONUS_MELEE_DAMAGE]+=16;
			break;
		case ARMOR_PERK_SENTRY_BOTS: // +4 RandomParametersItems::Define::Strength, +1 RandomParametersItems::Define::Perception, +75 radiation resist, +80 anticritical chance, +5 AP
			cr.MyBonusBase[ARMOR_BONUS_STRENGTH]+=4;
			cr.MyBonusBase[ARMOR_BONUS_PERCEPTION]+=2;
			cr.MyBonusBase[ARMOR_BONUS_DRRAD]+=80;
			cr.MyBonusBase[ARMOR_BONUS_CRITICAL_RESISTANCE]+=75;
			cr.MyBonusBase[ARMOR_BONUS_MELEE_DAMAGE]+=35;
			cr.MyBonusBase[ARMOR_BONUS_ACTION_POINTS]+=5;
			break;
		case ARMOR_PERK_TESLA: 
			cr.MyBonusBase[ARMOR_BONUS_DRRAD]+=5;
			break;
		case ARMOR_PERK_CHARISMA: // +1 charisma
			cr.MyBonusBase[ARMOR_BONUS_HARISMA]+=1;
			break;
		default:
			break;
	}
}

void DeleteBonus(::Critter& cr)
{
	cr.MyBonusBase[ARMOR_BONUS_CRITICAL_RESISTANCE]=0;
	cr.MyBonusBase[ARMOR_BONUS_ACTION_POINTS]=0;
	cr.MyBonusBase[ARMOR_BONUS_LUCK]=0;
	cr.MyBonusBase[ARMOR_BONUS_STRENGTH]=0;
	cr.MyBonusBase[ARMOR_BONUS_PERCEPTION]=0;
	cr.MyBonusBase[ARMOR_BONUS_HARISMA]=0;
	cr.MyBonusBase[ARMOR_BONUS_FASTERHEALING]=0;	
	cr.MyBonusBase[ARMOR_BONUS_CARRYWEIGHT]=0;
	cr.MyBonusBase[ARMOR_BONUS_DRRAD]=0;
	cr.MyBonusBase[ARMOR_BONUS_DRNORMAL]=0;
	cr.MyBonusBase[ARMOR_BONUS_DRLASER]=0;	
	cr.MyBonusBase[ARMOR_BONUS_DRFIRE]=0;
	cr.MyBonusBase[ARMOR_BONUS_DRPLASMA]=0;
	cr.MyBonusBase[ARMOR_BONUS_DRELECTR]=0;
	cr.MyBonusBase[ARMOR_BONUS_DREXPLODE]=0;
	cr.MyBonusBase[ARMOR_BONUS_DTNORMAL]=0;
	cr.MyBonusBase[ARMOR_BONUS_DTLASER]=0;
	cr.MyBonusBase[ARMOR_BONUS_DTFIRE]=0;
	cr.MyBonusBase[ARMOR_BONUS_DTPLASMA]=0;
	cr.MyBonusBase[ARMOR_BONUS_DTELECTR]=0;
	cr.MyBonusBase[ARMOR_BONUS_DTEXPLODE]=0;
	cr.MyBonusBase[ARMOR_BONUS_AC]=0;
	cr.MyBonusBase[ARMOR_BONUS_MELEE_DAMAGE]=0;
}

//================================================
//====Работа с бонусными параметрами ====
//================================================


// Установка лексем на "чистый" предмет
void SetLex(::Item& item, ::string prefix, ::string sufix, ::string des)
{
	if(item.Proto.Randomisable==0) return;
	item.Info=2;
	item.SetLexems("$p"+prefix+"$s"+sufix+"$b"+des);
	item.Update();
}

// Установка лексем на "рандомизированное" оружие с дописыванием значений бонусов
void regenLexWeapon(::Item& item)
{
	::string prefix="$p ",
			 sufix="$s ",
			 bonuses="$b ",
			 crafter="";
	
	#define CheckWeaponBonus #( bonus, str ) do{ if(item.bonus>0) bonuses +="\n@msg game "+str+"@"+item.bonus; }while(false)
	
	CheckWeaponBonus( WeaponBonus_MinDamage, STR_MINDAMAGE );
	CheckWeaponBonus( WeaponBonus_MaxDamage, STR_MAXDAMAGE );
	CheckWeaponBonus( WeaponBonus_ToHit, STR_TOHIT );
	CheckWeaponBonus( WeaponBonus_AP, STR_UAP );
	CheckWeaponBonus( WeaponBonus_CritChance, STR_CRITCHANCE );
	CheckWeaponBonus( WeaponBonus_Critroll, STR_CRITROLL );
	
	#undef CheckWeaponBonus
	
	if(item.CrafterId>0)
	{
		::Critter@ cr=::GetCritter(item.CrafterId);
		if(valid(cr) && cr.IsPlayer()) bonuses +="\n@msg game " + STR_NAME_CRAFTER + "@" + ::GetPlayerName(cr.Id) +"\n";
		else bonuses +="\n@msg game " + STR_NAME_CRAFTER_LOST + "@" + "\n";
	}
	 
	item.Info=2;
	item.SetLexems(prefix+sufix+bonuses);
	item.Update();
}

// Установка бонуса оружия
void setBonusWeapon(::Item& item, uint8 bonusType, int rollValue, bool reloadDescription)
{
	uint8 randomisable=item.Proto.Randomisable;
	if(randomisable<6) return;
	uint8 offset=(randomisable-6)*RandomParametersItems::Define::BonusValueOffset+rollValue;
	switch(bonusType)
	{
		case RandomParametersItems::Define::BonusTypeWMinDmg:
		{
			item.WeaponBonus_MinDamage =item.WeaponBonus_MinDamage +::Random(BonusDamageValue[offset], BonusDamageValue[offset+3]);
			int use=_WeaponModeUse(item.Mode);
			if ((_WeaponDmgMin(item.Proto, use)+item.WeaponBonus_MinDamage)>(_WeaponDmgMax(item.Proto, use)+item.WeaponBonus_MaxDamage)) 
				item.WeaponBonus_MinDamage=item.WeaponBonus_MinDamage +_WeaponDmgMax(item.Proto, use)+item.WeaponBonus_MaxDamage-_WeaponDmgMin(item.Proto, use);
			break;
		}
		case RandomParametersItems::Define::BonusTypeWMaxDmg:
			item.WeaponBonus_MaxDamage =::Random(BonusDamageValue[offset], BonusDamageValue[offset+3]);
			break;
		case RandomParametersItems::Define::BonusTypeWToHit:
			item.WeaponBonus_ToHit =item.WeaponBonus_ToHit + ::Random((rollValue+1)*7,(rollValue+1)*10);
			break;
		case RandomParametersItems::Define::BonusTypeWAP:
			item.WeaponBonus_AP =rollValue==2?1:0;
			break;
		case RandomParametersItems::Define::BonusTypeWCritChance:
		{
			item.WeaponBonus_CritChance= item.WeaponBonus_CritChance + ::Random(rollValue*3+3,rollValue*3+5);
			break;
		}
		case RandomParametersItems::Define::BonusTypeWCritRoll:
		{
			item.WeaponBonus_Critroll = item.WeaponBonus_Critroll + ::Random((rollValue+1)*4,(rollValue+1)*6);
			break;
		}
		default:
			break;
	}
	if(reloadDescription) regenLexWeapon(item);
	item.Cost +=(item.Cost==0?item.Proto.Cost:0) + uint(item.Proto.Cost*0.16)*(rollValue+1);	
}

// Проверка, есть ли оружие в руках у криттера
bool d_WeaponInHand(::Critter& player, ::Critter@ npc)
{
	::Item@ realWeapon=_CritGetItemHand(player);
	if(not validEngineObject(realWeapon)) return false;
	if(realWeapon.Proto.Randomisable<6) return false;
	return true;
}

bool d_notWeaponInHand(::Critter& player, ::Critter@ npc)
{
	return !d_WeaponInHand(player, npc);
}

#endif

/*
Rifleman17. Перевод параметров в строку
используется в аукцыоне
*/

#define STR_BONUS_TEXT #(bonus) (100000 + bonus * 10 + 1)
#define STR_SHORT_BONUS_TEXT #(bonus) (100000 + bonus * 10 + 2)
#define STR_UPGRADE_SLOT_FREE #(bonus) (100000 + bonus * 10 + 3)
#define STR_UPGRADE_SLOT_BUSSY #(bonus) (100000 + bonus * 10 + 4)

const uint[] ArmorBonuses = {
	 ARMOR_BONUS_CRITICAL_RESISTANCE,
	 ARMOR_BONUS_ACTION_POINTS,
	 ARMOR_BONUS_LUCK,
	 ARMOR_BONUS_STRENGTH,
	 ARMOR_BONUS_PERCEPTION,
	 ARMOR_BONUS_HARISMA,
	 ARMOR_BONUS_FASTERHEALING,
	 ARMOR_BONUS_CARRYWEIGHT,
	 ARMOR_BONUS_DRRAD,
	 ARMOR_BONUS_DRNORMAL,
	 ARMOR_BONUS_DRLASER,
	 ARMOR_BONUS_DRFIRE,
	 ARMOR_BONUS_DRPLASMA,
	 ARMOR_BONUS_DRELECTR,
	 ARMOR_BONUS_DREXPLODE,
	 ARMOR_BONUS_DTNORMAL,
	 ARMOR_BONUS_DTLASER,
	 ARMOR_BONUS_DTFIRE,
	 ARMOR_BONUS_DTPLASMA,
	 ARMOR_BONUS_DTELECTR,
	 ARMOR_BONUS_DTEXPLODE,
	 ARMOR_BONUS_AC,
	 ITEM_BONUS_UPGRADE_SLOT_0,
	 ITEM_BONUS_UPGRADE_SLOT_1,
	 ITEM_BONUS_UPGRADE_SLOT_2,
};

// rifleman17 - для аукциона важно сократить текст лексем, потому обрезаются msg game и заменяются на @? 
// Оставлено в этом скрипте, чтобы при изменении GetItemBonuses менялась и эта функция
::string GetItemBonusesAuction(int itemId)
{
	::string bonuses = "";
	if(itemId > 0)
	{
		ItemMutual@ item = ::GetItem( itemId );
		if( item is null )
			return "";
		for(uint i = 0, l = ArmorBonuses.length(); i < l; i++)
		{
			if( ArmorBonuses[i] == ITEM_BONUS_UPGRADE_SLOT_0 || ArmorBonuses[i] == ITEM_BONUS_UPGRADE_SLOT_1 || ArmorBonuses[i] == ITEM_BONUS_UPGRADE_SLOT_2)
			{
				int value = 0;
				switch( ArmorBonuses[i] )
				{
					case ITEM_BONUS_UPGRADE_SLOT_2:
						value = item.UpgradeSlot2;
						break;
					case ITEM_BONUS_UPGRADE_SLOT_1:
						value = item.UpgradeSlot1;
						break;
					case ITEM_BONUS_UPGRADE_SLOT_0:
						value = item.UpgradeSlot0;
						break;
					
					default:
						continue;
				}
			
				if( value == 0 )
					continue;
				bonuses += "@?"+STR_SHORT_BONUS_TEXT(ArmorBonuses[i]);
				if(value==itemId)
					bonuses += "@?"+STR_UPGRADE_SLOT_FREE(ArmorBonuses[i]);
				else bonuses += "@?"+STR_UPGRADE_SLOT_BUSSY(ArmorBonuses[i]);
			}
			else
			{
				switch( ArmorBonuses[i] )
				{
				#define CheckBonus	#( type, value )	case type :{ if( item.value != 0 ) bonuses += "@?"+STR_SHORT_BONUS_TEXT(ArmorBonuses[i])+" "+ "@ " + item.value +  "\n"; } break
					CheckBonus(ARMOR_BONUS_CRITICAL_RESISTANCE, ArmorBonus_CriticalResist);
					CheckBonus(ARMOR_BONUS_ACTION_POINTS, ArmorBonus_AP);
					CheckBonus(ARMOR_BONUS_LUCK, ArmorBonus_Luck);
					CheckBonus(ARMOR_BONUS_STRENGTH, ArmorBonus_Strength);
					CheckBonus(ARMOR_BONUS_PERCEPTION, ArmorBonus_Perception);
					CheckBonus(ARMOR_BONUS_HARISMA, ArmorBonus_Harisma);
					CheckBonus(ARMOR_BONUS_FASTERHEALING, ArmorBonus_FasterHealing);
					CheckBonus(ARMOR_BONUS_CARRYWEIGHT, ArmorBonus_CarryWeight);
					CheckBonus(ARMOR_BONUS_DRNORMAL, ArmorBonus_DRNormal);
					CheckBonus(ARMOR_BONUS_DRLASER, ArmorBonus_DRLaser);
					CheckBonus(ARMOR_BONUS_DRRAD, ArmorBonus_DRRad);
					CheckBonus(ARMOR_BONUS_DRFIRE, ArmorBonus_DRFire);
					CheckBonus(ARMOR_BONUS_DRPLASMA, ArmorBonus_DRPlasma);
					CheckBonus(ARMOR_BONUS_DRELECTR, ArmorBonus_DRElectr);
					CheckBonus(ARMOR_BONUS_DREXPLODE, ArmorBonus_DRExplode);
					CheckBonus(ARMOR_BONUS_DTNORMAL, ArmorBonus_DTNormal);
					CheckBonus(ARMOR_BONUS_DTLASER, ArmorBonus_DTLaser);
					CheckBonus(ARMOR_BONUS_DTFIRE, ArmorBonus_DTFire);
					CheckBonus(ARMOR_BONUS_DTPLASMA, ArmorBonus_DTPlasma);
					CheckBonus(ARMOR_BONUS_DTELECTR, ArmorBonus_DTElectr);
					CheckBonus(ARMOR_BONUS_DTEXPLODE, ArmorBonus_DTExplode);
					CheckBonus(ARMOR_BONUS_AC, ArmorBonus_AC);
				#undef CheckBonus
					default: break;
				}
			}
		}
	}
	return bonuses;
}

#ifdef __SERVER
void Message( string mess)
{
	Log(mess);
}
#endif

::string GetItemBonuses(ItemMutual@ item)
{
	::string bonuses = "";
	//if(itemId > 0)
	{
		//ItemMutual@ item = ::GetItem( itemId );
		if( item is null )
		{
			return "invalid";
		}
		
		for(uint i = 0, l = ArmorBonuses.length(); i < l; i++)
		{
			const uint index = ArmorBonuses[i];
			if( index == ITEM_BONUS_UPGRADE_SLOT_0 || index == ITEM_BONUS_UPGRADE_SLOT_1 || index == ITEM_BONUS_UPGRADE_SLOT_2)
			{
				int value = 0;
				switch( index )
				{
					case ITEM_BONUS_UPGRADE_SLOT_2:
						value = item.UpgradeSlot2;
						break;
					case ITEM_BONUS_UPGRADE_SLOT_1:
						value = item.UpgradeSlot1;
						break;
					case ITEM_BONUS_UPGRADE_SLOT_0:
						value = item.UpgradeSlot0;
						break;
					
					default:
						continue;
				}
				if( value == 0 )
					continue;
				bonuses = bonuses + "@msg game " + STR_BONUS_TEXT(index)+"@ ";
				if(uint( value ) == item.Id)
					bonuses = bonuses + "@msg game " + STR_UPGRADE_SLOT_FREE(index) + "@\n";
				else 
				{
					ItemMutual@ upgrade = ::GetItem( value );
					if( upgrade !is null )
						bonuses = bonuses + "@msg ITEM " + ( upgrade.GetProtoId() * 100 ) + "@\n";
					else 
						bonuses = bonuses + "@msg game " + STR_UPGRADE_SLOT_BUSSY(index) + "@\n";
				}
			}
			else
			{
				switch( index )
				{
				#define CheckBonus	#( type, value )	case type :{ if( item.value != 0 ) { bonuses += "@msg game "+STR_BONUS_TEXT(index)+"@ " + item.value +  "\n"; /*Message( " " + type + " " + item.value );*/ } } break
					CheckBonus(ARMOR_BONUS_CRITICAL_RESISTANCE, ArmorBonus_CriticalResist);
					CheckBonus(ARMOR_BONUS_ACTION_POINTS, ArmorBonus_AP);
					CheckBonus(ARMOR_BONUS_LUCK, ArmorBonus_Luck);
					CheckBonus(ARMOR_BONUS_STRENGTH, ArmorBonus_Strength);
					CheckBonus(ARMOR_BONUS_PERCEPTION, ArmorBonus_Perception);
					CheckBonus(ARMOR_BONUS_HARISMA, ArmorBonus_Harisma);
					CheckBonus(ARMOR_BONUS_FASTERHEALING, ArmorBonus_FasterHealing);
					CheckBonus(ARMOR_BONUS_CARRYWEIGHT, ArmorBonus_CarryWeight);
					CheckBonus(ARMOR_BONUS_DRNORMAL, ArmorBonus_DRNormal);
					CheckBonus(ARMOR_BONUS_DRLASER, ArmorBonus_DRLaser);
					CheckBonus(ARMOR_BONUS_DRRAD, ArmorBonus_DRRad);
					CheckBonus(ARMOR_BONUS_DRFIRE, ArmorBonus_DRFire);
					CheckBonus(ARMOR_BONUS_DRPLASMA, ArmorBonus_DRPlasma);
					CheckBonus(ARMOR_BONUS_DRELECTR, ArmorBonus_DRElectr);
					CheckBonus(ARMOR_BONUS_DREXPLODE, ArmorBonus_DRExplode);
					CheckBonus(ARMOR_BONUS_DTNORMAL, ArmorBonus_DTNormal);
					CheckBonus(ARMOR_BONUS_DTLASER, ArmorBonus_DTLaser);
					CheckBonus(ARMOR_BONUS_DTFIRE, ArmorBonus_DTFire);
					CheckBonus(ARMOR_BONUS_DTPLASMA, ArmorBonus_DTPlasma);
					CheckBonus(ARMOR_BONUS_DTELECTR, ArmorBonus_DTElectr);
					CheckBonus(ARMOR_BONUS_DTEXPLODE, ArmorBonus_DTExplode);
					CheckBonus(ARMOR_BONUS_AC, ArmorBonus_AC);
				#undef CheckBonus
					default: break;
				}
			}
		}
	}
	return bonuses;
}
