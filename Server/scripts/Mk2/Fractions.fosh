// FOS Server

//TabaK. Фракции
#define FR_RATING                   (0)
#define FR_KILLS                    (1)
#define FR_DEATHS                   (2)
#define FR_ENEMIES_KILLED           (3)
#define FR_FRIENDS_KILLED           (4)
#define FR_REPUTATION               (5)
#define FR_MONEY                    (6)
#define FR_POPULATION               (7)
#define FR_PLACE                    (8)

#ifdef __FO_MK2
#define FR_QUEST_MUTANTS            (9)  // Статус фракционного квеста "Крутые разборки"
#define FR_QUEST_HIGHWAYMAN         (10) // Был ли создан хайвей с ключом в квесте?

#define FR_EMBLEM                   (11) // хэш эмблемы

#define FR_CITY_PENALTY_BEGIN       (30)
#define FR_CITY_PENALTY_END  	    (59)
#define FR_CITY_PENALTY_COUNT  	    ( FR_CITY_PENALTY_END - FR_CITY_PENALTY_BEGIN + 1 )

#define FR_NR_FAMILY                (80) // Принадлежность к мафиозной семье в Нью-Рено. 1,5 - Мордино, 2,6 - Сальваторе, 3,7 - Бишопы, 4,8 - Райты
#define FR_SALVATORE_SUPPLY         (81) // Статус квеста "поставка отменяется"
#define FR_LAST_MAFIA_QUEST_FAILED  (82) // Хранит время последнего провала квеста в мафиозной линейке(НР)
#define FR_WRIGHT_SUPPLY            (83) // Статус квеста "Вредная привычка"
#define FR_KILL_MIRON               (84) // Статус квеста "Передозировка"
#define FR_LAST_MAFIA_SUPPLY		(85) // Время последней поставки от лидера мафиозной семьи.
#define FR_DATA_SIZE                (90) // Размер блока данных для фракций. МЕНЯТЬ ТОЛЬКО ПОСЛЕ ВАЙПА ФРАКЦИЙ.
#endif

#ifndef __FO_MK2
#define FR_DATA_SIZE                (9) // Размер блока данных для фракций. МЕНЯТЬ ТОЛЬКО ПОСЛЕ ВАЙПА ФРАКЦИЙ.
#endif

#define FR_MAX_REQUESTS             (5) // Максимальное количество запросов на союз.

#define FR_FRIENDLY_KILL               (50) // Штраф за убийство соклановца.
#define FR_ENEMY_KILL                  (200) // Награда за убийство врага.
#define FR_DEATH                       (50) // Штраф за смерть соклановца.
#define FR_PWNED                       (200) // Штраф за убийство соклановца врагом.(Суммируется со стандартным)
#define FR_DIVIDER                     (100) // Делитель опыта. Приобретенный членом фракции опыт делиться на него и прибавляется к рейтингу фракции.

#define REASON_REQUEST_FRIENDSHIP (0)
#define REASON_ADD_ENEMY          (1)

shared interface IVariableCallback
{
	#ifdef __FO_MK2
	void ChangeVariable( ::Critter @critter, ::OffClient @client, int variable, int value );
	#endif
	#ifndef __FO_MK2
	void ChangeVariable( ::Critter @critter, int variable, int value );
	#endif
}

shared class Fraction
{
	string Name;
	private uint[] @Players = array<uint>(0);
	private ::dictionary @GameVariable = dictionary();
	uint[] @Requests = array<uint>(FR_MAX_REQUESTS,0);
	uint[] @Allies = array<uint>(0);
	uint[] @Enemies = array<uint>(0);
	uint[] @KnownLocs = array<uint>(0);
	uint[] @ColorList = array<uint>(0);
	uint[] @Stats = array<uint>(FR_DATA_SIZE,0);
	// uint[] @OnlinePlayers = array<uint>(0);
	
	bool IsNpc = false;
	bool InitProccess = true;
	
	uint get_Id( ){ return GetStrHash( Name ); }
	Fraction(string& name){ Name = name; }

	void PlayerOnline( ::Critter@ player )
	{
		::Critter@ critter = null;
		::string name = ::GetPlayerName( player.Id );
		for( uint n = 0, nMax = Players.length(); n < nMax; n++ )
		{
			@critter = ::GetCritter( Players[n] );
			if( critter is null || critter is player )
				continue;
			if( critter.Stat[ ST_FR_LEADERSHIP ] > 0 )
				critter.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 14104, "$name" + name );
		}
	}
	
	::Critter@ GetPlayer( uint index )
	{
		if( index < Players.length() )
			return ::GetCritter( Players[index] );
		return null;
	}
	
	#ifdef __FO_MK2
	::OffClient@ GetOffPlayer( uint index )
	{
		if( index < Players.length() && GetPlayer( index ) is null )
			return this.GetOffClient(Players[index]);
		return null;
	}
	
	::OffClient@ GetOffPlayerById( uint id )
	{
		int index = Players.find( id );
		if( index == -1 )
			return null;
		return GetOffPlayer( index );
	}
	#endif
	
	bool CheckCritter( uint id )
	{
		::Critter@ critter = ::GetCritter( id );
		if( critter !is null )
			return CheckCritter( critter );
		
		#ifdef __FO_MK2
		bool result = false;
		::OffClient @off = GetOffPlayerById( id );
		return ( off !is null && Players.find( id ) != -1 && uint( off.GetParam( ST_FACTION ) ) == Id );
		#endif
		#ifndef __FO_MK2
		return false;
		#endif
	}
	
	bool CheckCritter( ::Critter@ critter )
	{
		return ( uint( critter.Stat[ST_FACTION] ) == Id && ( critter.IsNpc() || Players.find( critter.Id ) != -1 ) );
	}
	
	const array<uint>@ GetPlayers( )
	{
		return Players;
	}
	
	::Critter@ get_Leader()
	{
		return GetPlayer( 0 );
	}
	
	#ifdef __FO_MK2
	::OffClient@ get_OffLeader()
	{
		if( Leader !is null )
			return GetOffPlayer( 0 );
		return null;
	}
	#endif
	
	int SetLeader( ::Critter@ critter )
	{
		if( critter !is null && uint( critter.Stat[ST_FACTION] ) == Id )
		{
			int index = Players.find( critter.Id );
			if( index != -1 )
			{
				uint oldLeader = Players[0];
				Players[0] = critter.Id;
				Players[index] = oldLeader;
				return 0;
			}
			return -2;
		}
		return -1;
	}
	
	#ifdef __FO_MK2
	void _SetVariable( uint id, int variableNum, int value, IVariableCallback @callback = null )
	{
		Critter @critter = ::GetCritter(id);
		OffClient @client = null;
		if( critter is null )
			@client = this.GetOffClient(id);
		callback.ChangeVariable( critter, client, variableNum, value );
	}
	#endif
	
	#ifndef __FO_MK2
	void _SetVariable( uint id, int variableNum, int value, IVariableCallback @callback = null )
	{
		callback.ChangeVariable( ::GetCritter(id), variableNum, value );
	}
	#endif
	
	void SetVariable( int variableNum, int value, IVariableCallback @callback = null )
	{
		GameVariable.set( "GameVariable_" + variableNum, value );
		if( InitProccess )
			return;
		
		::GameVar @quest = null;
		uint id = 0;
		for( uint n = 0, nMax = Players.length(); n < nMax; n++ )
		{
			id = Players[n];
			@quest = ::GetLocalVar(variableNum, id);
			quest = value;
			if( callback !is null )
				_SetVariable( id, variableNum, value, callback );
		}
	}
	
	void InitVariable( string@ variableNumStr, int value )
	{
		if( InitProccess )
			GameVariable.set( variableNumStr, value );
	}
	
	const int get_Variable( int variableNum )
	{
		int result = 0;
		GameVariable.get( "GameVariable_" + variableNum, result );
		return result;
	}
	
	bool AddLocation(uint locId)
	{
		for(uint n=0, nMax=KnownLocs.length(); n<nMax; n++) if(KnownLocs[n]==locId) return false;
		this.SetKnownLoc(Id, locId);
		for(uint n=0, nMax=Players.length(); n<nMax; n++) this.SetKnownLoc(Players[n], locId);
		return true;
	}
	
	bool DeleteLocation(uint locId)
	{
		for(uint n=0, nMax=KnownLocs.length(); n<nMax; n++)
		{
			if(locId==KnownLocs[n])
			{
				KnownLocs.removeAt(n);
				break;
			}
			else if(n==nMax-1) return false;
		}
		this.UnsetKnownLoc(Id, locId);
		for(uint n=0, nMax=Players.length(); n<nMax; n++) this.UnsetKnownLoc(Players[n], locId);
		return true;
	}
	
	int8 ChangePlayerRank(string& name, Critter& boss, uint8 newRank) //-1 - ошибка, 0-игрок не найден, 1-удачная смена ранга.
	{
		Critter@ player=::GetPlayer(name);
		#ifndef __FO_MK2
		if( player is null )
			return 0;
		int leadership = player.Stat[ST_FR_LEADERSHIP];
		uint id = player.Id;
		#endif
		
		#ifdef __FO_MK2
		OffClient@ off;
		if( player is null )
		{
			@off=this.GetOffClient(name);
			if(off is null) return 0;
		}
		int leadership = ( off !is null ? off.GetParam(ST_FR_LEADERSHIP) : player.Stat[ST_FR_LEADERSHIP] );
		uint id = ( off !is null ? off.Id : player.Id );
		#endif
		
		if( leadership >= boss.Stat[ST_FR_LEADERSHIP] ) return -1;
		for(uint n=0, nMax=Players.length();n<nMax;n++)
		{
			if(Players[n]==id)
			{
				#ifdef __FO_MK2
				if(off !is null) off.SetParam(ST_FR_LEADERSHIP, newRank);
				else 
				#endif
				{
					player.StatBase[ST_FR_LEADERSHIP]=newRank;
					player.RunClientScript("client_fraction_gui@__Scr_ReInit", Id,newRank,0,null,null);
				}
				return 1;
			}
		}
		return 0;
	}
	
	int8 DismissPlayer(string name, Critter@ boss) // -1 - недостаточно прав; 0 - игрок не найден; 1 - игрок уволен.
	{
		Critter@ player=::GetPlayer(name);
		int access = 0;
		uint id = 0;
		
		#ifdef __FO_MK2
		OffClient@ off;
		if(player is null)
		{
			@off=this.GetOffClient(name);
			if(off is null) return 0;
			access = off.GetParam(ST_FR_LEADERSHIP);
			id = off.Id;
		}
		#endif
		#ifndef __FO_MK2
		if(player is null) return 0;
		#endif
		
		else
		{
			access = player.Stat[ST_FR_LEADERSHIP];
			id = player.Id;
		}
		
		if( boss !is null && access >= boss.Stat[ST_FR_LEADERSHIP]) 
			return -1;
		
		if( access == 2 )
		{
			CreateTimeEvent(__FullSecond+1, "Mk2@Fractions::e_DeleteFraction", Id, true);
			return 1;
		}
		
		for(uint n=0, nMax=Players.length(); n<nMax; n++)
		{
			if(Players[n]==id)
			{
				this.Dismiss(Players[n]);
				Players.removeAt(n);
				Stats[FR_POPULATION]--;
				if( player !is null ) player.RunClientScript("client_fraction_gui@__Scr_ReInit", 0,0,0,null,null);
				return 1;
			}
		}
		return 0;
	}
	
	string@[] GetPlayerList(uint8 access) //0-Все, 1-Только солдаты, 2-Только офицеры
	{
		string@[] retVal;
		int leadership = 0;
		for(uint n=0, nMax=Players.length(); n<nMax; n++)
		{
			Critter@ cr=GetCritter(Players[n]);
			
			if(cr is null)
			{
				#ifdef __FO_MK2
				OffClient@ off;
				@off=this.GetOffClient(Players[n]);
				if(off is null)
				{
					Log("Error! Player from fraction "+Name+" not found! Id="+Players[n]);
					continue;
				}
				leadership = off.GetParam(ST_FR_LEADERSHIP);
				#endif
				#ifndef __FO_MK2
				Log("Error! Player from fraction "+Name+" not found! Id="+Players[n]);
				continue;
				#endif
			}
			else leadership = cr.Stat[ST_FR_LEADERSHIP];
			
			if(access==0 || int( access ) == leadership + 1 ) retVal.insertLast(GetPlayerName(Players[n]));
		}
		return retVal;
	}
	
	void Delete( )
	{
		uint n = 0, nMax = Players.length();
		for( n = 0; n < nMax; n++ ) Dismiss( Players[n] );
		
		n = 0;
		::Location@ loc = null;
		::GameVar@ var = null;
		for( nMax = KnownLocs.length(); n < nMax; n++ )
		{
			@loc = ::GetLocation( KnownLocs[n] );
			if(validEngineObject(loc))
			{
				@var = ::GetLocalVar( LLVAR_is_quest_loc, loc.Id );
				if( var !is null && var.GetValue() == 1 ) ::DeleteLocation( loc.Id );
			}
		}
	}
	
	bool AddPlayer(uint critterId)
	{
		if( Players.find( critterId ) != -1 ) return false;
		if( InitProccess )
		{
			Players.insertLast(critterId);
			return true;
		}
		
		Critter@ critter=GetCritter(critterId);
		if(critter !is null)
		{
			critter.StatBase[ST_FACTION]=Id;
			#ifdef __FO_MK2
			switch(Stats[FR_NR_FAMILY])
			{
				case 1:critter.KarmaBase[KARMA_MAN_MORDINO]=1;break;
				case 2:critter.KarmaBase[KARMA_MAN_SALVATORE]=1;break;
				case 3:critter.KarmaBase[KARMA_MAN_BISHOP]=1;break;
				case 4:critter.KarmaBase[KARMA_MAN_WRIGHT]=1;break;
				case 5:critter.KarmaBase[KARMA_MAN_MORDINO]=1;break;
				case 6:critter.KarmaBase[KARMA_MAN_SALVATORE]=1;break;
				case 7:critter.KarmaBase[KARMA_MAN_BISHOP]=1;break;
				case 8:critter.KarmaBase[KARMA_MAN_WRIGHT]=1;break;
				default:break;
			}
			#endif
			if( critter.IsPlayer( ) )
				critter.RunClientScript("client_fraction_gui@__Scr_ReInit", Id,0,0,null,null);
		}
		#ifdef __FO_MK2
		else
		{
			OffClient@ offCritter=this.GetOffClient(critterId);
			if(offCritter is null) return false;
			offCritter.SetParam(ST_FACTION, Id);
			switch(Stats[FR_NR_FAMILY])
			{
				case 1:offCritter.SetParam(KARMA_MAN_MORDINO,1);break;
				case 2:offCritter.SetParam(KARMA_MAN_SALVATORE,1);break;
				case 3:offCritter.SetParam(KARMA_MAN_BISHOP,1);break;
				case 4:offCritter.SetParam(KARMA_MAN_WRIGHT,1);break;
				case 5:offCritter.SetParam(KARMA_MAN_MORDINO,1);break;
				case 6:offCritter.SetParam(KARMA_MAN_SALVATORE,1);break;
				case 7:offCritter.SetParam(KARMA_MAN_BISHOP,1);break;
				case 8:offCritter.SetParam(KARMA_MAN_WRIGHT,1);break;
				default:break;
			}
		}
		#endif
		#ifndef __FO_MK2
		else return false;
		#endif
		if( critter.IsPlayer( ) )
			Players.insertLast(critterId);
		Stats[FR_POPULATION]++;
		#ifdef __FO_MK2
		GameVar@ quest=GetLocalVar(LVAR_q_nov_mutants, critterId);
		if( quest !is null ) quest=Stats[FR_QUEST_MUTANTS];
		@quest=GetLocalVar(LVAR_q_salvatore_supply, critterId);
		if( quest !is null ) quest=Stats[FR_SALVATORE_SUPPLY];
		@quest=GetLocalVar(LVAR_q_wright_supply, critterId);
		if( quest !is null ) quest=Stats[FR_WRIGHT_SUPPLY];
		@quest=GetLocalVar(LVAR_q_kill_miron, critterId);
		if( quest !is null ) quest=Stats[FR_KILL_MIRON];
		#endif
		return true;
	}
	
	void AddAllianceRequest(uint id)
	{
		for(uint n=0, nMax=Allies.length(); n<nMax; n++) if(Allies[n]==id) return;
		Requests.insertFirst(id);
		Requests.resize(FR_MAX_REQUESTS);
	}
	
	void ApproveAlliance(uint id)
	{
		for(uint n=0, nMax=FR_MAX_REQUESTS; n<nMax; n++)
		{
			if(Requests[n]==0) break;
			else if(Requests[n]==id)
			{
				Requests.removeAt(n);
				Requests.insertLast(0);
				break;
			}
		}
		for(uint n=0, nMax=Allies.length(); n<nMax; n++) if(Allies[n]==id) return;
		Allies.insertLast(id);
	}
	
	void AddEnemy(uint id)
	{
		for(uint n=0, nMax=Allies.length(); n<nMax; n++) if(Allies[n]==id) Allies.removeAt(n);
		for(uint n=0, nMax=Enemies.length(); n<nMax; n++) if(Enemies[n]==id) return;
		Enemies.insertLast(id);
	}
	
	void Serialize(file@ f)
	{
		f.writeString( "Fraction = " + Name + "\n");
		
		f.writeString( "Players =" );
		uint n = 0, nEnd = Players.length();
		for( ; n < nEnd; n++)
			f.writeString( " " + Players[n] );
		f.writeString( "\n" );
		
		f.writeString( "Requests =" );
		for( n = 0; n < FR_MAX_REQUESTS; n++ )
			f.writeString( " " + Requests[n] );
		f.writeString( "\n" );
		f.writeString( "Allies =" );
		nEnd = Allies.length();
		for( n = 0; n < nEnd; n++)
			f.writeString( " " + Allies[n] );
		f.writeString( "\n" );
		
		f.writeString( "Enemies =" );
		nEnd = Enemies.length();
		for( n = 0; n < nEnd; n++)
			f.writeString( " " + Enemies[n] );
		f.writeString( "\n" );
		
		f.writeString( "KnownLocs =" );
		nEnd = KnownLocs.length();
		for( n = 0; n < nEnd; n++)
			f.writeString( " " + KnownLocs[n] );
		f.writeString( "\n" );
		
		f.writeString( "ColorList =" );
		nEnd = ColorList.length();
		for( n = 0; n < nEnd; n++)
			f.writeString( " " + ColorList[n] );
		f.writeString( "\n" );
		
		f.writeString( "Stats =" );
		for( n = 0; n < FR_DATA_SIZE; n++ )
			f.writeString( " " + Stats[n] );
		f.writeString( "\n" );
		
		::array<::string@> vars;
		nEnd = GameVariable.keys( vars );
		int temp = 0;
		string@ str = null;
		for( n = 0; n < nEnd; n++ )
		{
			@str = vars[n];
			GameVariable.get( str, temp );
			f.writeString( str + "=" + temp + "\n");
		}
		
		f.writeString( "IsNpc = " + IsNpc + "\n");
	}
	
	void SetKnownLoc(uint playerId, uint locId)
	{
		Critter@ player=GetCritter(playerId);
		if( player !is null )
		{
			if(!player.IsKnownLoc(true, locId)) player.SetKnownLoc(true, locId);
		}
		#ifdef __FO_MK2
		else
		{
			OffClient@ off=this.GetOffClient(playerId);
			if( off !is null && !off.IsKnownLoc(locId)) off.SetKnownLoc(locId);
		}
		#endif
	}

	void UnsetKnownLoc(uint playerId, uint locId)
	{
		Critter@ player=GetCritter(playerId);
		if(player !is null)
		{
			if(player.IsKnownLoc(true, locId)) player.UnsetKnownLoc(true, locId);
		}
		#ifdef __FO_MK2
		else
		{
			OffClient@ off=this.GetOffClient(playerId);
			if(off !is null && off.IsKnownLoc(locId)) off.UnsetKnownLoc(locId);
		}
		#endif
	}

	bool Dismiss(uint id)
	{
		#ifdef __FO_MK2
		GameVar@ quest=GetLocalVar(LVAR_q_nov_mutants, id);
		if( quest !is null ) quest=0;
		@quest=GetLocalVar(LVAR_q_salvatore_supply, id);
		if(quest !is null) quest=0;
		@quest=GetLocalVar(LVAR_q_wright_supply, id);
		if(quest !is null) quest=0;
		@quest=GetLocalVar(LVAR_q_kill_miron, id);
		if(quest !is null) quest=0;
		#endif
		Critter@ player=GetCritter(id);
		if( player !is null )
		{
			player.StatBase[ST_FACTION] =
			player.StatBase[ST_FR_LEADERSHIP] =
			player.KarmaBase[KARMA_MAN_MORDINO] = 
			
			player.KarmaBase[KARMA_MAN_SALVATORE] = 
			player.KarmaBase[KARMA_MAN_BISHOP] = 
			player.KarmaBase[KARMA_MAN_WRIGHT] = 0;
			
			player.RunClientScript("client_fraction_gui@__Scr_ReInit", 0,0,0,null,null);
			return true;
		}
		#ifdef __FO_MK2
		else
		{
			OffClient@ off=this.GetOffClient(id);
			if( off !is null )
			{
				off.SetParam(ST_FACTION, 0);
				off.SetParam(ST_FR_LEADERSHIP, 0);
				off.SetParam(KARMA_MAN_MORDINO, 0);
				off.SetParam(KARMA_MAN_SALVATORE, 0);
				off.SetParam(KARMA_MAN_BISHOP, 0);
				off.SetParam(KARMA_MAN_WRIGHT, 0);
				return true;
			}
		}
		#endif
		return false;
	}
	
	#ifdef __FO_MK2
	OffClient@ GetOffClient(uint id)
	{
		return GetOffClient( GetPlayerName(id) );
	}

	OffClient@ GetOffClient(string@ name)
	{
		if( name is null ) return null;
		if( ::GetPlayer(name) is null ) return null;
		OffClient client;
		uint id=GetPlayerId(name);
		if(id>0)
		{
			client.Id=id;
			client.Name=name;
			return client;
		}
		return null;
	}
	#endif
}

#ifdef __MODULE_Fractions__
void SetKnownLoc(uint playerId, uint locId)	{ NullFraction.SetKnownLoc( playerId, locId ); }
void UnsetKnownLoc(uint playerId, uint locId){ NullFraction.UnsetKnownLoc( playerId, locId ); }
void Dismiss(uint id)							{ NullFraction.Dismiss( id ); }

Fraction _NullFraction( );
Fraction @get_NullFraction( ){ return _NullFraction; }

#endif // __MODULE_Fractions__
#ifndef __MODULE_Fractions__
# define	FRACTION_MODULE	"Mk2"

import void SetKnownLoc( uint playerId, uint locId ) from FRACTION_MODULE;
import void UnsetKnownLoc( uint playerId, uint locId ) from FRACTION_MODULE;
import void Dismiss( uint id ) from FRACTION_MODULE;
import Fraction @get_NullFraction( ) from FRACTION_MODULE;
#endif // !__MODULE_Fractions__