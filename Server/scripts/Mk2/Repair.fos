// FOS Server
// Author: cvet
// Repair


enum Define
{
	TimeoutMlt = 1,
	DefaultMaxRepairCount = 300
}

bool TryRepairItem( Critter& cr, Item& item ) // Export
{
    if( !item.IsDeteriorable() )
        return true;
    if( item.Deterioration < 1 )
        return false;

    if( cr.Timeout[ TO_BATTLE ] > 0 )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_TIMEOUT_BATTLE_WAIT );
        return true;
    }

    if( cr.Timeout[ TO_SK_REPAIR ] > int( REAL_MINUTE( 30 ) ) )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_WEARINESS );
        return true;
    }

    cr.TimeoutBase[ TO_SK_REPAIR ] = cr.Timeout[ TO_SK_REPAIR ] + __FullSecond + REAL_SECOND( 30 );

    // Ремонт
    const int tmpDet = item.Deterioration;    // Предыдущее состояние износа

    // Восстановлению не подлежит
    if( FLAG( item.BrokenFlags, BI_ETERNAL ) || FLAG( item.BrokenFlags, BI_NOTRESC ) || item.GetProtoId() == Content::Item::MULTI_TOOL || item.GetProtoId() == Content::Item::SUPER_TOOL_KIT ||
        item.GetProtoId() == Content::Item::SEWING_KIT || item.GetProtoId() == Content::Item::OIL_CAN_TRUE )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_NO_RESC );
        return true;
    }

    uint maxRepairCount = ( item.Proto.MaxRepairCount > 0 ) ? ( ( item.Proto.MaxRepairCount + 10 ) * 10 ) : Repair::Define::DefaultMaxRepairCount;

    // Больше ремонтировать этот предмет не выйдет (максимум ремонтов)
    if( item.RadioChannel >= maxRepairCount )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_MAX_REPAIR_COUNT );
        return true;
    }

    // Repair
    int              repair = cr.Skill[ SK_REPAIR ];
    uint8            mode = 0;
    const ProtoItem@ bonusProto = cr.GetSlotProto( SLOT_BONUS, mode );
    const uint16     activePid = cr.GetSlotProto( SLOT_HAND1, mode ).ProtoId,
                     bonusPid = valid( bonusProto ) ? bonusProto.ProtoId : 0;


    if( activePid == Content::Item::SUPER_TOOL_KIT || bonusPid == Content::Item::SUPER_TOOL_KIT )
    {
        repair += 50;
        if( Random( 0, 30 ) == 0 )
            cr.DeleteItem( Content::Item::SUPER_TOOL_KIT, 1 );
    }
    else if( activePid == Content::Item::MULTI_TOOL || bonusPid == Content::Item::MULTI_TOOL )
    {
        repair += 25;
        if( Random( 0, 30 ) == 0 )
            cr.DeleteItem( Content::Item::MULTI_TOOL, 1 );
    }

	Item@ repair_item = item;
	bool isStack = false;
	if( repair_item.GetCount() != 1 )
	{
		@repair_item = repair_item.Split( 1 );
		isStack = true;
	}
    // Repair
    if( FLAG( repair_item.BrokenFlags, BI_BROKEN ) )
    {
        if( FLAG( repair_item.BrokenFlags, BI_HIGHBROKEN ) )
            repair -= 100;                               // было 150
        else if( FLAG( repair_item.BrokenFlags, BI_NORMBROKEN ) )
            repair -= 75;                                // было 100
        else if( FLAG( repair_item.BrokenFlags, BI_LOWBROKEN ) )
            repair -= 25;                                // было 50

        repair -= repair_item.BrokenCount * 50 / MAX_BROKENS;   // было 100
        repair = CLAMP( repair, 6, 95 );
        // cr.Say(SAY_NETMSG, "repair="+repair+"\n MAX_BROKENS="+MAX_BROKENS+"\n BrokenCount="+item.BrokenCount+"\n RadioChannel="+item.RadioChannel);

        if( repair >= Random( 1, 100 ) )
        {

            if( FLAG( repair_item.BrokenFlags, BI_HIGHBROKEN ) )
                cr.StatBase[ ST_EXPERIENCE ] += 420;
            else if( FLAG( repair_item.BrokenFlags, BI_NORMBROKEN ) )
                cr.StatBase[ ST_EXPERIENCE ] += 360;
            else if( FLAG( repair_item.BrokenFlags, BI_LOWBROKEN ) )
                cr.StatBase[ ST_EXPERIENCE ] += 280;

            repair_item.RadioChannel++;
            repair_item.Deterioration = MAX_DETERIORATION - 100;         // Устанавливаем 99% износа
            UNSETFLAG( repair_item.BrokenFlags, BI_BROKEN );
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_REPAIR_SUCC );
        }
        else
        {
            repair_item.BrokenCount++;
            if( repair_item.BrokenCount >= MAX_BROKENS )
                SETFLAG( repair_item.BrokenFlags, BI_NOTRESC );
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_REPAIR_FAIL );
        }
    }
    // Service
    else
    {
        if( FLAG( repair_item.BrokenFlags, BI_SERVICE ) )
            repair -= 25;
        repair -= repair_item.BrokenCount * 50 / MAX_BROKENS;
        repair = CLAMP( repair, 6, 95 );

        if( repair >= Random( 1, 100 ) )
        {
            SETFLAG( repair_item.BrokenFlags, BI_SERVICE );

            if( uint( repair_item.Deterioration * 0.01 ) > maxRepairCount - repair_item.RadioChannel )
            {
                repair_item.Deterioration = repair_item.Deterioration - 100 * ( maxRepairCount - repair_item.RadioChannel );
                repair_item.RadioChannel = maxRepairCount;
            }
            else
            {
                repair_item.RadioChannel += uint( repair_item.Deterioration * 0.01 );
                repair_item.Deterioration = 0;
            }

            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_SERVICE_SUCC );
            cr.StatBase[ ST_EXPERIENCE ] += ::Random( 50, 60 ) + repair_item.BrokenCount * 25;
        }
        else
        {
            DeteriorateItem( cr, repair_item, MAX_DETERIORATION / ::Random( 20, 25 ) );
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_SERVICE_FAIL );
        }
    }

    // Таймаут
    if( int( ( tmpDet - repair_item.Deterioration ) * 0.01 ) > 0 )
        cr.TimeoutBase[ TO_SK_REPAIR ] = int( cr.Timeout[ TO_SK_REPAIR ] + ::__FullSecond + REAL_SECOND( Repair::Define::TimeoutMlt ) * ( tmpDet - repair_item.Deterioration ) * 0.01 );
	if( isStack )
		repair_item.StackUpdate();
	else
		repair_item.Update();

    return true;
}

void drop( ::Critter& cr, int , int, int )
{
    cr.TimeoutBase[ TO_SK_REPAIR ] = ::__FullSecond + REAL_SECOND( 1 );
}

void DeteriorateTools( ::Critter& cr, ::Item& item, int deteriorationCount ) // Export
{}

void DeteriorateItem( ::Critter& cr, ::Item& item, int deteriorationCount )  // Export
{
    if( deteriorationCount <= 0 || ! item.IsDeteriorable() || FLAG( item.BrokenFlags, BI_ETERNAL ) || FLAG( item.BrokenFlags, BI_BROKEN ) )
        return;

    const int DeteriorateResist = item.ArmorBonus_DeteriorateResist;
    item.Deterioration += deteriorationCount / ( DeteriorateResist > 0 ? ( DeteriorateResist + 1 ) : 1 );
    if( item.Deterioration >= MAX_DETERIORATION )
    {
        item.Deterioration = MAX_DETERIORATION;
        item.BrokenCount++;
        // SetItemCost(item);
        int brokenLvl = ::Random( 0, item.BrokenCount / int( MAX_BROKENS * 0.25 ) );

        if( item.BrokenCount >= MAX_BROKENS )
            SETFLAG( item.BrokenFlags, BI_NOTRESC );
        if( brokenLvl > 1 )
            SETFLAG( item.BrokenFlags, BI_HIGHBROKEN );
        else if( brokenLvl == 1 )
            SETFLAG( item.BrokenFlags, BI_NORMBROKEN );
        else
            SETFLAG( item.BrokenFlags, BI_LOWBROKEN );
        if( item.GetType() == ITEM_TYPE_WEAPON )
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_WEAPON_BROKEN );
        else if( item.GetType() == ITEM_TYPE_ARMOR )
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_ARMOR_BROKEN );
        else
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_ITEM_BROKEN );
    }

    item.Update();
}

void SetDeterioration( ::Item& item, int deteriorationProcent ) // Export
{
    if( ! item.IsDeteriorable() )
        return;
    UNSETFLAG( item.BrokenFlags, BI_BROKEN );
    deteriorationProcent = CLAMP( deteriorationProcent, 0, 100 );
    item.Deterioration = uint( MAX_DETERIORATION * deteriorationProcent * 0.01 );
    item.BrokenCount = uint( MAX_BROKENS * deteriorationProcent * 0.01 );
    if( deteriorationProcent == 100 )
        SETFLAG( item.BrokenFlags, BI_BROKEN );
    item.Update();
}

// debug
// ~run Mk2 Repair::SetDetArmor 0 50 50
void SetDetArmor( ::Critter& cr, int pid, int a, int b )
{
    ::Item@ armor = cr.AddItem( pid, 1 );
    armor.Deterioration = a * 100;
    armor.RadioChannel = b;
}

int GetDeteriorationProcent( ::Item& item ) // Export
{
    if( ! item.IsDeteriorable() )
        return 0;
    if( FLAG( item.BrokenFlags, BI_BROKEN ) )
        return 100;
    int value = item.Deterioration * 100 / MAX_DETERIORATION;
    return CLAMP( value, 0, 100 );
}
