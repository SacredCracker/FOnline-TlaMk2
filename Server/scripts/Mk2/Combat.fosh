// FOS Common Sort -2 
#ifndef _COMBAT_H_
#define _COMBAT_H_

// Critical hit/miss flags
#define HF_KNOCKOUT                     (0x00000001)
#define HF_KNOCKDOWN                    (0x00000002)
#define HF_CRIPPLED_LEFT_LEG            (0x00000004)
#define HF_CRIPPLED_RIGHT_LEG           (0x00000008)
#define HF_CRIPPLED_LEFT_ARM            (0x00000010)
#define HF_CRIPPLED_RIGHT_ARM           (0x00000020)
#define HF_BLINDED                      (0x00000040)
#define HF_DEATH                        (0x00000080)
#define HF_ON_FIRE                      (0x00000400)
#define HF_BYPASS_ARMOR                 (0x00000800)
#define HF_DROPPED_WEAPON               (0x00004000)
#define HF_LOST_NEXT_TURN               (0x00008000)
#define HF_RANDOM                       (0x00200000)

#define MF_KNOCKED_DOWN                 (0x00000002)
#define MF_ON_FIRE                      (0x00000400)
#define MF_WEAPON_EXPLODED              (0x00001000)
#define MF_WEAPON_DESTROYED             (0x00002000)
#define MF_WEAPON_DROPPED               (0x00004000)
#define MF_LOST_NEXT_TURN               (0x00008000)
#define MF_HIT_SELF                     (0x00010000)
#define MF_LOST_REST_OF_AMMO            (0x00020000)
#define MF_FIRED_DUD_SHOT               (0x00040000)
#define MF_HURT_SELF                    (0x00080000)
#define MF_HIT_RANDOMLY                 (0x00100000)
#define MF_CRIPPLED_RANDOM_LIMB         (0x00200000)
#define MF_WAS_KILLED                   (0x10000000)

#ifdef __SERVER

#define PTR_NULL                    ( -1 )

// message specs
// note: CMSG_AIMED_HIT must be CMSG_HIT+1, CMSG_CRIT_AIMED_HIT must be CMSG_CRIT_HIT+1
#define CMSG_MISS                   ( 1 )  // length 2: 1   WHO_ID
#define CMSG_CRIT_MISS              ( 2 )  // length 3: 2   WHO_ID  EFF
#define CMSG_CRIT_MISS_DAMAGE       ( 3 )  // length 4: 3   WHO_ID  EFF     DAMAGE
#define CMSG_HIT                    ( 4 )  // length 3: 4   WHO_ID  DAMAGE
#define CMSG_AIMED_HIT              ( 5 )  // length 4: 5   WHO_ID  LOC     DAMAGE
#define CMSG_CRIT_HIT               ( 6 )  // length 5: 6   WHO_ID  DAMAGE  EFF     MESSAGE
#define CMSG_CRIT_AIMED_HIT         ( 7 )  // length 6: 7   WHO_ID  LOC     DAMAGE  EFF      MESSAGE
#define CMSG_HIT_DEAD               ( 8 )  // length 3: 8   WHO_ID  DAMAGE
#define CMSG_AIMED_HIT_DEAD         ( 9 )  // length 4: 9   WHO_ID  LOC     DAMAGE
#define CMSG_CRIT_HIT_DEAD          ( 10 ) // length 4: 10  WHO_ID  DAMAGE  MESSAGE
#define CMSG_CRIT_AIMED_HIT_DEAD    ( 11 ) // length 5: 11  WHO_ID  LOC     DAMAGE  MESSAGE
#define CMSG_OOPS                   ( 12 ) // length 3: 12  WH1_ID  WH2_ID
#define CMSG_HIT_RANDOMLY           ( 13 ) // length 2: 13  WHO_ID
#define CMSG_MISS_LEON              ( 14 ) // length 2: 14  WHO_ID
#define CMSG_MISS_AC                ( 15 ) // length 2: 15  WHO_ID
#define CMSG_COMBUST                ( 16 ) // length 2: 16  WHO_ID
#define FlushResults                # (tree)  runTree( tree, 0 )

shared class CombatRes
{
    uint[] Res;
    Critter@ Crit;
    int      Left;
    int      Right;

    CombatRes()
    {
        Res.resize( 1 );
        Res[ 0 ] = 1; // This will hold length of the message for client (so it can verify the length)
        Left = PTR_NULL;
        Right = PTR_NULL;
    }
};

shared void AddEff( Critter@ crit, uint[] eff, CombatRes[]& combatResults )
{
    int ptr = 0;

    // find or create the node:
    if( combatResults.length() == 0 )
    {
        combatResults.resize( 1 );
        @combatResults[ 0 ].Crit = crit;
    }

    while( combatResults[ ptr ].Crit.Id != crit.Id )
    {
        if( crit.Id < combatResults[ ptr ].Crit.Id )
        {
            if( combatResults[ ptr ].Left != PTR_NULL )
                ptr = combatResults[ ptr ].Left;
            else
            {
                uint last = combatResults.length();
                combatResults.resize( last + 1 );
                combatResults[ ptr ].Left = last;
                ptr = last;
                @combatResults[ last ].Crit = crit;
            }
        }
        else
        {
            if( combatResults[ ptr ].Right != PTR_NULL )
                ptr = combatResults[ ptr ].Right;
            else
            {
                uint last = combatResults.length();
                combatResults.resize( last + 1 );
                combatResults[ ptr ].Right = last;
                ptr = last;
                @combatResults[ last ].Crit = crit;
            }
        }
    }

    // add the effect:
    uint len = eff.length();
    combatResults[ ptr ].Res.resize( combatResults[ ptr ].Res[ 0 ] + len );
    for( uint i = 0; i < len; i++ )
        combatResults[ ptr ].Res[ i + combatResults[ ptr ].Res[ 0 ] ] = eff[ i ];

    combatResults[ ptr ].Res[ 0 ] += len;
}

shared void runTree( CombatRes[]& combatResults, int ptr )
{
    if( ptr == 0 )
        if( combatResults.length() == 0 )
            return;
    /*if (@combatResults[ptr].Crit==null)
       {
       Log("tree fail, ptr="+ptr+" in "+where);
       return false;
       }*/
    combatResults[ ptr ].Crit.SendCombatResult( combatResults[ ptr ].Res );

    /*if(combatResults[ptr].Left  !=PTR_NULL)
       if (!runTree(combatResults, combatResults[ptr].Left, where)) return false;
       if(combatResults[ptr].Right !=PTR_NULL)
       if (!runTree(combatResults, combatResults[ptr].Right, where)) return false;*/
    if( combatResults[ ptr ].Left  != PTR_NULL )
        runTree( combatResults, combatResults[ ptr ].Left );
    if( combatResults[ ptr ].Right != PTR_NULL )
        runTree( combatResults, combatResults[ ptr ].Right );
}

shared class LeonHash
{
	LeonHash( Critter& critter, uint distance )
	{
		fill( critter, distance );
	}
	
	void fill_dodge( int chance )
	{
		if( chance == 0 )
			return;
		++dodgecount;
		dodge.insertLast( chance );
	}
	
	void fill( Critter& critter, uint distance )
	{
		if( critter.IsKnockout() )
		{
			ischeck = false;
			return;
		}
		
		fill_dodge( critter.Perk[ PE_DODGER ] * 8 );
		fill_dodge( critter.Perk[ PE_CHIP_EVADE ] * 4 );
	
		lionSkill = critter.Skill[ SK_LIONHEART ] - 100;
		if( lionSkill < 5 )
		{
			lionSkill = 0;
			return;
		}
		
		int bonus = 0;
		if( critter.Perk[ PE_HTH_EVADE ] > 0 )
		{
			bool armed = false;
			Item@[] hands;
			critter.GetItems( SLOT_HAND1, hands );
			critter.GetItems( SLOT_HAND2, hands );
			for( uint n = 0; n < hands.length(); n++ )
			{
				Item@ hand = hands[ n ];
				if( validEngineObject( hand ) && _WeaponSkill( hand.Proto, _WeaponModeUse( hand.Mode ) ) != SK_UNARMED )
				{
					armed = true;
					break;
				}
			}
			if( !armed )
				bonus += critter.Perk[ PE_HTH_EVADE ] * critter.Param[ ST_CURRENT_AP ];
		}
		
		lionSkill = bonus + int( lionSkill * 0.16 );
		if( distance < 3 ) lionSkill /= 3;
	}
	
	bool IsDodge()
	{
		for( uint i = 0; i < dodgecount; i++ )
			if( dodge[i] > Random( 1, 100 ) )
				return true;
		return false;
	}
	
	bool Is( )
	{
		if( !ischeck )
			return false;
	
		if( IsDodge( ) )
			return true;
		
		return lionSkill > 0 && Random( 0, 99 ) < lionSkill;
	}
	
	uint dodgecount = 0;
	int[]@ dodge = int[](0);
	int lionSkill = 0;
	bool ischeck = true;
}

shared enum TargetDataType
{
	none,
	critter,
	hex
}

shared class TargetDataCritter : TargetData
{
	Critter@ Critter;
    Item@ Armor;
	
	TargetDataCritter( Critter& critter )
	{
		@Critter = critter;
		@Armor = _CritGetItemArmor( Critter );
		Type = TargetDataType::critter;
	}
	
	Critter@ logic_GetTargetCritter()
	{
		return Critter;
	}
	
	uint16 HexX{ get override{ return Critter.HexX; } }
	uint16 HexY{ get override{ return Critter.HexY; } }
}

shared class TargetDataHex : TargetData
{
	uint16 X;
	uint16 Y;
	
	uint16 HexX{ get override{ return X; } }
	uint16 HexY{ get override{ return Y; } }
}

shared class TargetData
{
    TargetData@ get_Real()
	{
		if( IsChange() )
			return Expected.Real;
		return this;
	}
	
	uint16 HexX{ get{ return 0; } }
	uint16 HexY{ get{ return 0; } }

    TargetData@ Expected;

	TargetDataType Type;
	
	bool IsChange( )
	{
		return Expected !is null;
	}
	
	Critter@ get_TargetCritter( uint index )
	{
		if( index == uint( -1 ) )
			return Real.logic_GetTargetCritter();
		else if( index == 0 )
			return logic_GetTargetCritter();
		else
			return Expected.TargetCritter[--index];
	}
	
	Critter@ logic_GetTargetCritter()
	{
		return null;
	}
	
	void Add( TargetData@ data )
	{
		@Real.Expected = data;
	}
}

mixin class CombatProccessTargetData
{
    Item@ ArmorTarget;
	
	TargetData@ Target;
	
    int      TargetDT;
    int      TargetDR;
    uint     TargetId;
	
	void ClearTargetData( )
	{
		@ArmorTarget = null;
		@Target = null;
		TargetDT = 0;
		TargetDR = 0;
		TargetId = 0;
	}
	
	bool IsChangeTarget( )
	{
		return Target.IsChange();
	}
	
	Critter@ get_RealTarget()
	{
		return Target.TargetCritter[-1];
	}
	
	bool IsTargetCritter()
	{
		if( Target is null )
			return false;
		if( Target.Type != TargetDataType::critter )
			return false;
		return true;
	}
	
	bool IsTargetHex()
	{
		if( Target is null )
			return false;
		if( Target.Type != TargetDataType::hex )
			return false;
		return true;
	}

	void ChangeTarget( Critter& critter )
	{
		TargetDataCritter new( critter );
		ChangeTarget( new );
	}
	
	void ChangeTarget( uint16 hexx, uint16 hexy )
	{
		TargetDataHex new( );
		new.X = hexx;
		new.Y = hexy;
		new.Type = TargetDataType::hex;
		ChangeTarget( new );
	}
	
	void ChangeTarget( TargetData@ new )
	{
		if( Target is null )
			@Target = new;
		else
			Target.Add( new );		
	}
	
	bool IsDamage( Critter& target )
	{	
		if( target.IsDead() || !( validEngineObject( Map ) ) )
			return false;

		if( !__NewbieLocationIsPvp && validEngineObject( Attacker ) && Attacker.IsPlayer() && target.IsPlayer() && Map.GetLocation().GetProtoId() == LOCATION_NewbieLocation )
		{
			Attacker.Say( SAY_NETMSG, "Oh-oh! Not this time, my friend!" );
			return false; // НоПвп в Нубке.
		}
	
		return true;
	}
}

mixin class CombatProccessCallbacks
{
	void ToHitCalculated( Critter@ target, uint16 targethx, uint16 targethy, int aim ) // override
	{
	
	}
	
	int GetResult()
	{
		return 0;
	}
	
	void SetCombatTimeout( Critter& critter ){}
}

shared class CombatProccess : Mk2::CombatProccessPacket, CombatProccessTargetData, CombatProccessCallbacks, EventDataPacket, CombatWeaponData
{
    CombatProccess()
	{
		AllDamage.resize( DAMAGE_TYPE_COUNT );
		@Context = null;
		Clear();		
	}

	uint16 TargetHx
	{
		get
		{
			return Target.Real.HexX;
		}
	}

	uint16 TargetHy
	{
		get
		{
			return Target.Real.HexY;
		}
	}
	
	void Clear()
	{
		DropDamage();
		ClearTargetData();
		
		TypeDamage = -1;

		IsCritical = false;
		@RealWeapon = null;
		@Attacker = null;
		@Ammo = null;

		Hx = 0;
		Hy = 0;
		Aim = HIT_LOCATION_UNCALLED;
		BloodyMess = false;
		CombatMessage = false;
		WeaponSubtype = 0;
		DmgMin = 0;
		DmgMax = 0;
		BonusDmg = 0;
		DmgMul = 1;
		DRMod = 0;
		TDMod = 1;
		DMMod = 1;
		DDMod = 1;
		AmmoPid = 0;
		WeaponPid = 0;

		TypeAttack = 0;
		TargetHit = false;
		ForceFlags = 0;
		ShowHitAnimForce = false;
		WeaponMode = 0;
		WeaponUse = 0;
		
		UseHex = false;
		
		@Results = CombatRes[]();
		@GetHitAim = null;
		
		@Weapon = null;
		WeaponSkill = 0;
		WeaponAmmoRound = 0;
		
		CriticalChance = 0;
		
		IsHit = false;
		IsRandomHit = false;
		IsJinked = false;
		
		CombatMessage = true;
		
		@Map = null;
		AttackDistantion = 0;
		
		DistanceMod1 = 2;
		DistanceMod2 = 0;
		
		CriticalFailFlags = 0;
		
		IsAim = false;
		
		@AttackPerks = int[]();
		@TargetPerks = int[]();
		
		AttackerSkill = 0;
		
		@WeaponPacket = null;
	}
	
	int GetWeaponSubType( )
	{
		return GetWeaponSubType( WeaponSkill );
	}
	
	bool IsSoundLess( )
	{
		return IsAttackPerk( WEAPON_PERK_SOUNDLESS ) && Distantion > 5;
	}
	
	bool IsSilentDeath( Critter& target )
	{
		if( !ScoreUnarmed )
			return false;
		if( Attacker.Perk[ PE_SILENT_DEATH ] == 0 )
			return false;
		return ( Attacker.Dir == target.Dir || ( ( Attacker.Dir + 1 ) % 6 ) == target.Dir || ( ( Attacker.Dir + 5 ) % 6 ) == target.Dir );
	}
	
	bool IsSilentAtack( Critter& target )
	{
		if( !IsTargetCritter() )
			return false;
		if( IsSoundLess() )
			return true;
		if( IsSilentDeath( target ) )
			return true;
		return false;
	}
	
	void UnSneak( Critter& critter )
	{
		if( critter.IsNpc() || critter.GetAccess() != ACCESS_ADMIN )
			critter.ModeBase[ MODE_HIDE ] = 0;
	}
    
	bool IsAttackPerk( int number )
	{
		return AttackPerks.find( number ) != -1;
	}
	
	void AddAttackPerk( int perk )
	{
		if( perk != 0 && perk != -1 )
			AttackPerks.insertLast( perk );
	}
    
	bool IsTargetPerk( int number )
	{
		return TargetPerks.find( number ) != -1;
	}
	
	void AddTargetPerk( int perk )
	{
		if( perk != 0 && perk != -1 )
			TargetPerks.insertLast( perk );
	}
	
    int get_TotalDamage()
	{
		int allDamage = 0;
		for( uint i = 0; i < DAMAGE_TYPE_COUNT; i++ )
			allDamage += AllDamage[ i ];
		return allDamage;
	}
	
	void DropDamage()
	{
		for( uint i = 0; i < DAMAGE_TYPE_COUNT; i++ )
			AllDamage[i] = 0;
	}
	
    int get_Damage()
	{
		if( TypeDamage >= DAMAGE_TYPE_COUNT || TypeDamage < 0 )
			return get_TotalDamage();
		return AllDamage[ TypeDamage ];
	}
	
    void set_Damage( int value )
	{
		if( TypeDamage >= DAMAGE_TYPE_COUNT || TypeDamage < 0 )
		{
			Log( "Error! Damage Unknown. " + TypeDamage );
			return;
		}

		AllDamage[ TypeDamage ] = value;
	}
	
    int  get_Damage( uint idx )
	{
		if( idx >= DAMAGE_TYPE_COUNT )
			return get_TotalDamage();
		return AllDamage[ idx ];
	}
	
    void set_Damage( uint idx, int value )
	{
		if( idx >= DAMAGE_TYPE_COUNT )
        {
			Log( "Error! Damage Unknown. " + idx );
			return;
		}
		AllDamage[ idx ] = value;
	}
	
	void startLeon( Critter& target, CombatRes[]& results )
	{
		target.Wait( 50 );
		target.Action( ACTION_DODGE, 0, null );

		if( target.Perk[ PE_REGROUPING ] > 0 && Random( 1, 100 ) <= 25 )
		{
			target.StatBase[ ST_CURRENT_AP ] = target.Stat[ ST_ACTION_POINTS ] * 100;
		}

		NotifyMissLeon( target, results );
	}

	bool IsLeon( Critter& target, const uint& in dist )
	{
		LeonHash hash( target, dist );
		return hash.Is();
	}
	
	uint get_Distantion(  )
	{
		return GetDistantion( Hx, Hy, TargetHx, TargetHy );
	}
	
	int GetWeaponMaxDistance()
	{
		if( WeaponSkill == SK_THROWING )
			return MIN( int( _WeaponMaxDist( Weapon, WeaponUse ) ), 3 * MIN( 10, ( Attacker.Stat[ ST_STRENGTH ] + 2 * Attacker.Perk[ PE_HEAVE_HO ] ) ) );
		return _WeaponMaxDist( Weapon, WeaponUse );
	}
	
	void UpdateTypeDamage( )
	{
		if( Ammo is null || Ammo.Ammo_DmgType == 0 )
			TypeDamage = _WeaponDmgType( Weapon, WeaponUse );
		else
			TypeDamage =  Ammo.Ammo_DmgType;
	}
	
	bool WeaponIsGrenade()
	{
		return WeaponSubtype == WS_THROWING && TypeDamage != DAMAGE_NORMAL;
	}
	
	int GetAim( )
	{
		if( IsBurst )
			return HIT_LOCATION_UNCALLED;
		if( !IsTargetCritter() )
			return HIT_LOCATION_UNCALLED;
		if( _WeaponModeAim( WeaponMode ) == HIT_LOCATION_EYES && ( Attacker.Dir + 3 ) % 6 != RealTarget.Dir )
			return HIT_LOCATION_HEAD;
		return _WeaponModeAim( WeaponMode );
	}
	
	bool IsAttackerEyeDamage()
	{
		return Attacker.Damage[ DAMAGE_EYE ] != 0;
	}
	
	bool GetBloodyMess()
	{
		return Attacker.Trait[ TRAIT_BLOODY_MESS ] != 0;
	}
	
	void Debug( string& log, bool onlyPlayer = true )
	{
		if( Attacker.IsPlayer() )
		{
			ClearLog( "CombatDebug<" + GetPlayerName( Attacker.Id ) + ">: " + log );
			if( Attacker.GetAccess() == ACCESS_ADMIN )
				Attacker.Say( SAY_NETMSG, log );
		}
		else if( !onlyPlayer )
			ClearLog( "CombatDebug<" + Attacker.Id + ">: " + log );
	}
	
	int HitClamp( int hit )
	{
		return CLAMP( hit, GetHitMinBorder( ), GetHitMaxBorder( ) );
	}
	
	int GetHitMaxBorder( )
	{
		return HitMaxBorder - HitPenalty;
	}
	
	int GetHitMinBorder( )
	{
		return HitMinBorder;
	}
	
	bool ScoreUnarmed
	{
		get
		{
			return WeaponSubtype == WS_UNARMED;
		}
	}
	
	void DropWeapon( Critter& critter )
	{
		Item@ realWeaponTarget = _CritGetItemHand( critter );
		if( validEngineObject( realWeaponTarget ) )
		{
			if( FLAG( realWeaponTarget.Flags, ITEM_GAG ) )
				DeleteItem( realWeaponTarget );
			else
			{
				MoveItem( realWeaponTarget, 1, Map, critter.HexX, critter.HexY );
				realWeaponTarget.EventDrop( critter );
				if( critter.IsNpc() )
				{
					NpcPlane@ plane = CreatePlane();
					NpcPlane@[] crPlanes( 0 );
					if( critter.GetPlanes( crPlanes ) > 0 )
						plane.Priority = crPlanes[ 0 ].Priority + 1;
					else
						plane.Priority = 70;
					plane.Type = AI_PLANE_PICK;
					plane.Pick_HexX = realWeaponTarget.HexX;
					plane.Pick_HexY = realWeaponTarget.HexY;
					plane.Pick_Pid = realWeaponTarget.GetProtoId();
					plane.Pick_UseItemId = 0;
					plane.Pick_ToOpen = false;
					plane.Run = true;
					critter.AddPlane( plane );
				}
			}
		}
	}
	
	void ProccessArmorClass( int armorClass, uint& rounds )
	{
		if( Ammo !is null )
			armorClass +=  -Ammo.Ammo_AcMod;
			
		uint countMissAc = 0;
        for( uint i = 0; i < rounds; i++ )
            if( Random( 0, 99 ) < armorClass )
			{
                rounds--;
				i--;
			}
	}
	
	void SetSneakTimeout( Critter& critter )
	{
		if( critter.IsNpc() || critter.GetAccess() != ACCESS_ADMIN )
			critter.TimeoutBase[ TO_SNEAK ] = SNEAK_TIMEOUT( critter );
	}
	
    bool IsBurst 
	{ 
		get
		{
			return _WeaponRound( Weapon, WeaponUse ) > 1 && _WeaponNoBrust( Weapon, WeaponUse ) == 0; 
		} 
	}
	
	void ApplyDamage( Critter& target, bool isCritical = false, bool intentionally = false, uint rounds = uint(-1) )
	{
		
	}

	private int[]@ AttackPerks;
	private int[]@ TargetPerks;

    uint16   WeaponPid;
    uint16   Hx;
    uint16   Hy;

    uint8    Aim;
    uint8    WeaponSubtype;
    uint8    WeaponMode;
    uint8    WeaponUse;

    bool     BloodyMess;
    bool     CombatMessage;
	
    bool     TargetHit;
    bool     ShowHitAnimForce;
    bool     IsCritical;

    int      DmgMin;
    int      DmgMax;
    int      DmgType;
    int      BonusDmg;
    int      DmgMul;
    int      DRMod;
    int      DMMod;
    int      DDMod;
    int      TDMod;
    int      TypeAttack;
    int      TypeDamage;

    int[]      AllDamage;

    uint     ForceFlags;

    Critter@ Attacker;
	int AttackerSkill;
	
	Map@ Map;

    Item@ RealWeapon;
	ProtoItem@ Weapon;
    ProtoItem@ Ammo;
    uint AmmoPid;
	uint WeaponAmmoRound;
	int WeaponSkill;
	
	int CriticalChance;

	bool IsHit;
	bool IsRandomHit;
	bool IsJinked;
	bool IsAim;
	
	bool UseHex;

    CombatRes[]@ Results;
	
	uint AttackDistantion;
	uint CriticalFailFlags;
	
	int DistanceMod1;
	int DistanceMod2;
	
	int Hit;
	int HitPenalty;
	int HitResult;
	
	int HitMaxBorder;
	int HitMinBorder;
	
	float HitModule;
	
	GetHitAimFuncdef@ GetHitAim;
	
	CombatProccessContext@ Context;
	CombatWeaponPacket@ WeaponPacket;
}

shared class CombatAlgoritm : CombatAlgoritmPacket
{
	void Proccess( ){}
	CombatProccess@ proccess;
}

shared void NotifyOops( Critter& cr, Critter& t1, Critter@ t2, CombatRes[]& results )
{
    if( !validEngineObject( t2 ) )
    {
        uint[] allEff = { CMSG_HIT_RANDOMLY, cr.Id };
        Critter@[] him = { @cr },
        crits;
        for( int i = 0, iMax = cr.GetMap().GetCrittersSeeing( him, true, FIND_ALL | FIND_ONLY_PLAYERS, crits ); i < iMax; i++ )
            AddEff( crits[ i ], allEff, results );
    }
    else
    {
        uint[] allEff = { CMSG_OOPS, t1.Id, t2.Id };
        Critter@[] them = { @t1, @t2 },
        crits;
        for( int i = 0, iMax = t1.GetMap().GetCrittersSeeing( them, true, FIND_ALL | FIND_ONLY_PLAYERS, crits ); i < iMax; i++ )
            AddEff( crits[ i ], allEff, results );
    }
}

shared void NotifyMiss( Critter& cr, CombatRes[]& results )
{
    uint[] allEff = { CMSG_MISS, cr.Id };
    Critter@[] crits;
    cr.GetCritters( true, FIND_ALL | FIND_ONLY_PLAYERS, crits );
    if( cr.IsPlayer() )
        crits.insertLast( @cr );
    for( int i = 0, iMax = crits.length(); i < iMax; i++ )
        AddEff( crits[ i ], allEff, results );
}

shared void NotifyMissLeon( Critter& cr, CombatRes[]& results )
{
    uint[] allEff = { CMSG_MISS_LEON, cr.Id };
    Critter@[] crits;
    cr.GetCritters( true, FIND_ALL | FIND_ONLY_PLAYERS, crits );
    if( cr.IsPlayer() )
        crits.insertLast( @cr );
    for( int i = 0, iMax = crits.length(); i < iMax; i++ )
        AddEff( crits[ i ], allEff, results );
}

shared void NotifyMissAc( Critter& cr, CombatRes[]& results )
{
    uint[] allEff = { CMSG_MISS_AC, cr.Id };
    Critter@[] crits;
    cr.GetCritters( true, FIND_ALL | FIND_ONLY_PLAYERS, crits );
    if( cr.IsPlayer() )
        crits.insertLast( @cr );
    for( int i = 0, iMax = crits.length(); i < iMax; i++ )
        AddEff( crits[ i ], allEff, results );
}

#endif

#ifdef __COMBAT_MAIN
const float get_DeadZone_PenaltySecondTargets(){ return _DeadZone_PenaltySecondTargets; };
const float get_DeadZone_PenaltyEffectTargets(){ return _DeadZone_PenaltyEffectTargets; };
const float get_DeadZone_MaxHitModule(){ return _DeadZone_MaxHitModule; };
#endif

#ifndef __COMBAT_MAIN
import const float get_DeadZone_PenaltySecondTargets() from "combat";
import const float get_DeadZone_PenaltyEffectTargets() from "combat";
import const float get_DeadZone_MaxHitModule() from "combat";
#endif



mixin class CombatWeaponData
{
	int GetWeaponSubType( int weaponSkill )
	{
		switch( weaponSkill )
		{
			case SK_DOCTOR:
			case SK_SMALL_GUNS:
			case SK_BIG_GUNS:
			case SK_ENERGY_WEAPONS:
				return WS_GUN;
				
			case SK_THROWING:
				return WS_THROWING;
				
			default: 
				return WS_UNARMED;
		}
		return 0;
	}
}

#endif // _COMBAT_H_

