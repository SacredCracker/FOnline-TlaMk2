// FOS Server
// Дефолтный Descriptor для криттера

class CritterDescriptor : Mk2::Descriptor, Mk2::CritterPacket, Mk2::CombatTargetPacket, Ai::LifeObject, Dialog::Master
{
	CritterDescriptor()
	{
		@ RealCr = null;
	
		@ EventsStealing = @::array<Mk2::FuncdefEventCritterStealing@>();
		
		@ EventsInit = @::array<Mk2::FuncdefEventCritterInit@>();
		@ EventsFinish = @::array<Mk2::FuncdefEventCritterFinish@>();
		@ EventsIdle = @::array<Mk2::FuncdefEventCritterIdle@>();
		@ EventsMoveItem = @::array<Mk2::FuncdefEventCritterMoveItem@>();
		@ EventsAttacked = @::array<Mk2::FuncdefEventCritterAttacked@>();
		@ EventsAttack = @::array<Mk2::FuncdefEventCritterAttack@>();
		@ EventsRespawn = @::array<Mk2::FuncdefEventCritterRespawn@>();
		@ EventsDead = @::array<Mk2::FuncdefEventCritterDead@>();
		
		@ EventsShow = @::array<Mk2::FuncdefEventCritterShow@>();
		@ EventsShowMe = @::array<Mk2::FuncdefEventCritterShowMe@>();
		@ EventsHide = @::array<Mk2::FuncdefEventCritterHide@>();
		@ EventsHideMe = @::array<Mk2::FuncdefEventCritterHideMe@>();
		
		@ EventsMessage = @::array<Mk2::FuncdefEventCritterMessage@>();
		@ EventsSmthMoveItem = @::array<::FuncdefEventCritterSmthMoveItem@>();
		
		CurrentInterlocutorId = 0;
		@ CurrentBranch = null;
		@ ActiveDialog = null;
		@ Answers = null;
		
		CritterBarterId = 0;
	}
	
	const uint get_MasterId( )
	{
		return 0; 
	}
	
	Ai::Attitude@ GetAttitude( Ai::aiobject@ otherObj, Ai::Situation@ situation )
	{
		return null;
	}
	
	uint get_Priority( )
	{
		return PriorityDescriptor;	
	}
	
	bool CritterInit(::Critter& crInit, bool firstTime)
	{
		crInit.RefreshVisible();
		@ RealCr = crInit;
		
		for( uint i = 0, iEnd = EventsInit.length(); i < iEnd; i++ )
		{
			if( !EventsInit[i]( crInit, firstTime ) )
				return false;
		}
		
		//Log( crInit.GlobalIdleNextTick );
		//crInit. = ::Random ( 10, ::__CritterIdleTick );
		
		return true;
	}
	
	bool CritterFinish(::Critter& cr, bool toDelete)
	{		
		for( uint i = 0, iEnd = EventsFinish.length(); i < iEnd; i++ )
		{
			if( !EventsFinish[i]( cr, toDelete ) )
			{
				@RealCr = null;
				return false;
			}
		}
			
		@RealCr = null;
		return true;
	}
	
	bool CritterDead(::Critter@ cr, ::Critter@ killer)
	{
		for( uint i = 0, iEnd = EventsDead.length(); i < iEnd; i++ )
		{
			if( !EventsDead[i]( @cr, @killer ) )
				return false;
		}
		
		return true;
	}
	
	bool CritterRespawn( ::Critter& cr )
	{
		for( uint i = 0, iEnd = EventsRespawn.length(); i < iEnd; i++ )
		{
			if( !EventsRespawn[i]( cr ) )
				return false;
		}
			
		this.AllEventsRun( CTE_REFRESH_SPEED, TIMER_SLOW );
		return true;
	}
	
	bool IsSet( Mk2::Descriptor@ new )
	{
		if ( @new !is null && this.Priority < new.Priority )
		{
			Critter::CritterDescriptor@ critterDescriptor = cast<Critter::CritterDescriptor>(@new);
            if(@critterDescriptor !is null)
			{
				@critterDescriptor.EventsInit = @EventsInit;
				@critterDescriptor.EventsFinish = @EventsFinish;
				@critterDescriptor.EventsIdle = @EventsIdle;
				@critterDescriptor.EventsMoveItem = @EventsMoveItem;
				@critterDescriptor.EventsAttacked = @EventsAttacked;
				@critterDescriptor.EventsAttack = @EventsAttack;
				@critterDescriptor.EventsRespawn = @EventsRespawn;
				@critterDescriptor.EventsDead = @EventsDead;
			
				@critterDescriptor.EventsShow = @EventsShow;
				@critterDescriptor.EventsShowMe = @EventsShowMe;
				@critterDescriptor.EventsHide = @EventsHide;
				@critterDescriptor.EventsHideMe = @EventsHideMe;
			
				@critterDescriptor.EventsMessage = @EventsMessage;
				@critterDescriptor.EventsSmthMoveItem = @EventsSmthMoveItem;
			}
			return true;
		}
		return false;
	}
	
	// Подсчет урона криттеру
	// combatData - данные атаки
	// cr - криттер которому наносится урон
	// damage - урон, не обнуляется для следующей пули.
	// damageMulForCriticals - множитель урона для крита, при крите обнуляется для каждой пули, без крита обнуления не происходит.
	// isCrit - Критический ли урон
	// countBullet - пуля в очереди
	// При возврате не 0, дальнейший урон не обрабатывается, исключение при обрыве некритичной части очереди, критическая продолжит обрабатываться
	
	bool FormatDamage( Mk2::CombatProccessPacket@ combatpacket, int& damage, int& typeDamage, bool& isCrit, uint& damageMulForCriticals, uint& countBullet )
	{
		::CombatProccess@ combatData = cast<::CombatProccess@>(@combatpacket);
		if( @combatData is null )
		{
			Log( "Error cast combatpacket" );
			return false;
		}
		if( RealCr.Mode[MODE_INVULNERABLE] != 0 )
		{
			damage = 0;
			return true;
		}
		if( typeDamage!=DAMAGE_EMP || RealCr.Stat[ST_BODY_TYPE]==BT_ROBOT )
		{
			damage=::Random(combatData.DmgMin,combatData.DmgMax);
			damage*=combatData.DmgMul;
			damage*=damageMulForCriticals;
			if(combatData.DDMod!=0) damage/=isCrit?combatData.DDMod*2:combatData.DDMod; //деление
			damage-=combatData.TargetDT;
			damage-=int(damage*0.01*combatData.TargetDR);
			
			if( validEngineObject(combatData.Attacker) )
			{
				if( combatData.ScoreUnarmed )
				{
					int penaltyAc = MAX(0, int((combatData.Attacker.Skill[SK_UNARMED]-175) * 0.04));
					if( validEngineObject( combatData.RealWeapon ) )
						penaltyAc+= combatData.RealWeapon.Proto.Weapon_IgnoreAC;
					else 
					{
						const ::ProtoItem@ weapon = ::GetProtoItem(combatData.WeaponPid);
						if( @weapon!is null ) penaltyAc+= weapon.Weapon_IgnoreAC;
					}
					int ac = ( RealCr.Stat[ST_ARMOR_CLASS] - penaltyAc ) * 5;
					damage = int( float( damage ) * 0.01 * ( 100 - ac ) );
				}
			}
		}
		return true;
	}
	
	/*
		Вызывается при нанесении урону криттеру
		reason == 1 Урон не нулевой
		reason == 2 Урон нулевой
	*/
	void TakeDamage( Mk2::CombatProccessPacket@ combatpacket, int reason, int& totalDamage )
	{
		::CombatProccess@ combatData = cast<::CombatProccess@>(@combatpacket);
		if( @combatData is null )
		{
			Log( "Error cast combatpacket" );
			return;
		}
		UpgradeItem::CritterDamageData data();
		@data.CombatData = @combatData;
		data.TotalDamage = totalDamage;
		@data.Critter = @RealCr;
	
		bool isDamage = RealCr.Mode[MODE_INVULNERABLE] == 0 && reason == 1;
		if( isDamage ) // Урон не нулевой
		{
			if( validEngineObject(combatData.ArmorTarget) )
			{
				UpgradeItem::UpgradeDescriptor@ upgradeDescriptor = cast< UpgradeItem::UpgradeDescriptor@ >( @combatData.ArmorTarget.ScriptDescriptor );
				if( @upgradeDescriptor !is null )
					isDamage = !upgradeDescriptor.CheckData( data, UpgradeItem::Triggered::CritterDamage );
			}
			
			if(RealCr.IsPlayer()) RealCr.StatBase[ST_DAMAGE_RECEIVED]+=totalDamage;
			if(validEngineObject(combatData.Attacker) && combatData.Attacker.IsPlayer() && RealCr.Id!=combatData.Attacker.Id && totalDamage>0)
				combatData.Attacker.StatBase[ST_DAMAGE_DONE]+=totalDamage;
		
			if( isDamage ) 
			{
				RealCr.StatBase[ST_CURRENT_HP] -= CLAMP( totalDamage, 0, totalDamage ); 
					
				if( combatData.Damage[DAMAGE_FIRE] > 0 )
					Fire::SetInFire(RealCr, combatData.Damage[DAMAGE_FIRE], combatData.Attacker);
				else if(combatData.IsCritical && (combatData.Aim==HIT_LOCATION_UNCALLED || combatData.Aim==HIT_LOCATION_TORSO)
						&& combatData.WeaponSubtype!=WS_UNARMED 
						&& (combatData.WeaponSubtype!=WS_THROWING || combatData.TypeDamage!=DAMAGE_NORMAL))
					Fire::CheckCombustion(RealCr, combatData);
			}
		}
		
		if( combatData.Damage[DAMAGE_EMP] > 0 || combatData.TypeDamage == DAMAGE_EMP  ) // Основной урон эмп, либо вспомогательный урон выше нуля эмп.
		{
			if( validEngineObject( combatData.ArmorTarget ) )
			{
				if( combatData.ArmorTarget.Proto.Emp_SlowEffect > 0 && combatData.ArmorTarget.Proto.Emp_TimeSlow > 0 )
				{
					if( RealCr.AddTimeEvent("Critter::cte_SlowEMP",REAL_SECOND(combatData.ArmorTarget.Proto.Emp_TimeSlow) ,CTE_REFRESH_SPEED,combatData.ArmorTarget.Proto.Emp_SlowEffect, 0, true) )
					{
						RealCr.StatBase[ST_BONUS_WALK_TIME] -= combatData.ArmorTarget.Proto.Emp_SlowEffect;
						RealCr.StatBase[ST_BONUS_RUN_TIME] -= combatData.ArmorTarget.Proto.Emp_SlowEffect*0.5;
					} else Log( "Error slow" );
				}
				
				if(RealCr.Stat[ST_CURRENT_AP] > 0 && combatData.ArmorTarget.Proto.Emp_LostAP >= 1 )
				{
					RealCr.StatBase[ST_CURRENT_AP] -= ::Random( combatData.ArmorTarget.Proto.Emp_LostAP - 1, combatData.ArmorTarget.Proto.Emp_LostAP + 1 ) * 100;
					if( RealCr.Stat[ST_CURRENT_AP] < 0 ) RealCr.StatBase[ST_CURRENT_AP] = 0;
				}
			}
			
			::Item@ targetWeapon = _CritGetItemHand(RealCr);
			if( combatData.IsCritical && validEngineObject( targetWeapon ) && targetWeapon.GetProtoId() >= Content::Item::LASER_PISTOL && targetWeapon.GetProtoId() <= Content::Item::TESLA_PISTOL )
			{
				if(targetWeapon.AmmoCount <= 2 ) targetWeapon.AmmoCount=0;
				else targetWeapon.AmmoCount-=2;
				targetWeapon.Update();
			}
		}
		
		if(validEngineObject( combatData.Attacker ))
		{
			if( !combatData.Attacker.IsDead() && combatData.Attacker.IsNpc())
			{
				::NpcPlane@ curPlane = combatData.Attacker.GetCurPlane();
				uint r0 = RealCr.Id;
				uint r1 = combatData.TotalDamage;
				uint r2 = 0;
				//EventPlaneRun
				if( @curPlane !is null && ::__EventNpcPlaneRun.Raise( combatData.Attacker, curPlane, REASON_ATTACK_IM_DAMAGE, r0, r1, r2) )
				{
					::array<::NpcPlane@> planes;
					uint count=combatData.Attacker.GetPlanes(planes);
					for(uint i=0; i<count; i++)
					{
						if( @curPlane == @planes[i] )
						{
							combatData.Attacker.ErasePlane(i);
							combatData.Attacker.AddPlane(curPlane);
							break;
						}
					}
				}
				else if( @curPlane is null )
				{
					Npc::NpcDescriptor@ descriptor = cast<Npc::NpcDescriptor>(@combatData.Attacker.ScriptDescriptor);
					if( @descriptor !is null ) descriptor.RefreshPriorPlaneAttack( curPlane, RealCr );
				}
			}
		}
	}
	
	void AllEventsRun( int indef, int timerIndex = 0 )
	{
		uint[] index, dur;
		int[] var0, var1;
		for( uint i = 0, iEnd = RealCr.GetTimeEvents( indef, index, dur, var0, var1 ); i < iEnd; i++  )
			RealCr.ChangeTimeEvent ( index[i],0, var0[i], var1[i]) ;
	}
	
	bool CritterAttack( ::Critter@ critter, ::Critter@ target, ::ProtoItem@ weapon, uint8 weaponMode, ::ProtoItem@ ammo )
	{
		for( uint i = 0, iEnd = EventsAttack.length(); i < iEnd; i++ )
		{
			if( !EventsAttack[i]( critter, target, weapon, weaponMode, ammo ) )
				return false;
		}
		return true;
	}
	
	bool CritterAttacked( ::Critter& critter, ::Critter& attacker )
	{
		for( uint i = 0, iEnd = EventsAttacked.length(); i < iEnd; i++ )
		{
			if( !EventsAttacked[i]( critter, attacker ) )
				return false;
		}
		return true;
	}
	
	bool CritterIdle(::Critter& cr)
	{
		for( uint i = 0, iEnd = EventsIdle.length(); i < iEnd; i++ )
		{
			if( !EventsIdle[i]( cr ) )
				return false;
		}
		
		return true;
	}
	
	::string@ get_Name( )
	{
		return "CritterDescriptor";
	}
	
	bool CritterShow( ::Critter& critter, ::Critter& opponent )
	{
		for( uint i = 0, iEnd = EventsShow.length(); i < iEnd; i++ )
			if( !EventsShow[i]( critter, opponent ) )
				return false;
		return true;
	}
	
	bool CritterShowMe( ::Critter& critter, ::Critter& opponent )
	{
		for( uint i = 0, iEnd = EventsShowMe.length(); i < iEnd; i++ )
			if( !EventsShowMe[i]( critter, opponent ) )
				return false;
		
		return true;
	}
	
	bool CritterHide( ::Critter& critter, ::Critter& opponent )
	{
		for( uint i = 0, iEnd = EventsHide.length(); i < iEnd; i++ )
		{
			if( !EventsHide[i]( critter, opponent ) )
				return false;
		}
		return true;
	}
	
	bool CritterHideMe( ::Critter& critter, ::Critter& opponent )
	{
		for( uint i = 0, iEnd = EventsHideMe.length(); i < iEnd; i++ )
		{
			if( !EventsHideMe[i]( critter, opponent ) )
				return false;
		}
		return true;	
	}
	
	bool Message( ::Critter& critter, Mk2::MessagePacket@ message )
	{
		for( uint i = 0, iEnd = EventsMessage.length(); i < iEnd; i++ )
		{
			if( !EventsMessage[i]( critter, message ) )
				return false;
		}
		return true; 
	}
	
	bool Stealing( ::Critter@ cr, ::Critter@ thief, bool& success, ::Item@ item, uint count )
	{
		for( uint i = 0, iEnd = EventsStealing.length(); i < iEnd; i++ )
		{
			if( !EventsStealing[i]( @cr, @thief, success, @item, count ) )
				return false;
		}
		return true;
	}
	
	bool SmthMoveItem( ::Critter@ critter, ::Critter@ target, ::Item@ item, uint8 fromSlot )
	{
		for( uint i = 0, iEnd = EventsSmthMoveItem.length(); i < iEnd; i++ )
			if( !EventsSmthMoveItem[i]( critter, target, item, fromSlot ) )
				return false;
		return true;
	}
	
	// Events
	::array<Mk2::FuncdefEventCritterStealing@>@	EventsStealing;
	
	::array<Mk2::FuncdefEventCritterInit@>@		EventsInit;
	::array<Mk2::FuncdefEventCritterFinish@>@		EventsFinish;
	::array<Mk2::FuncdefEventCritterIdle@>@		EventsIdle;
	::array<Mk2::FuncdefEventCritterMoveItem@>@	EventsMoveItem;
	::array<Mk2::FuncdefEventCritterAttacked@>@	EventsAttacked;
	::array<Mk2::FuncdefEventCritterAttack@>@		EventsAttack;
	::array<Mk2::FuncdefEventCritterRespawn@>@	EventsRespawn;
	::array<Mk2::FuncdefEventCritterDead@>@		EventsDead;
	
	::array<Mk2::FuncdefEventCritterShow@>@		EventsShow;
	::array<Mk2::FuncdefEventCritterShowMe@>@		EventsShowMe;
	::array<Mk2::FuncdefEventCritterHide@>@		EventsHide;
	::array<Mk2::FuncdefEventCritterHideMe@>@		EventsHideMe;
	
	::array<Mk2::FuncdefEventCritterMessage@>@	EventsMessage;
	
	::array<::FuncdefEventCritterSmthMoveItem@>@	EventsSmthMoveItem;
	
	uint PriorityDescriptor = 0;
	
	::Critter@ RealCr = null;
	
	// Dialog::Master
	void SetAnswers( ::Critter@ interlocutor, Dialog::Dialog@ dialog, Dialog::Branch@ branch, Dialog::Answer@[]@ answers, ::Map@ map, uint16 hexX, uint16 hexY, bool isIgnoreDistance ) override
	{
		DialogTick = GetTick();
		RealCr.ModeBase[ MODE_HIDE ] = 0;
		if( @interlocutor !is null )
			CurrentInterlocutorId = interlocutor.Id;
		else CurrentInterlocutorId = 0;
		@Answers = @answers;
		if( @ActiveDialog == @dialog )
			@LastBranch = @CurrentBranch;
		else @ActiveDialog = @dialog; 
		@CurrentBranch = @branch;
		
		SpeakMapId = map is null ? 0 : map.Id;
		SpeakHexX = hexX;
		SpeakHexY = hexY;
		
		ThisSpeakX = RealCr.HexX;
		ThisSpeakY = RealCr.HexY;
		
		IsIgnoreSpeakDistance = isIgnoreDistance;
	}
	
	void GetAnswers( ::Critter@& interlocutor, Dialog::Dialog@& dialog, Dialog::Branch@& branch, Dialog::Answer@[]@& answers, ::Map@& map, uint16& hexX, uint16& hexY, Dialog::Branch@& lastBranch, bool& isIgnoreDistance ) override
	{
		@interlocutor = @::GetCritter( CurrentInterlocutorId );
		@branch = @CurrentBranch;
		@answers = @Answers;
		@dialog = @ActiveDialog;
		@lastBranch = @LastBranch;
		
		if( SpeakMapId != 0 )
			@map = ::GetMap( SpeakMapId );
		
		hexX = SpeakHexX;
		hexY = SpeakHexY;
		
		isIgnoreDistance = IsIgnoreSpeakDistance;
	}
	
	bool IsSpeakCritter( ::Critter& npc, bool ignoreDistance ) override
	{
		if( npc.IsNpc() && npc.IsLife( ) && npc.IsNoPlanes() /* && npc.IsFree( ) */ )
		{
			::Map@ map = @RealCr.GetMap();
			if( @map !is null && @map is @npc.GetMap() )
				return IsSpeakHex( map, npc.HexX, npc.HexY, ( npc.Stat[ST_TALK_DISTANCE] == 0 ? ::__TalkDistance : npc.Stat[ST_TALK_DISTANCE] ), ignoreDistance );
		}
		return false;
		
	}
	
	bool IsSpeakHex( ::Map& map, uint16 hexX, uint16 hexY, uint dist, bool ignoreDistance ) override
	{
		if( @map is @RealCr.GetMap() )
		{
			uint16 tx = hexX, ty = hexY;
			//map.GetHexCoord( cr.HexX, cr.HexY, tx, ty, 0, 0 );
			if( ignoreDistance )
				return true;
			return ( ::GetDistantion( RealCr.HexX, RealCr.HexY, tx, ty ) <= dist );
		}
		return false;
	}
	
	uint SpeakMapId;
	uint16 SpeakHexX;
	uint16 SpeakHexY;
	
	uint16 ThisSpeakX;
	uint16 ThisSpeakY;
	
	uint DialogTick = 0;
	
	uint CurrentInterlocutorId;
	bool IsIgnoreSpeakDistance = false;
	Dialog::Branch@ CurrentBranch;
	Dialog::Branch@ LastBranch;
	Dialog::Dialog@ ActiveDialog;
	Dialog::Answer@[]@ Answers;
	
	uint CritterBarterId;
}

bool NewDescriptor( ::Critter& critter, Mk2::Descriptor@ new )
{
	if( !validEngineObject( critter ) ) return false;
	if( @new is null ) return false;
	
	Mk2::Descriptor@ descriptor = critter.ScriptDescriptor;
	if( @descriptor !is null && !descriptor.IsSet( new ) )
			return false;
	
	@critter.ScriptDescriptor = @new;
	return true;
}

uint cte_SlowEMP(::Critter& cr, int, int& slow, int&)
{
	cr.StatBase[ST_BONUS_WALK_TIME] += slow;
	cr.StatBase[ST_BONUS_RUN_TIME] += slow*0.5;
	return 0;
}