// FOS Server
::dictionary Library;
::array<::Fraction@> List = {};

void ModuleInit( )
{
	::__EventWorldGeneration.Subscribe( NpcFractionGeneration );
}

void changedParam_Experience( Critter& cr, uint, int oldValue )
{
    if( cr.Stat[ ST_FACTION ] != 0 )
    {
        int val = ( cr.StatBase[ ST_EXPERIENCE ] - oldValue ) / FR_DIVIDER;
        if( val > 0 )
            AddFactionRating( cr.Stat[ ST_FACTION ], val );
    }
}

int GetCritterColor( uint , ::Critter& fromCr, ::Critter& toCr )
{
	::Fraction@ fromf=Get(fromCr.Stat[ST_FACTION]);
	if( @fromf != null )
	{
		for( uint n = 0, nMax = fromf.ColorList.length( ); n < nMax; n += 2 )
		{
			Log( "" + fromf.ColorList[ n ] + " " + n + " " + nMax );
            if( fromf.ColorList[ n ] == fromf.Id )
			{
				return int( fromf.ColorList[ n + 1 ] );		
			}
		}
	}	
	return 0;
}

uint GetId(::string& name)
{
	if(!Library.exists(name)) return 0;
	return ::GetStrHash( name );
}

::array<::string@> GetList(uint exclude)
{
	::array<::string@> list;
	for( uint n=0, nMax=List.length(); n<nMax; n++ )
	{
		if(List[n].Id!=exclude)
			list.insertLast(@List[n].Name);
	}
	return list;
}

::array<::string@> GetList()
{
	::array<::string@> list = {};
	Library.keys(list);
	return list;
}

::array<::string@> GetUnrelatedOrgList(uint id)
{
	::array<::string@> list;
	::Fraction@ fr=Get(id);
	if(!valid(fr)) return list;
	uint enemyLength=fr.Enemies.length(),
		 friendsLength= fr.Allies.length();
	for(uint n=0, nMax=List.length(); n<nMax; n++)
	{
		if(id==List[n].Id) continue;
		bool skip=false;
		for(uint m=0; m<FR_MAX_REQUESTS; m++)
		{
			if(fr.Requests[m]==List[n].Id)
			{
				skip=true;
				break;
			}
		}
		if(skip) continue;
		for(uint m=0; m<enemyLength; m++)
		{
			if(fr.Enemies[m]==List[n].Id)
			{
				skip=true;
				break;
			}
		}
		if(skip) continue;
		for(uint m=0; m<friendsLength; m++)
		{
			if(fr.Allies[m]==List[n].Id)
			{
				skip=true;
				break;
			}
		}
		if(skip) continue;
		list.insertLast(@List[n].Name);
	}
	return list;
}

::Fraction@ Get(uint id)
{
	for(uint n=0; n<List.length(); n++)
	{
		if(List[n].Id==id) return @List[n];
	}
	return null;
}

::Fraction@ Get(::string& name)
{
	for(uint n=0; n<List.length(); n++)
	{
		if(List[n].Name==name) return List[n];
	}
	return null;
}

::string@ GetName(uint id)
{
	::Fraction@ fr=Get(id);
	if(!valid(fr)) return "";
	return fr.Name;
}

bool Exist( ::string& name) { return Library.exists(name); }

bool SaveFractions()
{
	::file f;
	::FileDelete(".\\save\\fractions.bak");
	::FileRename(".\\save\\fractions.fo", ".\\save\\fractions.bak");
	if(f.open("./save/fractions.fo", "w")!=0) return false;
	for(uint n=0; n<List.length(); n++)
		List[n].Serialize(f);
	f.close();
	return true;
}

void CorruptFaction( ::Critter& admin, int, int, int)
{
	::Fraction@ fraction=Get(admin.Stat[ST_FACTION]);
	fraction.Stats.resize(1);
}

void ReloadFactions( ::Critter& admin, int, int, int)
{
	LoadFractions();
}


void _CreateFraction( ::Critter& cr, int, int, int, ::string@ answerS, int[] @ )
{
    if( valid( answerS ) )
        create_Org( cr, 0, answerS );
}

bool CorrectName( ::string& str )
{
    bool english = false;
    if( str[ 0 ] >= 65 && str[ 0 ] <= 90 )
        english = true;
    else if( str[ 0 ] >= 192 && str[ 0 ] <= 223 )
        english = false;
    else
        return false;
    if( str[ str.length() - 1 ] == 32 )
        return false;
    if( ::findFirst( str, "DELETED" ) != -1 )
        return false;
    for( uint8 n = 0, nMax = str.length(); n < nMax; n++ )
    {
        if( str[ n ] >= 65 && str[ n ] <= 90 && !english )
            return false;
        else if( str[ n ] >= 192 && str[ 0 ] <= 223 && english )
            return false;
        else if( str[ n ] == '\n' )
            return false;
    }
    return true;
}

void create_Org( Critter& admin, uint answerI, string& answerS )
{
    string@[] strs = splitEx( answerS, "@" );
    if( strs.length() != 2 )
    {
        admin.Say( SAY_NETMSG, "Неверный формат текста, придерживайтесь формату: ''имя_фракции@имя_игрока''." );
        return;
    }
    answerS = strs[ 0 ];
    Critter@ cr = GetPlayer( strs[ 1 ] );
    if( !valid( cr ) )
    {
        admin.Say( SAY_NETMSG, "Игрок не валиден - юзаем модуль _offplayer" );
        OffClient@ offCr = GetOffClient( strs[ 1 ] );
        if( offCr is null )
        {
            admin.Say( SAY_NETMSG, "Оппа-ча, и в оффлайне не виден. Ну и хрен с ним." );
            return;
        }
        if( offCr.GetParam( ST_FACTION ) != 0 )
        {
            admin.Say( SAY_NETMSG, "Error! ::Critter is already in fraction!" );
            return;
        }
        if( offCr.GetParam( ST_LEVEL ) < 15 )
        {
            admin.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 14068 );
            return;
        }
        if( !Fractions::Exist( answerS ) )
        {
            if( answerS.length() < 2 || answerS.length() > 16 )
            {
                admin.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 14044 );
                return;
            }
            if( !CorrectName( strupr( answerS ) ) )
            {
                admin.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 14075 );
                return;
            }
            admin.Say( SAY_NETMSG, answerS + " успешно создана." );
            Fractions::AddFraction( answerS, offCr.Id );
        }
        else
            admin.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 14046 );
        return;
    }
    if( cr.Stat[ ST_FACTION ] != 0 )
    {
        admin.Say( SAY_NETMSG, "Error! ::Critter is already in fraction!" );
        return;
    }
    if( !Fractions::Exist( answerS ) )
    {
        if( answerS.length() < 2 || answerS.length() > 16 )
        {
            admin.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 14044 );
            return;
        }
        if( !CorrectName( ::strupr( answerS ) ) )
        {
            admin.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 14075 );
            return;
        }
        // admin.Say(SAY_NETMSG, answerS+" успешно создана.");
        Fractions::AddFraction( answerS, cr.Id );
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 14045 );
    }
    else
        admin.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 14046 );
}

::string@ LoadFile(::string@ fileName)
{
	::file f;
	if(f.open(fileName, "r") != -1)
	{
		::string txt = "";
		f.readString( f.getSize(), txt); 
		f.close();
		return @txt;
	}
	Log("Error loading factions! Can't open file.");
	return null;
}

void LoadFractions()
{
	uint start=::GetTick();
	List.resize(0);
	Library.deleteAll();
	::string@ txt = LoadFile("./save/fractions.fo" );
	if( txt is null ) return;
	LoadFractions( txt );
	Log("Loaded "+List.length()+" fractions in "+(::GetTick()-start)+" miliseconds.");
}

void AddFraction( ::string& name, uint leaderId)
{
	::Critter@ player=::GetCritter(leaderId);
	if(validEngineObject(player))
	{
		player.StatBase[ST_FACTION]=::GetStrHash( name );
		player.StatBase[ST_FR_LEADERSHIP]=2;
		player.RunClientScript("client_fraction_gui@__Scr_ReInit", leaderId,2,0,null,null);
	}
	else
	{
		::OffClient@ offPlayer=::GetOffClient(leaderId);
		if(!valid(offPlayer)) return;
		offPlayer.SetParam(ST_FACTION, ::GetStrHash( name ));
		offPlayer.SetParam(ST_FR_LEADERSHIP, 2);
	}
	::Fraction fraction(name);
	List.insertLast(@fraction);
	fraction.AddPlayer( leaderId );
	fraction.InitProccess = false;
	fraction.Stats[FR_POPULATION]++;
	Library.set(name, leaderId);
}

void DeleteFraction(uint id)
{
	::Fraction@ fraction = Get(id);
	if( fraction is null ) return;
	Library.delete( fraction.Name );
	fraction.Delete();
	uint index=0;
	int m = 0;
	for(uint n=0, nMax=List.length(); n<nMax; n++)
	{
		@fraction = List[n];
		if(fraction.Id==id)
		{
			index=n;
			continue;
		}
		m = fraction.Enemies.find( id );
		if( m != -1 )
			fraction.Enemies.removeAt( m );
		m = fraction.Allies.find( id );
		if( m != -1 )
			fraction.Allies.removeAt( m );
		m = fraction.Requests.find( id );
		if( m != -1 )
			fraction.Requests.removeAt( m );
	}
	List.removeAt(index);
}

void SortFractions(uint low, uint high) //TabaK. QuickSort
{
	uint i=low;
	uint j=high;
	::Fraction middle=List[(low+high)/2];
	while(i<j)
	{
		while(List[i].Stats[FR_RATING]>middle.Stats[FR_RATING] && i<high)
		{
		//	Log(List[i].Stats[FR_RATING]+">"+middle.Stats[FR_RATING]+"; i="+i+". Increasing");
			i++;
		}
		while(List[j].Stats[FR_RATING]<middle.Stats[FR_RATING] && j>low)
		{
		//	Log(List[j].Stats[FR_RATING]+"<"+middle.Stats[FR_RATING]+"; j="+j+". Decreasing");
			j--;
		}
		if(i<=j)
		{
			::Fraction temp=List[j];
			List[j]=List[i];
			List[i]=temp;
			if(i!=high) i++;
			if(j!=low) j--;
		}
		else break;
	}
	if(low < j) SortFractions(low, j);
    if(i < high) SortFractions(i, high);
}

::array<uint>@ GetPlayersByFraction(uint orgId)
{
	::array<uint> retArr;
	::Fraction@ fraction = Get(orgId);
	if( fraction is null ) retArr;
	retArr=fraction.GetPlayers( );
	retArr.insertLast(orgId);
	return retArr;
}

uint e_FractionOrder_Update(::array<uint>@ values)
{
	uint lng=List.length();
	if(lng<2) return REAL_MINUTE(30);
	else if(lng==2)
	{
		if(List[1].Stats[FR_RATING]>List[0].Stats[FR_RATING]) List.reverse();
		return REAL_MINUTE(30);
	}
	SortFractions(0, lng-1);
	return REAL_MINUTE(30);
}

uint e_DeleteFraction(::array<uint>@ values)
{
	DeleteFraction(values[0]);
	return 0;
}

bool IdentifyPlayerFraction(::Critter& critter )
{
	::Fraction @fraction = Get(critter.Stat[ST_FACTION]);
	if( fraction is null )
	{
		::Dismiss( critter.Id );
		return false;
	}
	if( fraction.CheckCritter( critter.Id ) )
		return true;
	fraction.Dismiss(critter.Id);
	return false;
}

void DrapRatingsAll()
{
	for( uint n = 0, nEnd = List.length(); n < nEnd; n++ )
		List[n].Stats[FR_RATING]=0;
}

bool AddFactionRating(int index, int val)
{
	::Fraction@ fraction = Get( index );
	if( fraction is null ) return false;
	fraction.Stats[FR_RATING] += val;
	return true;
}

::string@ clearstr( ::string&in str )
{
	uint len = str.length();
	while( 0 != len )
	{
		if( str[0] != ' ' )
			break;
		str = ::substring( str, 1, --len );
	}
	return str;
}

void LoadFractions( string@ txt )
{
	string@[] lines = splitEx( txt, "\n" );
	string@ currentLine = null;
	string@[]@ data = null, check = null;
	Fraction@ fraction = null;
	int tempi = -1;
	uint tempu = 0, countLine = lines.length();
	string@ name = null;
	for( uint iline = 0; iline < countLine; iline++ )
	{
		@currentLine = lines[iline];
		if( currentLine is null || currentLine.length() == 0  )
			continue;
		if( currentLine[0] == '#' )
			continue;
		
		@data = ::splitEx( currentLine, "#" );
		if( data.length() > 1 )
			@currentLine = data[0];
		data = ::splitEx( currentLine, "=" );
		if( data.length() == 2 )
		{
			if( data[0] == "Fraction" )
			{
				if( fraction !is null )
				{
					Library.set( fraction.Name, fraction );
					List.insertLast(fraction);
					fraction.InitProccess = false;
				}
				@fraction = ::Fraction( clearstr( data[1] ) );
			}
			else if( data[0] == "Players" )
			{
				@check = ::splitEx( data[1], " " );
				tempu = check.length();
				for( uint i = 0; i < tempu; i++ )
				{
					if( ::StrToInt( check[i], tempi ) )
						fraction.AddPlayer( tempi );
					else fraction.AddPlayer( ::GetStrHash( check[i] ) );
				}
			}
			else if( data[0] == "Requests" )
			{
				@check = ::splitEx( data[1], " " );
				tempu = check.length();
				for( uint i = 0; i < tempu; i++ )
				{
					::StrToInt( check[i], tempi );
					fraction.Requests[i] = tempi;
				}
			}
			else if( data[0] == "Stats" )
			{
				@check = ::splitEx( data[1], " " );
				tempu = check.length();
				for( uint i = 0; i < tempu; i++ )
				{
					::StrToInt( check[i], tempi );
					fraction.Stats[i] = tempi;
				}
			}
			else if( data[0] == "Allies" )
			{
				@check = ::splitEx( data[1], " " );
				tempu = check.length();
				fraction.Allies.resize( tempu );
				for( uint i = 0; i < tempu; i++ )
				{
					if( ::StrToInt( check[i], tempi ) )
						fraction.Allies[i] = tempi;
					else fraction.Allies[i] = ::GetStrHash( check[i] );
				}
			}
			else if( data[0] == "Enemies" )
			{
				@check = ::splitEx( data[1], " " );
				tempu = check.length();
				fraction.Enemies.resize( tempu );
				for( uint i = 0; i < tempu; i++ )
				{
					if( ::StrToInt( check[i], tempi ) )
						fraction.Enemies[i] = tempi;
					else fraction.Enemies[i] = ::GetStrHash( check[i] );
				}
			}
			else if( data[0] == "KnownLocs" )
			{
				@check = ::splitEx( data[1], " " );
				tempu = check.length();
				fraction.KnownLocs.resize( tempu );
				for( uint i = 0; i < tempu; i++ )
				{
					if( ::StrToInt( check[i], tempi ) )
						fraction.KnownLocs[i] = tempi;
					else fraction.KnownLocs[i] = ::GetStrHash( check[i] );
				}
			}
			else if( data[0] == "IsNpc" )
			{
				fraction.IsNpc = clearstr( data[1] ) == "true";
			}
			else if( data[0] == "ColorList" )
			{
				@check = ::splitEx( data[1], " " );
				tempu = check.length();
				fraction.ColorList.resize( tempu );
				for( uint i = 0; i < tempu; i++ )
				{
					::StrToInt( check[i], tempi );
					fraction.ColorList[i] = tempi;
				}
			}
			else if( ::substring( data[0], 0, 13 ) == "GameVariable_" )
			{
				::StrToInt( data[1], tempi );
				fraction.InitVariable( data[0], tempi );
			}
		}
	}
	if( fraction !is null )
	{
		Library.set( fraction.Name, fraction );
		List.insertLast(fraction);
		fraction.InitProccess = false;
	}
}

void NpcFractionGeneration( )
{
	::string code = "";
	Mk2::GetFolderFiles( "./data/NpcFractions/" + "*.fofraction", code );
	
	::string@[] files = ::splitEx( code, "\n" );
	code = "";
	for( uint i = 0, iEnd = files.length(); i < iEnd; i++ )
		code += LoadFile( "./data/NpcFractions/" + files[i] ); 
	LoadFractions( code );
}
