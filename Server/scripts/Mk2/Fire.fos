// FOS Server
//author: TabaK


enum Defines
{
	FireStopDamage = 1, // Минимальный урон,по достижении которого прекращается горение
	FireTimer = 2, // Интервал между вызовами горения в секундах.
	FireTimerDivider = 1, // Делитель интервала вызовов(для сокращения интевала ниже 1 секунды)
	FireDamageDivider = 3, // Делитель урона при каждом вызове горения.
	FloorDamageDivider = 2, // Делитель урона подожженой земли.
	CombustionRoll = 90, // Минимальный ролл для воспламенения боеприпаса.
	CombustionDmgMin = 50, // Мин. урон от воспламенения.
	CombustionDmgMax = 100 // Макс. урон от воспламенения.
}

const uint FireTime
{
	get
	{
		return Random(6,10);
	}
}

void SetFire( Map& map, uint16 hx, uint16 hy, uint16 radius, uint16 damage, Critter@ cr )
{
	array<uint> fires = { map.Id, FireTime };	
	Item@ fire = null;
	
	map.PlaySound("HMXXXXBN.ACM", hx, hy, 0);
	
	for( int x = -radius + 1; x < int( radius ); x++)
	{
		for( int y = -radius + 1; y < int( radius ); y++)
		{
			uint16 nx=hx+x,
				   ny=hy+y;
			if( GetDistantion( hx, hy, nx, ny ) >= radius ) 
				continue;
			@fire = map.GetItem( nx, ny, Content::Item::FIRE );
			if( validEngineObject( fire ) ) DeleteItem( fire );
			@fire = map.AddItem( nx, ny, Content::Item::FIRE, 1 );
			if( validEngineObject( fire ) )
			{
				fire.Val0 = int( __FullSecond + REAL_SECOND( 5 ) );
				fire.LockerComplexity=damage/Fire::Defines::FloorDamageDivider;
				if(validEngineObject(cr)) fire.LockerId=cr.Id;
				fire.SetScript("Mk2@Fire::_FireInit");
				fires.insertLast(fire.Id);
			}
		}
	}

	CreateTimeEvent( __FullSecond + 1, "Mk2@Fire::e_LoopFires", fires, true );
}

uint e_LoopFires( ::array<uint>@ values)
{
	::Item@ fire=null;
	if( @values !is null )
	{
		::Map@ map = ::GetMap( values[0] );
		
		if(validEngineObject(map))
		{
			uint TimeFire = values[1] - 1;
			for(uint n=2, nMax=values.length(); n<nMax; n++)
			{
				@fire=::GetItem(values[n]);
				if(validEngineObject(fire))
				{
					uint16 hexX = fire.HexX, hexY =  fire.HexY;
					IgnitionHex( map, hexX, hexY, fire.LockerComplexity * Fire::Defines::FloorDamageDivider, fire );
					for( uint dir = 0; dir < 6; dir++ )
					{
						hexX = fire.HexX; hexY =  fire.HexY;
						map.MoveHexByDir( hexX, hexY, dir, 1 );
						IgnitionHex( map, hexX, hexY, fire.LockerComplexity * Fire::Defines::FloorDamageDivider, fire );
					}
				}
			}
			
			//GetItems (uint16 hexX, uint16 hexY, ::Item@[]@+ items)	
			if( TimeFire > 0 )
			{
				values[1] = TimeFire;
				return REAL_SECOND(1);
			}
		}
		for(uint n=2, nMax=values.length(); n<nMax; n++)
		{
			@fire=::GetItem(values[n]);
			if(validEngineObject(fire)) ::DeleteItem(fire);
		}
		return 0;
	}
	return 0;
}

void _FireInit(::Item& fire, bool firstTime)
{
	fire.SetEvent(ITEM_EVENT_WALK, "Mk2@Fire::_FireWalk");
	uint16 hx=0, hy=0;
	::Map@ map=fire.GetMapPosition(hx, hy);
	if(validEngineObject(map))
	{
		::Critter@ victim=map.GetCritter(hx, hy);
		if(validEngineObject(victim) && victim.IsLife() && victim.Id != fire.LockerId ) _FireWalk(fire, victim, true, 0);
	}
}

void _FireWalk( Item& item, Critter& cr, bool entered, uint8 dir )
{
	if(!entered) return;
	uint[] indexes, durations;
	int[] rates;
	Critter@ attacker = GetCritter(item.LockerId);
	if( cr.GetTimeEvents( CTE_FIRE, indexes, durations, rates ) == 0 ) // Не поджигаем уже горящих
	{
		if( validEngineObject( attacker ) ) cr.EventAttacked(attacker);
		cr.GetMap().PlaySound("HMXXXXBN.ACM", cr.HexX, cr.HexY, 0);
		InjureCritter(cr, item.LockerComplexity, DAMAGE_FIRE, 0, item.LockerId);
	}
	else if( uint( rates[0] ) < item.LockerComplexity ) // Но обновляем урон при необходимости.
	{
		if(validEngineObject(attacker))
		{
			cr.StatBase[ST_FIRE_DATA]=attacker.Id;
			cr.EventAttacked(attacker);
		}
		cr.ChangeTimeEvent(indexes[0], durations[0], item.LockerComplexity, 0);
	}
}

void SetInFire(::Critter& cr, uint damage, ::Critter@ attacker)
{
	uint[] indexes, durations;
	int[] rates;
	if(cr.GetTimeEvents(CTE_FIRE, indexes, durations, rates)==0)
	{
		cr.StatBase[ST_FIRE_DATA]=validEngineObject(attacker)?int(attacker.Id):-1;
		cr.AddTimeEvent("Mk2@Fire::cte_Fire", REAL_SECOND(Fire::Defines::FireTimer)/Fire::Defines::FireTimerDivider, CTE_FIRE, damage);
	}
	else if(uint( rates[0] )<damage)
	{
		cr.StatBase[ST_FIRE_DATA]=validEngineObject(attacker)?int(attacker.Id):-1;
		cr.ChangeTimeEvent(indexes[0], durations[0], damage, 0);
	}
}

uint cte_Fire( Critter& cr, int identifier, int& rate, int&)
{
	if(cr.IsDead())
	{
		cr.StatBase[ST_FIRE_DATA]=0;
		return 0;
	}
	
	Map@ map=cr.GetMap();
	rate /= Fire::Defines::FireDamageDivider;
	
	if(validEngineObject(map))
	{
		Item@ fire=map.GetItem(cr.HexX, cr.HexY, Content::Item::FIRE);
		if(validEngineObject(fire) && int( fire.LockerComplexity ) > rate)
		{
			rate=fire.LockerComplexity;
			cr.StatBase[ST_FIRE_DATA]=fire.LockerId;
		}
	}
		
	Critter@ attacker = GetCritter(cr.Stat[ST_FIRE_DATA]);
	int damage=rate-rate*cr.Stat[ST_FIRE_RESIST]/100-cr.Stat[ST_FIRE_ABSORB];

	if( rate <= Fire::Defines::FireStopDamage )
	{
		cr.StatBase[ST_FIRE_DATA]=0;
		return 0;
	}
	CombatProccess@ attack = CombatProccess();
	attack.Damage[DAMAGE_FIRE]=damage;
	@attack.Attacker = attacker;
	//cr.StatBase[ST_CURRENT_HP]-=damage;
	int bt = cr.Stat[ST_BODY_TYPE];
	int DeadHitPoints = cr.Stat[ST_DEAD_HIT_POINTS];
	if( DeadHitPoints == __DeadHitPoints && ( bt != BT_MEN && bt != BT_WOMEN 
		&& bt != BT_CHILDREN && bt != BT_SUPER_MUTANT && bt != BT_GHOUL ) ) 
			DeadHitPoints=0;


	array<CombatRes> res;
	array<uint> eff={CMSG_HIT, cr.Id, CLAMP(damage,0,damage)};
	Mk2::CombatTargetPacket@ combatDescriptor = cast<Mk2::CombatTargetPacket>(@cr.ScriptDescriptor);
	if( @combatDescriptor !is null )
		combatDescriptor.TakeDamage( attack, 1, damage );
		
	if( cr.Stat[ST_CURRENT_HP] <= DeadHitPoints )
	{
		eff[0]=CMSG_HIT_DEAD;
		uint anim=ANIM2_DEAD_PRONE_BACK;
		if(cr.IsLife()) anim = Random(ANIM2_DEAD_BURN, ANIM2_DEAD_BURN_RUN);
		cr.ToDead(anim, attacker);
	}
	else if( cr.Stat[ST_CURRENT_HP] < 1 )
		cr.ToKnockout(KNOCKOUT_ANIM2_DEFAULT(false),0,cr.HexX,cr.HexY);

	if(validEngineObject(map))
	{
		array<Critter@> him={ @cr }, crits;
		for( int i = ( cr.IsPlayer() ? 0 : 1 ), iMax = map.GetCrittersSeeing( him, true, FIND_ALL | FIND_ONLY_PLAYERS, crits ); i < iMax; i++ )
			AddEff(crits[i], eff, res);
	}
	else if(cr.IsPlayer()) AddEff(cr, eff, res);
	FlushResults(res);
	return REAL_SECOND(Fire::Defines::FireTimer)/Fire::Defines::FireTimerDivider;
}

void Combust(::Critter& cr, int, int, int)
{
	::CombatProccess@ attack=::CombatProccess();
	attack.IsCritical=true;
	CheckCombustion(cr, attack);
}

void CheckCombustion(::Critter& target, ::CombatProccess& attack)
{
	uint16 flamerPid=GetInflamableItem(target);
	if(flamerPid==0) return;
	uint attackerId=0;
	int roll=::Random(0,90)+(attack.IsAttackPerk(WEAPON_PERK_BETTER_CRITICALS)?10:0);
	if(validEngineObject(attack.Attacker))
	{
		roll+=(attack.Attacker.Perk[PE_BETTER_CRITICALS]!=0?10:0)-
		((attack.Attacker.Trait[TRAIT_FAST_SHOT]!=0 && attack.WeaponSubtype==WS_GUN)?25:0)-
		(attack.Attacker.Trait[TRAIT_HEAVY_HANDED]!=0?15:0);
		attackerId=attack.Attacker.Id;
	}
	if(roll>=Fire::Defines::CombustionRoll)
	{
		::Map@ map=target.GetMap();
		map.PlaySound("ZAPPER.ACM", target.HexX, target.HexY, 0);
		map.RunEffect(Content::Item::EXPLODE_FIRE_SMALL, target.HexX, target.HexY, 0, EFFECT_INSTRUCTION_NONE);
		target.DeleteItem(flamerPid, ::Random(1, target.CountItem(flamerPid)/3+target.CountItem(flamerPid)%3));
		int damage=::Random(Fire::Defines::CombustionDmgMin, Fire::Defines::CombustionDmgMax);
		InjureCritter(target, damage, DAMAGE_FIRE, 0, attackerId);	
		SetFire(map, target.HexX, target.HexY, ::Random(1,2), damage, attack.Attacker);
		::array<uint> eff={ CMSG_COMBUST, target.Id};
		::array<::CombatRes> res;
		::array<::Critter@> him= { @target }, crits;
		for(int i=(target.IsPlayer()?0:1), iMax=map.GetCrittersSeeing(him, true, FIND_ALL|FIND_ONLY_PLAYERS, crits); i<iMax; i++)
		{
			::AddEff(crits[i], eff, res);
		}
		::FlushResults(res);
	}
	
}

uint16 GetInflamableItem(::Critter& cr)
{
	::array<uint> pids={Content::Item::MOLOTOV_COCKTAIL, Content::Item::AMMO_FLAMETHROWER_FUEL, Content::Item::AMMO_FLAMETHROWER_FUEL_MK_II, Content::Item::NITROGLYCERIN};
	uint pid=0;
	for(uint n=0; n<pids.length(); n++)
	{
		if(cr.CountItem(pids[n])>0)
		{
			pid=pids[n];
			if(::Random(1,2)==1) break; // Рандомизируем выбранный для детонации итем.
		}
	}
	return pid;
}

void IgnitionHex( ::Map& map, uint16 hexX, uint16 hexY, uint16 damage, ::Item& fire )
{
	::array<::Item@> items;
	bool isFire = false;
	for(uint n=0, nEnd = map.GetItems ( hexX, hexY, items); n<nEnd; n++)
	{
		if( validEngineObject(items[n]) )
		{
			if(items[n].Proto.Ignition)
			{
				isFire = true;
				::DeleteItem(items[n]);
			}
		}
	}
	
	::array<::Scenery@> sceneries;
	if(!isFire)
		for(uint n=0, nEnd = map.GetSceneries ( hexX, hexY, sceneries); n<nEnd; n++)
		{
			if( @sceneries[n] !is null )
			{
				::Scenery@ scenery = sceneries[n]; 
				const ::ProtoItem@ proto = ::GetProtoItem(sceneries[n].ProtoId);
				if( @proto !is null && @scenery !is null && ( proto.Ignition || proto.Material == 3 ) )
				{
					if(!::IsAnyData("SceneryFire_"+map.Id+"_"+scenery.HexX+"_"+scenery.HexY+"_"+scenery.ProtoId))
					{
						::array<uint> anyData = { 0 };
						if( !::SetAnyData("SceneryFire_"+map.Id+"_"+scenery.HexX+"_"+scenery.HexY+"_"+scenery.ProtoId,anyData))
						{
							Log("AnyData not created");
						}
						else
						{
							::array<uint> forTE = { map.Id, scenery.HexX, scenery.HexY, scenery.ProtoId };
							::CreateTimeEvent(::__FullSecond + REAL_MINUTE(::Random(2, 3)) ,"Mk2@Fire::_ClearSceneryFireData",forTE,true);
							isFire = true;
						}
					}
				}
			}
		}
	
	::Critter@ crHex = map.GetCritter(hexX, hexY);
	::Critter@ cr = ::GetCritter( fire.LockerId );
	if(validEngineObject(crHex))
	{
		//if( cr.Id != crHex.Id )
		if( !validEngineObject(cr) || cr.Id != crHex.Id )
			SetInFire( crHex, damage, cr );
	}
	else if(isFire)
	{
		SetFire( map, hexX, hexY, 1, damage, cr );
	}
}

uint _ClearSceneryFireData( ::array<uint>@ values)
{
	if(::IsAnyData("SceneryFire_"+values[0]+"_"+values[1]+"_"+values[2]+"_"+values[3]))
		::EraseAnyData("SceneryFire_"+values[0]+"_"+values[1]+"_"+values[2]+"_"+values[3]);
	return 0;
}