// FOS Server
// Author: TabaK
// Фракционные квесты на вступление в мафиозные семьи
// NRQuests::Define::

enum Define
{

    RoleEnclaveLeader     = 666 ,
    RoleEnclaveSupport    = 500 ,
    QuestCompleted         = 0 ,
    QuestFailed            = 1 ,
    WrightMember           = 300 ,
    WrightDog              = 301 ,
    WrightCaravan          = 305 ,
    MordinoMan             = 310 ,
    RoleMiron              = 311 
}

// Диалог с Мордино
bool d_OrgIsFamily( ::Critter& master, ::Critter@ slave )
{
    ::Fraction@ fr = Fractions::Get( master.Stat[ ST_FACTION ] );
    if( !valid( fr ) )
        return false;
    return fr.Stats[ FR_NR_FAMILY ] == 5;
}

uint r_TryGetSupply( ::Critter& master, ::Critter@ slave )
{
    ::Fraction@ fr = Fractions::Get( master.Stat[ ST_FACTION ] );
    if( !valid( fr ) )
        return 21;
    if( fr.Stats[ FR_LAST_MAFIA_SUPPLY ] + REAL_DAY( 7 ) > ::__FullSecond )
        return 21;
    else
    {
        master.AddItem( Content::Item::PSYCHO, ::Random( 20, 40 ) );
        master.AddItem( Content::Item::JET, ::Random( 20, 100 ) );
        master.AddItem( Content::Item::SUPER_STIMPAK, ::Random( 40, 80 ) );
        if( ::Random( 1, 40 ) == 1 )
            master.AddItem( Content::Item::HYPO, ::Random( 10, 20 ) );
        if( ::Random( 1, 10 ) == 1 )
            master.AddItem( Content::Item::JET_ANTIDOTE, ::Random( 15, 30 ) );
        if( ::Random( 1, 40 ) == 1 )
            master.AddItem( Content::Item::DETOXINE, ::Random( 3, 5 ) );
        master.AddItem( Content::Item::BOTTLE_CAPS, 5 );
    }
    fr.Stats[ FR_LAST_MAFIA_SUPPLY ] = ::__FullSecond;
    return 23;
}

bool d_OrgIsBad( ::Critter& master, ::Critter@ slave )
{
    if( master.Param[ ST_FACTION ] == 0 )
        return true;
    ::Fraction@ fr = Fractions::Get( master.Stat[ ST_FACTION ] );
    if( !valid( fr ) )
        return true;
    if( fr.Stats[ FR_RATING ] < 10000 )
        return true;
    return false;
}

bool d_OrgIsGood( ::Critter& master, ::Critter@ slave )
{
    return !d_OrgIsBad( master, slave );
}

void r_GetSalvatoreQuest( ::Critter& master, ::Critter@ slave )
{
    ::Fraction@ fr = Fractions::Get( master.Stat[ ST_FACTION ] );
    if( !valid( fr ) )
        return;
    uint     locId = CreateFractionLocation( LOCATION_Salvatore_Supply, 925 + ::Random( 50, 100 ), 925 + ::Random( 50, 100 ), fr );
    ::GameVar@ frId = ::GetLocalVar( LLVAR_questloc_frid, locId );
    ::GameVar@ isQuest = ::GetLocalVar( LLVAR_is_quest_loc, locId );
    isQuest = 1;
    frId = master.Param[ ST_FACTION ];
    uint[] players = Fractions::GetPlayersByFraction( master.Param[ ST_FACTION ] );
    for( uint n = 0, nMax = players.length(); n < nMax; n++ )
    {
        ::GameVar@ quest = ::GetLocalVar( LVAR_q_salvatore_supply, players[ n ] );
        quest = 1;
    }
    fr.Stats[ FR_SALVATORE_SUPPLY ] = 1;
}

void r_JoinMordino( ::Critter& master, ::Critter@ slave, int val )
{
    ::Fraction@ fr = Fractions::Get( master.Stat[ ST_FACTION ] );
    if( !valid( fr ) )
        return;
    uint[] players = Fractions::GetPlayersByFraction( master.Param[ ST_FACTION ] );
    for( uint n = 0, nMax = players.length(); n < nMax; n++ )
    {
        ::Critter@ player = ::GetCritter( players[ n ] );
        if( valid( player ) )
        {
            player.ParamBase[ KARMA_MAN_MORDINO ] = 1;
        }
    }
    fr.Stats[ FR_NR_FAMILY ] = val;
}

uint r_TryGetSalvQuestMordino( ::Critter& master, ::Critter@ slave )
{
    ::Fraction@ fr = Fractions::Get( master.Stat[ ST_FACTION ] );
    if( !valid( fr ) )
        return 10;
    if( fr.Stats[ FR_LAST_MAFIA_QUEST_FAILED ] + REAL_DAY( 7 ) > ::__FullSecond )
        return 10;
    return 12;
}

uint r_TryGetWrightQuestMordino( ::Critter& master, ::Critter@ slave )
{
    ::Fraction@ fr = Fractions::Get( master.Stat[ ST_FACTION ] );
    if( !valid( fr ) )
        return 15;
    if( fr.Stats[ FR_LAST_MAFIA_QUEST_FAILED ] + REAL_DAY( 7 ) > ::__FullSecond )
        return 15;
    return 16;
}

void r_GetWrightQuest( ::Critter& master, ::Critter@ slave )
{
    ::Fraction@ fr = Fractions::Get( master.Stat[ ST_FACTION ] );
    if( !valid( fr ) )
        return;
    uint     locId = CreateFractionLocation( LOCATION_Golgotha, 925, 925 + ::Random( 50, 75 ), fr );
    ::GameVar@ isQuest = ::GetLocalVar( LLVAR_is_quest_loc, locId );
    isQuest = 1;
    ::GameVar@ frId = ::GetLocalVar( LLVAR_questloc_frid, locId );
    frId = master.Param[ ST_FACTION ];
    uint[] players = Fractions::GetPlayersByFraction( master.Param[ ST_FACTION ] );
    for( uint n = 0, nMax = players.length(); n < nMax; n++ )
    {
        ::GameVar@ quest = ::GetLocalVar( LVAR_q_wright_supply, players[ n ] );
        quest = 1;
    }
    master.AddItem( Content::Item::HYPO_POISON, 5 );
    fr.Stats[ FR_WRIGHT_SUPPLY ] = 1;
}

void r_FailWrightQuest( ::Critter& master, ::Critter@ slave )
{
    SwitchWrightQuest( master.GetMap(), 5 );
}

void r_CompleteWrightDeal( ::Critter& master, ::Critter@ slave )
{
    ::Map@ map = master.GetMap();
    if( map.GetData( 1 ) == 1 )
        SwitchWrightQuest( map, 4 );
    else
        SwitchWrightQuest( map, 5 );
}

// Квест на срыв поставки Сальваторе

void _SalvVertiInit( ::Item& verti, bool firstTime )
{
    verti.LockerCondition = LOCKER_NOOPEN;
    verti.LockerId = 1;
}

void _SalvSupplyInit( ::Map& map, bool firstTime )
{
    ::Location@ loc = map.GetLocation();

    map.SetLoopTime( 0, 30000 );
    map.SetEvent( MAP_EVENT_IN_CRITTER, "NRQuests::_SalvFactionArrived" );
    map.SetEvent( MAP_EVENT_LOOP_0, "NRQuests::_ChopperCover" );
    map.SetEvent( MAP_EVENT_CRITTER_DEAD, "NRQuests::_SalvCritterDead" );
    map.SetEvent( MAP_EVENT_OUT_CRITTER, "NRQuests::_SalvOutCritter" );
    loc.Color = COLOR_RED;
}

void _SalvOutCritter( ::Map& map, ::Critter& cr )
{
    // Log("Обработчик вызван");
    if( !valid( map.GetNpc( NRQuests::Define::RoleEnclaveLeader, FIND_LIFE_AND_KO, 0 ) ) && !valid( map.GetNpc( NRQuests::Define::RoleEnclaveSupport, FIND_LIFE_AND_KO, 0 ) ) )
        return;
    /*else if(valid(map.GetNpc(NRQuests::Define::RoleEnclaveLeader, FIND_LIFE_AND_KO, 0))) Log("Лидер найден - провал");
       else Log("Поддержка найдена - провал");*/
    if( cr.IsPlayer() && map.GetCritters( 0, FIND_ONLY_PLAYERS | FIND_LIFE_AND_KO, null ) == 0 )
    {
        uint[] vals = { map.Id, NRQuests::Define::QuestFailed };
        ::CreateTimeEvent( ::__FullSecond + REAL_SECOND( 30 ), "NRQuests::e_DeleteSalvLoc", vals, false );
    }
}


void _SalvCritterDead( ::Map& map, ::Critter& cr, ::Critter@ killer )
{
    if( cr.IsPlayer() && map.GetCritters( 0, FIND_ONLY_PLAYERS | FIND_LIFE_AND_KO, null ) == 0 )
    {
        if( valid( map.GetNpc( NRQuests::Define::RoleEnclaveLeader, FIND_LIFE_AND_KO, 0 ) ) || valid( map.GetNpc( NRQuests::Define::RoleEnclaveSupport, FIND_LIFE_AND_KO, 0 ) ) )
        {
            uint[] vals = { map.Id, NRQuests::Define::QuestFailed };
            ::CreateTimeEvent( ::__FullSecond + REAL_SECOND( 30 ), "NRQuests::e_DeleteSalvLoc", vals, false );
        }
    }
    if( cr.IsNpc() )
    {
        if( !valid( map.GetNpc( NRQuests::Define::RoleEnclaveLeader, FIND_LIFE_AND_KO, 0 ) ) && !valid( map.GetNpc( NRQuests::Define::RoleEnclaveSupport, FIND_LIFE_AND_KO, 0 ) ) )
        {
            ::GameVar@  frId = ::GetLocalVar( LLVAR_questloc_frid, map.GetLocation().Id );
            ::Fraction@ fr = Fractions::Get( frId.GetValue() );
            if( !valid( fr ) )
                return;
            uint[] players = Fractions::GetPlayersByFraction( frId.GetValue() );
            fr.Stats[ FR_SALVATORE_SUPPLY ] = 2;
            for( uint n = 0, nMax = players.length(); n < nMax; n++ )
            {
                ::GameVar@ quest = ::GetLocalVar( LVAR_q_salvatore_supply, players[ n ] );
                quest = 2;
            }
            uint[] vals = { map.Id, NRQuests::Define::QuestCompleted };
            ::CreateTimeEvent( ::__FullSecond + REAL_MINUTE( 5 ), "NRQuests::e_DeleteSalvLoc", vals, false );
            ::Critter@ leader = map.GetNpc( NRQuests::Define::RoleEnclaveLeader, FIND_ALL, 0 );
            if( !valid( leader ) )
                return;
            ::Item@ radio = map.AddItem( leader.HexX + 1, leader.HexY, Content::Item::RADIO, 1 );
            if( valid( radio ) )
            {
                radio.RadioChannel = 666;
                radio.Update();
                ::CreateTimeEvent( ::__FullSecond + REAL_SECOND( 1 ), "NRQuests::e_SulvRadioTalk", 1, false );
                map.SetData( 0, 0 );
            }
        }
    }
}

uint e_SulvRadioTalk( uint[] @ vals )
{
    if( vals[ 0 ] >= 5 )
        return 0;
    ::RadioMessageMsg( 666, TEXTMSG_TEXT, 310 + vals[ 0 ] );
    vals[ 0 ]++;
    return REAL_SECOND( 3 );
}

uint e_DeleteSalvLoc( uint[] @ vals )
{
    ::Map@ map = ::GetMap( vals[ 0 ] );
    if( !valid( map ) )
        return 0;
    if( map.GetCritters( 0, FIND_ONLY_PLAYERS | FIND_LIFE_AND_KO, null ) > 0 )
    {
        if( vals[ 1 ] == uint( NRQuests::Define::QuestFailed ) )
            return 0;
        else
            return REAL_MINUTE( 1 );
    }
    ::GameVar@  frId = ::GetLocalVar( LLVAR_questloc_frid, map.GetLocation().Id );
    ::Fraction@ fr = Fractions::Get( frId.GetValue() );
    if( !valid( fr ) )
        return 0;
    uint[] players = Fractions::GetPlayersByFraction( frId.GetValue() );
    if( vals[ 1 ] == uint( NRQuests::Define::QuestFailed ) )
    {
        fr.Stats[ FR_SALVATORE_SUPPLY ] = 3;
        fr.Stats[ FR_LAST_MAFIA_QUEST_FAILED ] = ::__FullSecond;
        for( uint n = 0, nMax = players.length(); n < nMax; n++ )
        {
            ::GameVar@ quest = ::GetLocalVar( LVAR_q_salvatore_supply, players[ n ] );
            quest = 3;
        }
    }
    fr.DeleteLocation( map.GetLocation().Id );
    ::DeleteLocation( map.GetLocation().Id );
    return 0;
}

void _ChopperCover( ::Map& map )
{
    if( map.GetData( 0 ) == 1 )
    {
        map.PlaySound( "heli.ogg" );
        uint[] vals = { map.Id, 1 };
        ::CreateTimeEvent( ::__FullSecond + REAL_SECOND( 1 ), "NRQuests::e_ChopperAttack",  vals, false );
    }
}

uint e_ChopperAttack( uint[] @ vals )
{
    if( vals[ 1 ] >= uint( ::Random( 4, 6 ) ) )
        return 0;
    ::Map@ map = ::GetMap( vals[ 0 ] );
    if( valid( map ) )
    {
        ::Critter@[] players;
        map.GetCritters( 0, FIND_ONLY_PLAYERS | FIND_LIFE_AND_KO, players );
        if( players.length() < 1 )
            return 0;
        uint8 victim = ::Random( 0, players.length() - 1 );
        ExplodeEx( map, players[ victim ].HexX + ::Random( 0, 1 ), players[ victim ].HexY + ::Random( 0, 1 ), Content::Item::EXPLODE_ROCKET, 1, ::Random( 25, 150 ), DAMAGE_EXPLODE, 1, 0 );
    }
    vals[ 1 ]++;
    return REAL_SECOND( 1 ) / 2;
}

void _SalvFactionArrived( ::Map& map, ::Critter& cr )
{
    if( map.GetData( 0 ) == 0 )
        ::CreateTimeEvent( ::__FullSecond + REAL_SECOND( 5 ), "NRQuests::e_StartChopper", map.Id, false );

    ::Location@ loc = map.GetLocation();

    ::Fraction@ fr;

    if( valid( loc ) )
        @fr = Fractions::Get( loc.FractionId );

    uint16 x = 0, y = 0;

    map.GetEntireCoords( 1000, 0, x, y );
    ::Item@ car = map.AddItem( x, y, Content::Item::HIGHWAYMAN, 1 );
    if( valid( car ) )
    {
        uint keynum = 1;
        car.LockerId = keynum;
        if( valid( fr ) && fr.Stats[ FR_QUEST_HIGHWAYMAN ] == 0 )
        {
            fr.Stats[ FR_QUEST_HIGHWAYMAN ]++;
            keynum = ::Random( 10000, 50000 );
            ::Critter@ leader = map.GetNpc( NRQuests::Define::RoleEnclaveLeader, FIND_ALL, 0 );
            if( valid( leader ) )
            {
                ::Item@ key = leader.AddItem( Content::Item::KEY, 1 );
                key.LockerId = keynum;
                key.Update();
            }
        }
        car.LockerId = keynum;
        car.LockerComplexity = 300;
        car.Charge = car.Proto.Car_TankVolume;
        car.Deterioration = 0;
        car.Update();
        ::Item@ bag = car.GetChild( 0 );
        if( valid( bag ) )
        {
            bag.AddItem( Content::Item::CHEMICALS, 100, 0 );
            bag.LockerId = keynum;
            bag.LockerComplexity = 250;
            bag.Update();
        }
    }
}

uint e_StartChopper( uint[] @ values )
{ 
    ::Map@ map = ::GetMap( values[ 0 ] );
    if( valid( map ) )
    {
        ::Critter@ officer = map.GetNpc( NRQuests::Define::RoleEnclaveLeader, FIND_LIFE, 0 );
        if( valid( officer ) )
        {
            officer.SayMsg( SAY_SHOUT_ON_HEAD, TEXTMSG_TEXT, 310 );
        }
        ::Item@[] items;
        for( uint n = 0, nMax = map.GetItems( Content::Item::VERTIBIRD, items ); n < nMax; n++ )
        {
            if( items[ n ].LockerCondition == LOCKER_NOOPEN )
            {
                items[ n ].Animate( 0, 7 );
                map.PlaySound( "heli.wav" );
                ::DeleteItem( items[ 0 ] );
                map.SetData( 0, 1 );
                break;
            }
        }
    }
    return 0;
}

void _SalvSupplyNpc( ::Critter& cr, bool firstTime )
{
    uint16[] weaponList = { Content::Item::VINDICATOR_MINIGUN, Content::Item::TURBO_PLASMA_RIFLE, Content::Item::YK32_PULSE_PISTOL, Content::Item::PK12_GAUSS_PISTOL, Content::Item::M72_GAUSS_RIFLE };
    if( firstTime )
    {
        if( cr.Param[ ST_BODY_TYPE ] != BT_ROBOT )
        {
            uint  pid = weaponList[ ::Random( 0, weaponList.length() - 1 ) ];
            ::Item@ weapon = cr.AddItem( pid, 1 );
            ::Item@ ammo = cr.AddItem( weapon.Proto.Weapon_DefaultAmmoPid, weapon.Proto.Weapon_MaxAmmoCount * ::Random( 4, 10 ) );
#ifndef __NO_FAVORIT_ITEMS
            if( valid( weapon ) && cr.IsAnim1( weapon.Proto.Weapon_Anim1 ) )
                cr.SetFavoriteItem( SLOT_HAND1, pid );
            cr.SetFavoriteItem( SLOT_HAND2, ammo.GetProtoId() );
#endif
            cr.SkillBase[ weapon.Proto.Weapon_Skill_0 ] = 300;
        }
        else
            cr.SkillBase[ SK_BIG_GUNS ] = 300;
        cr.StatBase[ ST_MAX_LIFE ] += ::Random( 250, 400 );
        cr.StatBase[ ST_CURRENT_HP ] = cr.Stat[ ST_MAX_LIFE ];
        cr.StatBase[ ST_ACTION_POINTS ] += 10;
        cr.PerkBase[ PE_TOUGHNESS ] = 2;
        cr.StatBase[ ST_PERCEPTION ] = 15;
        if( cr.Stat[ ST_NPC_ROLE ] == NRQuests::Define::RoleEnclaveLeader )
        {
            ::Item@ key = cr.AddItem( Content::Item::KEY, 1 );
            key.LockerId = 1265;
            key.Update();
        }
        else
        {
            cr.ModeBase[ MODE_NO_LOOT ] = 1;
            cr.ModeBase[ MODE_NO_STEAL ] = 1;
        }
    }
    cr.SetEvent( CRITTER_EVENT_SHOW_CRITTER, "NRQuests::_SalvSupKillem" );
    cr.SetEvent( CRITTER_EVENT_SMTH_ATTACKED, "NRQuests::_SulvSupAssist" );
}

void _SulvSupAssist( ::Critter& cr, ::Critter& fromCr, ::Critter& attacker )
{
    if( attacker.StatBase[ ST_NPC_ROLE ] == NRQuests::Define::RoleEnclaveSupport && fromCr.StatBase[ ST_NPC_ROLE ] != NRQuests::Define::RoleEnclaveSupport )
    {
        cr.AddEnemyInStack( fromCr.Id );
    }
    else if( attacker.StatBase[ ST_NPC_ROLE ] != NRQuests::Define::RoleEnclaveSupport && fromCr.StatBase[ ST_NPC_ROLE ] == NRQuests::Define::RoleEnclaveSupport && !cr.CheckEnemyInStack( attacker.Id ) )
    {
        cr.AddEnemyInStack( attacker.Id );
    }
}

void _SalvSupKillem( ::Critter& cr, ::Critter& showCr )
{
    if( showCr.StatBase[ ST_NPC_ROLE ] != NRQuests::Define::RoleEnclaveLeader && showCr.StatBase[ ST_NPC_ROLE ] != NRQuests::Define::RoleEnclaveSupport && !cr.CheckEnemyInStack( showCr.Id ) )
        cr.AddEnemyInStack( showCr.Id );
}

void _SalvContInit( ::Item& item, bool firstTime )
{
    if( firstTime )
    {
        uint16[] wPids = { Content::Item::M72_GAUSS_RIFLE, Content::Item::PK12_GAUSS_PISTOL, Content::Item::YK32_PULSE_PISTOL, Content::Item::PLASMA_PISTOL, Content::Item::GATLING_LASER, Content::Item::PLASMA_RIFLE, Content::Item::TURBO_PLASMA_RIFLE };
        uint16[] aPids = { Content::Item::AMMO_SMALL_ENERGY_CELL, Content::Item::AMMO_MICRO_FUSION_CELL, Content::Item::AMMO_4_7MM_CASELESS, Content::Item::AMMO_2MM_EC, Content::Item::AMMO_223_FMJ };
        if( ::Random( 0, 1 ) == 1 )
        {
            for( uint8 n = 0, nMax = ::Random( 2, 3 ); n <= nMax; n++ )
            {
                item.AddItem( wPids[ ::Random( 0, wPids.length() - 1 ) ], 1, 0 );
            }
        }
        else
        {
            for( uint8 n = 0, nMax = ::Random( 3, 4 ); n <= nMax; n++ )
            {
                item.AddItem( aPids[ ::Random( 0, aPids.length() - 1 ) ], ::Random( 100, 200 ), 0 );
            }
        }
    }
    item.LockerComplexity = 300;
    item.LockerId = 1265;
    item.Update();
}

// Квест на срыв сделки Райтов

void _GolgothaInit( ::Map& map, bool firstTime )
{
    map.SetEvent( MAP_EVENT_IN_CRITTER, "NRQuests::_GolgInCritter" );
    map.SetEvent( MAP_EVENT_CRITTER_DEAD, "NRQuests::_GolgCritterDead" );
    map.GetLocation().Color = COLOR_RED;
}

void _GolgCritterDead( ::Map& map, ::Critter& cr, ::Critter@ killer )
{
    if( cr.Stat[ ST_NPC_ROLE ] == NRQuests::Define::WrightMember && map.GetNpcCount( NRQuests::Define::WrightMember, FIND_LIFE_AND_KO ) == 0 )
        SwitchWrightQuest( map, 2 );
}


void _GolgInCritter( ::Map& map, ::Critter& cr )
{
    if( map.GetData( 3 ) == 0 && cr.IsPlayer() )
    {
        uint[] vals = { map.Id, 1 };
        map.SetData( 3, 1 );
        ::CreateTimeEvent( ::__FullSecond + REAL_MINUTE( 6 ), "NRQuests::e_CaravanCountDown", vals, false );
    }
    if( cr.IsPlayer() )
        cr.SetEvent( CRITTER_EVENT_USE_ITEM, "NRQuests::_GolgUseShovel" );
}

uint e_CaravanCountDown( uint[] @ vals )
{
    ::Map@ map = ::GetMap( vals[ 0 ] );
    if( !valid( map ) )
        return 0;
    ::GameVar@ frId = ::GetLocalVar( LLVAR_questloc_frid, map.GetLocation().Id );
    uint[] players = Fractions::GetPlayersByFraction( frId.GetValue() );
    for( uint n = 0, nMax = players.length(); n < nMax; n++ )
    {
        ::Critter@ player = ::GetCritter( players[ n ] );
        if( valid( player ) )
        {
            player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 324 + vals[ 1 ] );
        }
    }
    if( vals[ 1 ] == 5 )
    {
        if( map.GetData( 2 ) == 0 )
        {
            SwitchWrightQuest( map, 5 );
        }
        WrightSpawnCaravan( map );
        return 0;
    }
    vals[ 1 ]++;
    return 1800;
}

uint e_DeleteLoc( uint[] @ vals )
{
    ::Map@ map = ::GetMap( vals[ 0 ] );
    if( map.GetCritters( 0, FIND_ONLY_PLAYERS | FIND_LIFE_AND_KO, null ) > 0 )
        return REAL_MINUTE( 1 );
    ::GameVar@  frId = ::GetLocalVar( LLVAR_questloc_frid, map.GetLocation().Id );
    ::Fraction@ fr = Fractions::Get( frId.GetValue() );
    if( valid( fr ) )
        fr.DeleteLocation( map.GetLocation().Id );
    ::DeleteLocation( map.GetLocation().Id );
    return 0;
}

void WrightSpawnCaravan( ::Map& map )
{
    map.SetData( 4, 1 );
    uint16[] coords = { 0, 0 };
    map.GetEntireCoords( 1001, 0, coords[ 0 ], coords[ 1 ] );
    int[] params = { ST_NPC_ROLE, NRQuests::Define::WrightCaravan, ST_DIALOG_ID, DIALOG_golg_caravan };
    int[] params2 = { ST_NPC_ROLE, NRQuests::Define::WrightCaravan };
    int[] items = { Content::Item::PK12_GAUSS_PISTOL, 1, SLOT_HAND1, Content::Item::AMMO_2MM_EC, 40, SLOT_HAND2 };
    int[] items2 = { Content::Item::AVENGER_MINIGUN, 1, SLOT_HAND1, Content::Item::AMMO_5MM_JHP, 400, SLOT_HAND2 };
    ::Critter@ npc = map.AddNpc( NPC_PID_MasterMerchantMale, coords[ 0 ], coords[ 1 ], 2, params, items, "NRQuests::_WrightTrader" );
    map.GetEntireCoords( 1002, 0, coords[ 0 ], coords[ 1 ] );
    @npc = map.AddNpc( NPC_PID_Brahmin, coords[ 0 ], coords[ 1 ], 2, params, null, null );
    for( uint8 n = 0, nMax = map.CountEntire( 1000 ); n < nMax; n++ )
    {
        map.GetEntireCoords( 1000, n, coords[ 0 ], coords[ 1 ] );
        @npc = map.AddNpc( NPC_PID_ToughGuardMale, coords[ 0 ], coords[ 1 ], 2, params2, items2, "NRQuests::_WrightCaravan" );
    }
}

void _WrightCaravan( ::Critter& cr, bool firstTime )
{
#ifndef __NO_FAVORIT_ITEMS
    const ::ProtoItem@ it = ::GetProtoItem( Content::Item::AVENGER_MINIGUN );
    if( valid( it ) && cr.IsAnim1( it.Weapon_Anim1 ) )
        cr.SetFavoriteItem( SLOT_HAND1, Content::Item::AVENGER_MINIGUN );
    cr.SetFavoriteItem( SLOT_HAND2, Content::Item::AMMO_5MM_JHP );
#endif
	cr.SkillBase[ SK_BIG_GUNS ] = 300;
    cr.StatBase[ ST_MAX_LIFE ] += 200;
    cr.StatBase[ ST_CURRENT_HP ] = cr.Stat[ ST_MAX_LIFE ];
    cr.StatBase[ ST_ACTION_POINTS ] += 15;
    cr.PerkBase[ PE_TOUGHNESS ] = 3;
    cr.StatBase[ ST_PERCEPTION ] = 15;
    cr.ModeBase[ MODE_NO_LOOT ] = 1;
    cr.ModeBase[ MODE_NO_STEAL ] = 1;
    cr.SetEvent( CRITTER_EVENT_SHOW_CRITTER, "NRQuests::_WrightCaravanAttackCheck" );
    cr.SetEvent( CRITTER_EVENT_SMTH_USE_ITEM, "NRQuests::_WrightCheckPoisoning" );
    cr.SetEvent( CRITTER_EVENT_ATTACKED, "NRQuests::_WrightAssist" );
}

void _WrightTrader( ::Critter& cr, bool firstTime )
{
#ifndef __NO_FAVORIT_ITEMS
    const ::ProtoItem@ it = ::GetProtoItem( Content::Item::PK12_GAUSS_PISTOL );
    if( valid( it ) && cr.IsAnim1( it.Weapon_Anim1 ) )
        cr.SetFavoriteItem( SLOT_HAND1, Content::Item::PK12_GAUSS_PISTOL );
    cr.SetFavoriteItem( SLOT_HAND2, Content::Item::AMMO_2MM_EC );
#endif
    cr.SkillBase[ SK_SMALL_GUNS ] = 300;
    cr.StatBase[ ST_MAX_LIFE ] += 200;
    cr.StatBase[ ST_CURRENT_HP ] = cr.Stat[ ST_MAX_LIFE ];
    cr.StatBase[ ST_ACTION_POINTS ] += 15;
    cr.PerkBase[ PE_TOUGHNESS ] = 3;
    cr.StatBase[ ST_PERCEPTION ] = 15;
    cr.SetEvent( CRITTER_EVENT_IDLE, "NRQuests::_WrightTraderTalk" );
    cr.SetEvent( CRITTER_EVENT_SHOW_CRITTER, "NRQuests::_WrightCaravanAttackCheck" );
    cr.SetEvent( CRITTER_EVENT_SMTH_USE_ITEM, "NRQuests::_WrightCheckPoisoning" );
    cr.SetEvent( CRITTER_EVENT_ATTACKED, "NRQuests::_WrightAssist" );
    ::Map@ map = cr.GetMap();
    if( map.GetData( 2 ) == 0 )
        cr.SayMsg( SAY_SHOUT_ON_HEAD, TEXTMSG_TEXT, 331 );
}
void _WrightCheckPoisoning( ::Critter& cr, ::Critter& fromCr, ::Item& item, ::Critter@ onCritter, ::Item@ onItem, ::Scenery@ onScenery )
{
    if( item.GetProtoId() == Content::Item::HYPO_POISON && valid( onItem ) )
    {
        if( onItem.GetProtoId() == Content::Item::WAGON_GREY )
        {
            NpcPlanes::AddAttackPlane( cr, 1, fromCr.Id, false );
            if( cr.GetProtoId() == NPC_PID_MasterMerchantMale )
                cr.SayMsg( SAY_SHOUT_ON_HEAD, TEXTMSG_TEXT, 331 );
            SwitchWrightQuest( cr.GetMap(), 5 );
        }
    }
}


void _WrightCaravanAttackCheck( ::Critter& cr, ::Critter& showCr )
{
    ::Map@ map = cr.GetMap();
    if( map.GetData( 2 ) == 0 && showCr.Stat[ ST_NPC_ROLE ] != NRQuests::Define::WrightCaravan && showCr.Stat[ ST_NPC_ROLE ] != NRQuests::Define::WrightMember )
        NpcPlanes::AddAttackPlane( cr, 1, showCr.Id, false );
}

void _WrightTraderTalk( ::Critter& cr )
{
    ::Map@ map = cr.GetMap();
    if( map.GetData( 2 ) == 1 && map.GetData( 5 ) == 0 )
        cr.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_TEXT, ::Random( 332, 335 ) );
}

bool _GolgUseShovel( ::Critter& cr, ::Item& item, ::Critter@ onCritter, ::Item@ onItem, ::Scenery@ onScenery )
{
    if( !valid( onCritter ) || item.GetProtoId() != Content::Item::SHOVEL )
        return false;
    if( !onCritter.IsDead() )
        return false;
    if( onCritter.Stat[ ST_NPC_ROLE ] == NRQuests::Define::WrightMember )
    {
        ::Map@ map = cr.GetMap();
        if( map.GetData( 4 ) > 0 )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 336 );
            return true;
        }
        ::Item@ grave = GetFreeGrave( map );
        if( !valid( grave ) )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 339 );
            return true;
        }
        UNSETFLAG( grave.LockerCondition, LOCKER_ISOPEN );
        ::Item@[] inv;
        onCritter.GetItems( SLOT_HAND1, inv );
        onCritter.GetItems( SLOT_HAND2, inv );
        onCritter.GetItems( SLOT_INV, inv );
        ::MoveItems( inv, grave, 0 );
        grave.Update();
        ::DeleteNpc( onCritter );
        cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 330 );
        if( map.GetNpcCount( NRQuests::Define::WrightMember, FIND_ALL ) <= 1 )
        {
            map.SetData( 2, 1 );
            cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 337 );
            if( map.GetData( 1 ) > 0 )
                SwitchWrightQuest( map, 3 );
        }
        return true;
    }
    return false;
}

::Item@ GetFreeGrave( ::Map& map )
{
    ::Item@[] graves;
    map.GetItems( Content::Item::GRAVESITE_1, graves );
    map.GetItems( Content::Item::GRAVESITE_2, graves );
    map.GetItems( Content::Item::GRAVESITE_3, graves );
    map.GetItems( Content::Item::GRAVESITE_4, graves );
    map.GetItems( Content::Item::LF_GRAVESITE_1, graves );
    map.GetItems( Content::Item::LF_GRAVESITE_2, graves );
    map.GetItems( Content::Item::LF_GRAVESITE_3, graves );
    for( uint8 n = 0, nMax = graves.length(); n < nMax; n++ )
    {
        if( FLAG( graves[ n ].LockerCondition, LOCKER_ISOPEN ) )
            return graves[ n ];
    }
    return null;
}

void SwitchWrightQuest( ::Map& map, uint8 val )
{
    ::GameVar@  frId = ::GetLocalVar( LLVAR_questloc_frid, map.GetLocation().Id );
    ::Fraction@ fr = Fractions::Get( frId.GetValue() );
    if( fr.Stats[ FR_WRIGHT_SUPPLY ] == val )
        return;
    fr.Stats[ FR_WRIGHT_SUPPLY ] = val;
    uint[] players = Fractions::GetPlayersByFraction( frId.GetValue() );
    for( uint n = 0, nMax = players.length(); n < nMax; n++ )
    {
        ::Critter@ cr = ::GetCritter( players[ n ] );
        if( valid( cr ) )
        {
            ::GameVar@ quest = ::GetLocalVar( LVAR_q_wright_supply, players[ n ] );
            quest = val;
        }
    }
    if( val == 5 )
    {
        fr.Stats[ FR_LAST_MAFIA_QUEST_FAILED ] = ::__FullSecond;
        ::CreateTimeEvent( ::__FullSecond + REAL_MINUTE( 5 ), "NRQuests::e_DeleteLoc", map.Id, false );
        map.SetData( 5, 1 );
    }
    else if( val == 4 )
    {
        map.SetData( 5, 1 );
        ::CreateTimeEvent( ::__FullSecond + REAL_MINUTE( 5 ), "NRQuests::e_DeleteLoc", map.Id, false );
        ::CreateTimeEvent( ::__FullSecond + REAL_SECOND( 10 ), "NRQuests::e_DeleteWrightCaravan", map.Id, false );
    }
}

uint e_DeleteWrightCaravan( uint[] @ vals )
{
    ::Map@ map = ::GetMap( vals[ 0 ] );
    for( uint n = 0, nMax = map.GetNpcCount( NRQuests::Define::WrightCaravan, FIND_LIFE_AND_KO ); n < nMax; n++ )
    {
        ::Critter@ npc = map.GetNpc( NRQuests::Define::WrightCaravan, FIND_LIFE_AND_KO, n );
        if( !npc.IsNoPlanes() )
            return 0;
        ::DeleteNpc( npc );
    }
    ::Item@[] wagon;
    map.GetItems( Content::Item::WAGON_GREY, wagon );
    if( wagon.length() > 0 )
        ::DeleteItem( wagon[ 0 ] );
    return 0;
}

void _WrightInit( ::Critter& cr, bool firstTime )
{
    cr.ShowCritterDist1 = 20;
    cr.ShowCritterDist2 = 10;
    cr.SetEvent( CRITTER_EVENT_SHOW_CRITTER_1, "NRQuests::_WrightWarning" );
    cr.SetEvent( CRITTER_EVENT_SHOW_CRITTER_2, "NRQuests::_WrightAttack" );
    cr.SetEvent( CRITTER_EVENT_ATTACKED, "NRQuests::_WrightAssist" );
    cr.SkillBase[ SK_SMALL_GUNS ] = 300;
    cr.StatBase[ ST_PERCEPTION ] = 15;
    cr.ModeBase[ MODE_UNLIMITED_AMMO ] = 1;
    cr.StatBase[ ST_MAX_LIFE ] += 800;
    cr.StatBase[ ST_CURRENT_HP ] = cr.Stat[ ST_MAX_LIFE ];
    cr.PerkBase[ PE_TOUGHNESS ] = 3;
}

void _WrightWarning( ::Critter& cr, ::Critter& showCr )
{
    if( showCr.Stat[ ST_NPC_ROLE ] == NRQuests::Define::WrightMember || showCr.Stat[ ST_NPC_ROLE ] == NRQuests::Define::WrightCaravan || showCr.Stat[ ST_NPC_ROLE ] == NRQuests::Define::WrightDog )
        return;
    ::Map@ map = cr.GetMap();
    if( map.GetData( 0 ) == 0 )
    {
        cr.SayMsg( SAY_SHOUT_ON_HEAD, TEXTMSG_TEXT, 320 );
        map.SetData( 0, 1 );
    }
}

void _WrightAttack( ::Critter& cr, ::Critter& showCr )
{
    if( showCr.Stat[ ST_NPC_ROLE ] == NRQuests::Define::WrightMember || showCr.Stat[ ST_NPC_ROLE ] == NRQuests::Define::WrightCaravan ||  showCr.Stat[ ST_NPC_ROLE ] == NRQuests::Define::WrightDog )
        return;
    ::Map@ map = cr.GetMap();
    if( map.GetData( 0 ) < 2 )
    {
        cr.SayMsg( SAY_SHOUT_ON_HEAD, TEXTMSG_TEXT, 321 );
        map.SetData( 0, 2 );
        for( uint n = 0, nMax = map.GetNpcCount( NRQuests::Define::WrightMember, FIND_LIFE_AND_KO ); n < nMax; n++ )
        {
            ::Critter@ sup = map.GetNpc( NRQuests::Define::WrightMember, FIND_LIFE_AND_KO, n );
            if( valid( sup ) )
                NpcPlanes::AddAttackPlane( sup, 1, showCr.Id, true );
        }
        for( uint n = 0, nMax = map.GetNpcCount( NRQuests::Define::WrightDog, FIND_LIFE_AND_KO ); n < nMax; n++ )
        {
            ::Critter@ sup = map.GetNpc( NRQuests::Define::WrightDog, FIND_LIFE_AND_KO, n );
            if( valid( sup ) )
                NpcPlanes::AddAttackPlane( sup, 1, showCr.Id, true );
        }
    }
}

void _WrDogInit( ::Critter& cr, bool firstTime )
{
    cr.SetEvent( CRITTER_EVENT_ATTACKED, "NRQuests::_WrightAssist" );
    cr.SkillBase[ SK_UNARMED ] = 300;
    cr.StatBase[ ST_PERCEPTION ] = 15;
    cr.StatBase[ ST_MAX_LIFE ] += 200;
    cr.StatBase[ ST_CURRENT_HP ] = cr.Stat[ ST_MAX_LIFE ];
    cr.PerkBase[ PE_TOUGHNESS ] = 1;
}

bool _WrightAssist( ::Critter& cr, ::Critter& attacker )
{
    if( attacker.Stat[ ST_NPC_ROLE ] == NRQuests::Define::WrightMember || attacker.Stat[ ST_NPC_ROLE ] == NRQuests::Define::WrightCaravan )
        return false;
    ::Map@ map = cr.GetMap();
    if( cr.Stat[ ST_NPC_ROLE ] == NRQuests::Define::WrightCaravan )
        SwitchWrightQuest( map, 5 );
    for( uint n = 0, nMax = map.GetNpcCount( NRQuests::Define::WrightMember, FIND_LIFE_AND_KO ); n < nMax; n++ )
    {
        ::Critter@ sup = map.GetNpc( NRQuests::Define::WrightMember, FIND_LIFE_AND_KO, n );
        if( valid( sup ) )
        {
            if( sup.IsNoPlanes() )
                NpcPlanes::AddAttackPlane( sup, 1, attacker.Id, true );
            if( !sup.CheckEnemyInStack( attacker.Id ) )
                sup.AddEnemyInStack( attacker.Id );
        }
    }
    for( uint n = 0, nMax = map.GetNpcCount( NRQuests::Define::WrightCaravan, FIND_LIFE_AND_KO ); n < nMax; n++ )
    {
        ::Critter@ sup = map.GetNpc( NRQuests::Define::WrightCaravan, FIND_LIFE_AND_KO, n );
        if( valid( sup ) )
        {
            if( sup.IsNoPlanes() )
                NpcPlanes::AddAttackPlane( sup, 1, attacker.Id, true );
            if( !sup.CheckEnemyInStack( attacker.Id ) )
                sup.AddEnemyInStack( attacker.Id );
        }
    }
    for( uint n = 0, nMax = map.GetNpcCount( NRQuests::Define::WrightDog, FIND_LIFE_AND_KO ); n < nMax; n++ )
    {
        ::Critter@ sup = map.GetNpc( NRQuests::Define::WrightDog, FIND_LIFE_AND_KO, n );
        if( valid( sup ) )
            NpcPlanes::AddAttackPlane( sup, 1, attacker.Id, true );
    }
    return false;
}

void _WrightSupInit( ::Critter& cr, bool firstTime )
{
    uint16[] weaponList = { Content::Item::VINDICATOR_MINIGUN, Content::Item::TURBO_PLASMA_RIFLE, Content::Item::M72_GAUSS_RIFLE };
    if( firstTime )
    {
        uint  pid = weaponList[ ::Random( 0, weaponList.length() - 1 ) ];
        ::Item@ weapon = cr.AddItem( pid, 1 );
        ::Item@ ammo = cr.AddItem( weapon.Proto.Weapon_DefaultAmmoPid, weapon.Proto.Weapon_MaxAmmoCount * ::Random( 4, 10 ) );
#ifndef __NO_FAVORIT_ITEMS
        if( valid( weapon ) && cr.IsAnim1( weapon.Proto.Weapon_Anim1 ) )
            cr.SetFavoriteItem( SLOT_HAND1, pid );
        cr.SetFavoriteItem( SLOT_HAND2, ammo.GetProtoId() );
#endif
        cr.SkillBase[ weapon.Proto.Weapon_Skill_0 ] = 300;
        cr.StatBase[ ST_MAX_LIFE ] += ::Random( 500, 1000 );
        cr.StatBase[ ST_CURRENT_HP ] = cr.Stat[ ST_MAX_LIFE ];
        cr.StatBase[ ST_ACTION_POINTS ] += 15;
        cr.PerkBase[ PE_TOUGHNESS ] = 4;
        cr.StatBase[ ST_PERCEPTION ] = 15;
        cr.ModeBase[ MODE_NO_LOOT ] = 1;
        cr.ModeBase[ MODE_NO_STEAL ] = 1;
    }
    cr.SetEvent( CRITTER_EVENT_ATTACKED, "NRQuests::_WrightAssist" );
}

void _AlcoInit( ::Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_SKILL, "NRQuests::_UseAlco" );
    item.SetEvent( ITEM_EVENT_USE_ON_ME, "NRQuests::_UseOnAlco" );
}

bool _UseAlco( ::Item& item, ::Critter& crit, int skill )
{
    if( skill == SKILL_PICK_ON_GROUND || skill == SK_STEAL )
    {
        ::Map@ map = crit.GetMap();
        if( CheckWrightQuestState( map ) == 5 && map.GetData( 1 ) == 0 )
            return false;
        if( map.GetData( 1 ) == 0 )
            crit.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 322 );
        else
            crit.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 323 );
    }
    return true;
}

bool _UseOnAlco( ::Item& item, ::Critter& crit, ::Item@ usedItem )
{
    if( valid( usedItem ) )
    {
        if( usedItem.GetProtoId() == Content::Item::HYPO_POISON )
        {
            ::Map@ map = crit.GetMap();
            if( CheckWrightQuestState( map ) > 3 )
            {
                crit.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 338 );
                return true;
            }
            map.SetData( 1, 1 );
            crit.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 324 );
            ::DeleteItem( usedItem );
            if( map.GetData( 4 ) == 1 )
            {
                for( uint n = 0, nMax = map.GetNpcCount( NRQuests::Define::WrightCaravan, FIND_LIFE_AND_KO ); n < nMax; n++ )
                {
                    if( crit.IsSeenBy( map.GetNpc( NRQuests::Define::WrightCaravan, FIND_LIFE_AND_KO, 0 ) ) )
                        return false;
                }
            }
            if( map.GetData( 2 ) > 0 )
            {
                SwitchWrightQuest( map, 3 );
            }
            return true;
        }
    }
    return false;
}

uint CheckWrightQuestState( ::Map& map )
{
    ::GameVar@  frId = ::GetLocalVar( LLVAR_questloc_frid, map.GetLocation().Id );
    ::Fraction@ fr = Fractions::Get( frId.GetValue() );
    if( !valid( fr ) )
        return 0;
    return fr.Stats[ FR_WRIGHT_SUPPLY ];
}

// Диалог с Сальваторе

bool d_SalvQuestsFinished( ::Critter& master, ::Critter@ slave )
{
    ::Fraction@ fr = Fractions::Get( master.Stat[ ST_FACTION ] );
    if( !valid( fr ) )
        return false;
    return fr.Stats[ FR_NR_FAMILY ] == 6;
}

uint r_TryGetSalvSupply( ::Critter& master, ::Critter@ slave )
{
    if( master.Param[ ST_FR_LEADERSHIP ] == 0 )
        return 23;
    ::Fraction@ fr = Fractions::Get( master.Stat[ ST_FACTION ] );
    if( !valid( fr ) )
        return 23;
    if( fr.Stats[ FR_LAST_MAFIA_SUPPLY ] + REAL_DAY( 14 ) > ::__FullSecond )
        return 24;
    else
    {
        uint[] wPids = { Content::Item::PK12_GAUSS_PISTOL, Content::Item::HK_G11E, Content::Item::VULCAN, Content::Item::DOUBLE_LASER_RIFLE, Content::Item::ANACONDA, Content::Item::YK32_PULSE_PISTOL, Content::Item::VINDICATOR_MINIGUN, Content::Item::PLASMA_RIFLE };
        uint[] rarePids = { Content::Item::PANCOR_JACKHAMMER_MK2, Content::Item::TURBO_PLASMA_RIFLE, Content::Item::METAL_STORM, Content::Item::BOZAR };
        uint nMax = ::Random( 2, 3 );
        for( uint n = 0; n < nMax; n++ )
        {
            master.AddItem( wPids[ ::Random( 0, wPids.length() - 1 ) ], ::Random( 1, 3 ) );
            if( ::Random( 1, 10 ) == 1 )
                master.AddItem( rarePids[ ::Random( 0, rarePids.length() - 1 ) ], ::Random( 1, 3 ) );
        }
        if( ::Random( 1, 50 ) == 1 )
            master.AddItem( Content::Item::GATLING_LASER, 1 );
        if( ::Random( 1, 50 ) == 1 )
            master.AddItem( Content::Item::HYPERBOLOID, 1 );
        if( ::Random( 1, 50 ) == 1 )
            master.AddItem( Content::Item::BIG_MORTAR, 1 );
        if( ::Random( 1, 50 ) == 1 )
            master.AddItem( Content::Item::M72_GAUSS_RIFLE, 1 );
        master.AddItem( Content::Item::BOTTLE_CAPS, 5 );
    }
    fr.Stats[ FR_LAST_MAFIA_SUPPLY ] = ::__FullSecond;
    return 25;
}

void dlg_FinishSalvQuests( ::Critter& player, ::Critter@ Salv, ::string@ lexems )
{
    if( not IS_DIALOG_GENERATED( lexems ) )
        return;
    ::Fraction@ fr = Fractions::Get( player.Stat[ ST_FACTION ] );
    if( fr is null )
        return;
    uint[] players = Fractions::GetPlayersByFraction( player.Param[ ST_FACTION ] );
    for( uint n = 0, nMax = players.length(); n < nMax; n++ )
    {
        ::Critter@ nplayer = ::GetCritter( players[ n ] );
        if( nplayer !is null )
            nplayer.ParamBase[ KARMA_MAN_SALVATORE ] = 1;
    }
    fr.Stats[ FR_NR_FAMILY ] = 6;
}

uint r_TryWorkForSalv( ::Critter& master, ::Critter@ slave )
{
    if( d_OrgIsGood( master, slave ) )
    {
        if( master.Param[ ST_FR_LEADERSHIP ] > 0 )
            return 10;
        else
            return 12;
    }
    else
        return 3;
}

void r_GetMordinoQuestSalv( ::Critter& master, ::Critter@ slave )
{
    ::Fraction@ fr = Fractions::Get( master.Param[ ST_FACTION ] );
    if( !valid( fr ) )
        return;
    uint     locId = CreateFractionLocation( LOCATION_Stables, 905, 905 + ::Random( 50, 75 ), fr );
    ::GameVar@ isQuest = ::GetLocalVar( LLVAR_is_quest_loc, locId );
    isQuest = 1;
    ::GameVar@ frId = ::GetLocalVar( LLVAR_questloc_frid, locId );
    frId = master.Param[ ST_FACTION ];
    uint[] players = Fractions::GetPlayersByFraction( master.Param[ ST_FACTION ] );
    for( uint n = 0, nMax = players.length(); n < nMax; n++ )
    {
        ::Critter@ player = ::GetCritter( players[ n ] );
        if( valid( player ) )
        {
            ::GameVar@ quest = ::GetLocalVar( LVAR_q_kill_miron, players[ n ] );
            quest = 1;
            player.ParamBase[ KARMA_MAN_SALVATORE ] = 1;
        }
    }
    fr.Stats[ FR_NR_FAMILY ] = 2;
    fr.Stats[ FR_KILL_MIRON ] = 1;
}
uint r_TryGetMordinoQuestSalv( ::Critter& master, ::Critter@ slave )
{
    ::Fraction@ fr = Fractions::Get( master.Stat[ ST_FACTION ] );
    if( !valid( fr ) )
        return 15;
    if( fr.Stats[ FR_LAST_MAFIA_QUEST_FAILED ] + REAL_DAY( 7 ) > ::__FullSecond )
        return 15;
    r_GetMordinoQuestSalv( master, slave );
    return 16;
}

uint r_TryGetWrightQuestSalv( ::Critter& master, ::Critter@ slave )
{
    ::Fraction@ fr = Fractions::Get( master.Stat[ ST_FACTION ] );
    if( !valid( fr ) )
        return 28;
    if( fr.Stats[ FR_LAST_MAFIA_QUEST_FAILED ] + REAL_DAY( 7 ) > ::__FullSecond )
        return 28;
    r_GetWrightQuest( master, slave );
    return 29;
}
// Квест на убийство Мирона

void _StablesInit( ::Map& map, bool firstTime )
{
    map.GetLocation().Color = COLOR_RED;
    map.SetEvent( MAP_EVENT_CRITTER_DEAD, "NRQuests::_StablesDead" );
    map.SetEvent( MAP_EVENT_OUT_CRITTER, "NRQuests::_StablesRunAway" );
}

void _StablesRunAway( ::Map& map, ::Critter& cr )
{
    if( !valid( map ) )
        return;
    ::Location@ loc = map.GetLocation();
    if( !valid( loc ) )
        return;
    uint countMap = loc.GetMapCount();
    if( countMap < 2 )
    {
        Log( "Error, countMap < 2" );
        return;
    }
    ::Map@ m0 = loc.GetMapByIndex( 0 );
    if( !valid( m0 ) )
    {
        Log( "Error, m0 not valide" );
        return;
    }
    ::Map@ m1 = loc.GetMapByIndex( 1 );
    if( !valid( m1 ) )
    {
        Log( "Error, m1 not valide" );
        return;
    }
    if( m0.GetCritters( 0, FIND_ONLY_PLAYERS | FIND_LIFE_AND_KO, null ) + m1.GetCritters( 0, FIND_ONLY_PLAYERS | FIND_LIFE_AND_KO, null ) == 0 )
    {
        if( valid( m1.GetNpc( NRQuests::Define::RoleMiron, FIND_LIFE_AND_KO, 0 ) ) )
        {
            uint[] vals = { map.Id, NRQuests::Define::QuestFailed };
            if( ::CreateTimeEvent( ::__FullSecond + REAL_SECOND( 30 ), "NRQuests::e_DeleteStables", vals, false ) == 0 )
                Log( "Error, ::CreateTimeEvent not success." );
        }
    }
}

void _StablesDead( ::Map& map, ::Critter& cr, ::Critter@ killer )
{
    ::Location@ loc = map.GetLocation();
    if( cr.IsNpc() )
    {
        if( cr.Param[ ST_NPC_ROLE ] == NRQuests::Define::RoleMiron )
        {
            ::GameVar@  frId = ::GetLocalVar( LLVAR_questloc_frid, map.GetLocation().Id );
            ::Fraction@ fr = Fractions::Get( frId.GetValue() );
            if( !valid( fr ) )
            {
                uint[] vals = { map.Id, NRQuests::Define::QuestFailed };
                ::CreateTimeEvent( ::__FullSecond + REAL_MINUTE( 5 ), "NRQuests::e_DeleteStables", vals, false );
                return;
            }
            uint[] players = Fractions::GetPlayersByFraction( frId.GetValue() );
            for( uint n = 0, nMax = players.length(); n < nMax; n++ )
            {
                ::Critter@ player = ::GetCritter( players[ n ] );
                if( valid( player ) )
                {
                    ::GameVar@ quest = ::GetLocalVar( LVAR_q_kill_miron, players[ n ] );
                    player.StatBase[ ST_EXPERIENCE ] += 10000;
                    quest = 2;
                }
            }
            fr.Stats[ FR_KILL_MIRON ] = 2;
            uint[] vals = { map.Id, NRQuests::Define::QuestCompleted };
            ::CreateTimeEvent( ::__FullSecond + REAL_MINUTE( 5 ), "NRQuests::e_DeleteStables", vals, false );
        }
        return;
    }
    if( loc.GetMapByIndex( 0 ).GetCritters( 0, FIND_ONLY_PLAYERS | FIND_LIFE_AND_KO, null ) + loc.GetMapByIndex( 1 ).GetCritters( 0, FIND_ONLY_PLAYERS | FIND_LIFE_AND_KO, null ) == 0 )
    {
        if( valid( loc.GetMapByIndex( 1 ).GetNpc( NRQuests::Define::RoleMiron, FIND_LIFE_AND_KO, 0 ) ) )
        {
            uint[] vals = { map.Id, NRQuests::Define::QuestFailed };
            ::CreateTimeEvent( ::__FullSecond + REAL_SECOND( 30 ), "e_DeleteStables", vals, false );
        }
    }
}

uint e_DeleteStables( uint[] @ vals )
{
    ::Map@ map = ::GetMap( vals[ 0 ] );
    if( !valid( map ) )
        return 0;
    ::GameVar@  frId = ::GetLocalVar( LLVAR_questloc_frid, map.GetLocation().Id );
    ::Fraction@ fr = Fractions::Get( frId.GetValue() );
    if( !valid( fr ) )
    {
        ::DeleteLocation( map.GetLocation().Id );
        return 0;
    }
    uint[] players = Fractions::GetPlayersByFraction( frId.GetValue() );
    if( vals[ 1 ] == uint( NRQuests::Define::QuestFailed ) )
    {
        if( map.GetLocation().GetMapByIndex( 0 ).GetCritters( 0, FIND_ONLY_PLAYERS | FIND_LIFE_AND_KO, null ) + map.GetLocation().GetMapByIndex( 1 ).GetCritters( 0, FIND_ONLY_PLAYERS | FIND_LIFE_AND_KO, null ) > 0 )
            return 0;
        else
        {
            fr.Stats[ FR_KILL_MIRON ] = 3;
            fr.Stats[ FR_LAST_MAFIA_QUEST_FAILED ] = ::__FullSecond;
            for( uint n = 0, nMax = players.length(); n < nMax; n++ )
            {
                ::Critter@ player = ::GetCritter( players[ n ] );
                if( valid( player ) )
                {
                    ::GameVar@ quest = ::GetLocalVar( LVAR_q_kill_miron, players[ n ] );
                    quest = 3;
                }
            }
        }
    }
    fr.DeleteLocation( map.GetLocation().Id );
    ::DeleteLocation( map.GetLocation().Id );
    return 0;
}


void _MordinoMan( ::Critter& cr, bool firstTime )
{
    if( firstTime )
    {
        ::Item@ weapon = cr.GetItem( 0, SLOT_HAND1 );
        if( !valid( weapon ) )
        {
            uint16[] weaponList = { Content::Item::VINDICATOR_MINIGUN, Content::Item::TURBO_PLASMA_RIFLE, Content::Item::M72_GAUSS_RIFLE };
            @weapon = cr.AddItem( weaponList[ ::Random( 0, weaponList.length() - 1 ) ], 1 );
        }
        cr.SkillBase[ weapon.Proto.Weapon_Skill_0 ] = ::Random( 150, 300 );
        ::Item@ ammo = cr.AddItem( weapon.Proto.Weapon_DefaultAmmoPid, weapon.Proto.Weapon_MaxAmmoCount * ::Random( 5, 15 ) );
#ifndef __NO_FAVORIT_ITEMS
        if( valid( weapon ) && cr.IsAnim1( weapon.Proto.Weapon_Anim1 ) )
            cr.SetFavoriteItem( SLOT_HAND1, weapon.GetProtoId() );
        cr.SetFavoriteItem( SLOT_HAND2, ammo.GetProtoId() );
#endif
        cr.StatBase[ ST_MAX_LIFE ] += ::Random( 600, 900 );
        cr.StatBase[ ST_CURRENT_HP ] = cr.Stat[ ST_MAX_LIFE ];
        cr.StatBase[ ST_ACTION_POINTS ] += 10;
        cr.PerkBase[ PE_TOUGHNESS ] = 3;
        cr.StatBase[ ST_PERCEPTION ] = ::Random( 10, 15 );
        cr.ModeBase[ MODE_NO_LOOT ] = 1;
        cr.ModeBase[ MODE_NO_STEAL ] = 1;
    }
    cr.SetEvent( CRITTER_EVENT_SHOW_CRITTER, "NRQuests::_MordinoSeeCr" );
}

void _MordinoSeeCr( ::Critter& cr, ::Critter& showCr )
{
    if( showCr.Param[ ST_NPC_ROLE ] != NRQuests::Define::MordinoMan && showCr.Param[ ST_NPC_ROLE ] != NRQuests::Define::RoleMiron )
    {
        ::NpcPlane@ plane = cr.GetCurPlane();
        if( !valid( plane ) )
            NpcPlanes::AddAttackPlane( cr, 1, showCr.Id, true );
        else
        {
            NpcPlanes::AddAttackPlane( cr, plane.Priority + 1, showCr.Id, true );
            cr.AddEnemyInStack( showCr.Id );
        }
    }
}

uint CreateFractionLocation( uint16 protoId, uint16 worldX, uint16 worldY, ::Fraction@ fr )
{
    ::Location@ loc = ::GetLocation( ::CreateLocation( protoId, worldX, worldY, null ) );
    if( valid( loc ) )
    {
        fr.AddLocation( loc.Id );
        loc.FractionId = fr.Id;
    }
    return loc.Id;
}
