// FOS Server
// Name:	ArroyoMynocDefence
// Author:	Sufir
// Defines

enum Defines
{
	QuestTimeout = 1,
	MinPlayers = 3,
	MinLvl = 5,
	MaxLvl = 24,
	DialogNumCount = 27,
	DialogNumLvl,
	DialogQuestUsed,
	DialogNumKarma
}

const uint ArroyoPosX
{
	get
	{
		return uint( 4 * __GlobalMapZoneLength - __GlobalMapZoneLength * 0.5 );
	}
}

const uint ArroyoPosY
{
	get
	{
		return uint( 3 * __GlobalMapZoneLength - __GlobalMapZoneLength * 0.5 );
	}
}

bool d_IsGroupExist( ::Critter& player, ::Critter@ npc)
{
	//Critter@[] group;
	if( !player.IsNotValid )
	{
		::Critter@ leader= ::GetCritter(GetLeaderId(player));
		if(validEngineObject(leader) )
		{
			//leader.GetFollowGroup(FIND_ALL, null);
			return (leader.GetFollowGroup(FIND_ALL, null)>0);
		}
	}
	return false;
}

bool d_IsGroupNotExist( ::Critter& player, ::Critter@ npc )
{
	return (!d_IsGroupExist(player,null));
}

bool d_IsQuestGroupLevelRight( ::Critter& player, ::Critter@ npc )
{
	if( !player.IsNotValid )
	{
		::array<::Critter@> group;
		::Critter@ 	leader = ::GetCritter(GetLeaderId(player)),
					cr=null;
		if(validEngineObject(leader) )
		{
			group.insertLast(@leader);
			// Проверяем уровни группы в которой состоит игрок берущий квест
			// если кто-то из участников группы не соответствует по уровню - отправляем на вариант диалога DIALOG_NUM_LVL
			for(uint i=0, iMax=leader.GetFollowGroup(FIND_ALL, group) + 1; i<iMax; i++)
			{
				@cr=group[i];
				if(validEngineObject(cr) && cr.IsPlayer())
				{
					// Если в группе есть НПС - пропускаем его, он может быть любого уровня.
					//if(cr.IsNpc()) continue;
					// Если хоть один из участников группы не соответсвует требованиям - отправляем на вариант диалога DIALOG_NUM_LVL
					if(cr.Stat[ST_LEVEL]<ArroyoMynoc::Defines::MinLvl || cr.Stat[ST_LEVEL] > ArroyoMynoc::Defines::MaxLvl) return false;
				}
			}
			return true;
		}
	}
	return false;
}

bool d_IsQuestGroupLevelNotRight( ::Critter& player, ::Critter@ npc )
{
	return (!d_IsQuestGroupLevelRight(player,null));
}

bool d_IsQuestGroupHaveGoodKarma( ::Critter& player, ::Critter@ npc )
{
	if( !player.IsNotValid )
	{
		::array< ::Critter@ > group;
		::Critter@ leader = ::GetCritter(GetLeaderId(player)),
					cr=null;
		if( validEngineObject(leader) )
		{
			group.insertLast(@leader);
			// Проверяем карму группы в которой состоит игрок берущий квест,
			// если суммарная карма или репутация в Арройо группы низкая - отправляем на вариант диалога DIALOG_NUM_KARMA
			int GroupKarma=0,
				ArroyoRep=0;
			for(uint i=0, iMax=leader.GetFollowGroup(FIND_ALL, group) + 1; i<iMax; i++)
			{
				@cr=group[i];
				if(validEngineObject(cr))
				{
					GroupKarma+=cr.Stat[ST_KARMA];
					if(cr.IsPlayer()) ArroyoRep+=cr.Reputation[REPUTATION_ARROYO];
				}
			}				
			if(GroupKarma<=-20 || ArroyoRep<=-10)
				return false;
			return true;
		}
	}
	return false;
}

bool d_IsQuestGroupHaveBadKarma( ::Critter& player, ::Critter@ npc )
{
	return (!d_IsQuestGroupHaveGoodKarma(player, null));
}

bool d_IsQuestActive( ::Critter& player, ::Critter@ npc )
{
	// Если квест уже взят другой группой - отправляем на вариант диалога DIALOG_QUEST_USED
	return (!TimeOutIsFree());
}

bool d_IsQuestNotActive( ::Critter& player, ::Critter@ npc )
{
	return (!d_IsQuestActive(player,null));
}

// Запуск квеста.
void r_StartQuest( ::Critter& player, ::Critter@ npc ) 
{
	// Квест ещё ни кем не брался. Даем квест игроку и его группе.
	// Тут мы проверим доступность квеста только по времени, все прочие проверки должны быть сделаны в диалоге зараниее.
	if(TimeOutIsFree()) StartQuest(player, 1);
}

// Запуск второй стадии квеста.
uint r_StartStage2( ::Critter& player, ::Critter@ npc ) 
{
	if( !player.IsNotValid )
	{
		// Находим группу в которой состоит игрок и лидера группы.
		//Critter@[] group;
		::Critter@ leader = ::GetCritter(GetLeaderId(player));
		if(validEngineObject(leader))
		{
			//group.insertLast(@leader);
			// Проверяем размер группы в которой состоит игрок берущий квест,
			// если размер группы меньше необходимого - отправляем на вариант диалога ArroyoMynoc::Defines::DialogNumCount
			if(leader.GetFollowGroup(FIND_ALL, null) + 1 < uint(ArroyoMynoc::Defines::MinPlayers)) return uint(ArroyoMynoc::Defines::DialogNumCount);
			StartQuest(player, 2);
			return 0;
		}
	}
	return ArroyoMynoc::Defines::DialogNumCount;
}

//=====ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ=====\\
// Вспомогательная функция, для запуска квеста, используется в r_StartQuest
void StartQuest( ::Critter& player, uint stage )
{
	if( player.IsNotValid )
		return;
	
	::Critter@ cr = ::GetCritter(GetLeaderId(player));
	if(!validEngineObject(cr) )
		return;
		
	::array< ::Critter@ > group = {@cr};
	
	const uint len = cr.GetFollowGroup(FIND_ALL, group) + 1;	// Находим группу в которой состоит игрок и лидера группы.
	// Проверяем размер группы в которой состоит игрок берущий квест,
	// если размер группы меньше необходимого - отправляем на вариант диалога ArroyoMynoc::Defines::DialogNumCount
	// Это на тот случай, если игроки поотцеплялись от лидера во время диалога.
	if(len<uint(ArroyoMynoc::Defines::MinPlayers)) return;
	@cr = null;
	// В первую очередь удаляем старую карту.
	// Если квест берёт новая группа - у предыдущей проваливаем квест.
	// Если группа берёт вторую стадию квеста, просто удаляем старую карту.
	DeleteRaidersCamp(stage==1);
	// Записываем текущий состав группы.
	::array<uint> LastGoupArrDef(len);
	for(uint i=0; i<len; i++) 
	{
		@cr=group[i];
		if(validEngineObject(cr))
			LastGoupArrDef[i]=cr.Id;
	}
	
	::SetAnyData("LastGoupArrDef", LastGoupArrDef);
	// Обнулим счётчик рейдеров, на всякий случай.
	::array<uint> RaidersCount={0};
	::SetAnyData("ArrouoRaidersCount", RaidersCount);
	// Создаем локацию, если не удалось прекращаем работу функции.
	// Локации создаем ориентируясь по стадиям квеста у лидера.
	::GameVar@ var = ::GetGlobalVar(GVAR_arroyo_mynoc_map);
	if(!valid(var)) return;
	switch(stage)
	{
		case 1:
		{
			const ::Location@ camp = _GetRaidersCamp(group);
			if(!validEngineObject(camp) ) 
				return;
			// Сохраняем идентификатор карты, для последующего удаления
			var=camp.Id;
			// Проходимся по всей группе и инициализируем квест у игроков не выполнявших (q_arroyo_mynoc_defence=0) его ранее
			// или проваливших его (q_arroyo_mynoc_defence=4 или 8). Все прочие в группе могут помочь, но не могут выполнить квест
			// и не получают опыт, соответственно.
			for(uint i=0; i<len; i++)
			{
				// Если в группе есть НПС - пропускаем его
				@cr=group[i];
				if(validEngineObject(cr) && cr.IsPlayer())
				{
					@ var= ::GetLocalVar(LVAR_q_arroyo_mynoc_defence, cr.Id);
					if(valid(var) && (var.GetValue()==0 || var.GetValue()==4 || var.GetValue()==8)) 
						var=1;
				}
			}
		} break;
		
		case 2:
		{
			const ::Location@ camp = _GetRaidersForce(group);
			if(!validEngineObject(camp) ) 
				return;
			// Сохраняем идентификатор карты, для последующего удаления
			var=camp.Id;
			// Проходимся по всей группе и меняем стадию выполненности квеста.
			for(uint i=0; i<len; i++)
			{
				// Если в группе есть НПС - пропускаем его
				@cr=group[i];
				if(validEngineObject(cr) && cr.IsPlayer())
				{
					@ var = ::GetLocalVar(LVAR_q_arroyo_mynoc_defence, group[i].Id);
					if(valid(var) && var.GetValue()==2) 
						var=3;
				}
			}
		} break;
		
		default: return;
	}
	// Устанавливаем таймаут для квеста.
	@ var = ::GetGlobalVar(GVAR_arroyo_mynoc_timeout);
	if(valid(var))
	{
		var=::__FullSecond + (60 * 60 * 24 * ArroyoMynoc::Defines::QuestTimeout);
		// И создаем событие в котором будем отслеживать не просрочился ли квест. Времени на квест в двое больше если нет других соискателей.
		::CreateTimeEvent(var.GetValue() + (60 * 24 * ArroyoMynoc::Defines::QuestTimeout), "ArroyoMynoc::e_TimeExpired", 0, true);
	}
}

// Проверка доступности квеста по времени.
bool TimeOutIsFree()
{
	// Считываем переменную arroyo_mynoc_timeout.
	::GameVar@ mynoc_timeout = ::GetGlobalVar(GVAR_arroyo_mynoc_timeout);
	if(!valid(mynoc_timeout)) return false;
	// Квест ещё ни кем не брался.
	if(mynoc_timeout.GetValue()==0)	return true;
	// Квест был взят игроками, но не выполнен.
	if(::__FullSecond >=uint(mynoc_timeout.GetValue()))
	{
		mynoc_timeout=0;
		return true;
	} 
	// Квест выполняется другими игроками и не может быть взят.
	return false;
}

// Удаление лагеря рейдеров.
void DeleteRaidersCamp(bool isFail)
{
	::GameVar@ camp = ::GetGlobalVar(GVAR_arroyo_mynoc_map);
	if(!valid(camp)) return;
	if(camp.GetValue() !=0)
	{
		::Location@ loc = ::GetLocation(camp.GetValue());
		if(!validEngineObject(loc) )
			return;
		::array<uint> oldGroup;
		if( ::GetAnyData("LastGoupArrDef", oldGroup) )
		{
			::Critter@ player=null;
			::Map@ player_map=null;
			::Location@ player_loc=null;
			::GameVar@ quest=null;
			// Ищем пользователей бравших квест, устанавливаем переменные и чистим их карты.
			for(uint i=0, iMax=oldGroup.length(); i<iMax; i++)
			{
				@ player = ::GetCritter(oldGroup[i]);
				if(!validEngineObject(player))  continue;
					// Проверяем где находится пользователь. Если в удаляемой локации - выкидываем его от туда.
				@ player_map = player.GetMap();
				if(validEngineObject(player_map))
				{
					@ player_loc = player_map.GetLocation();
					if(!validEngineObject(player_loc)) continue;
					if(player_loc.GetProtoId()==loc.GetProtoId())
					{
						// В локации найден игрок - переносим его на глобал.
						player.TransitToGlobal(false);
						player.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, 3483);
					}
					// Убираем локу с карты игрока
					if(player.IsKnownLoc(true, loc.Id)) 
						player.UnsetKnownLoc(true, loc.Id);
				}
				if(isFail)
				{
					// Если на данный момент у игрока задание всё ещё на стадии выполнения - устанавливаем провал.
					@ quest = ::GetLocalVar(LVAR_q_arroyo_mynoc_defence, player.Id);
					if(valid(quest) && quest.GetValue()==1 || quest.GetValue()==2 || quest.GetValue()==3 || quest.GetValue()==5) quest=8;
				}
			}
		}
		// И собственно удаление локации
		::DeleteLocation(loc.Id);
		camp=0;
	}
	// На всякий случай обнулим количество рейдеров.
	uint[] RaidersCount={0};
	::SetAnyData("ArrouoRaidersCount", RaidersCount);
}

// Вспомогательная функция. Возвращает лидера группы в которой состоит игрок.
uint GetLeaderId( ::Critter& player )
{
	if( player.IsNotValid )
		return 0;
		
	::Critter@ leader = player.GetFollowLeader();
	if(!validEngineObject(leader))
		@leader=player;
	if(validEngineObject(leader)) 
		return leader.Id;
	return 0;
}

// Устанавливаем таймер, не успел побить рейдеров - лузер...
uint e_TimeExpired( ::array<uint>@ values )
{
	::array<uint> RaidersCount(1);
	if( ::GetAnyData("LastGoupArrDef", RaidersCount) )
	{
		if(RaidersCount[0]==0) DeleteRaidersCamp(false);
		else DeleteRaidersCamp(true);
	} 
	else DeleteRaidersCamp(false);
	// Устанавливаем таймаут для квеста в 0.
	::GameVar@ mynoc_timeout = ::GetGlobalVar(GVAR_arroyo_mynoc_timeout);
	if(valid(mynoc_timeout)) mynoc_timeout=0;
	return 0;
}

// Локация 1 "Лагерь рейдеров" для первой части квеста.
::Location@ _GetRaidersCamp( ::array<::Critter@> group)
{
	int x=::Random(0, 1),
		y=::Random(-2, -1);
	uint locId= ::CreateLocation(
		LOCATION_arroyo_mynoc_defence1,
		(ArroyoPosX + x * ::__GlobalMapZoneLength) ,
		(ArroyoPosY + y * ::__GlobalMapZoneLength) ,
		group);
	if(locId==0) return null;
	::Location@ camp = ::GetLocation(locId);
	if(!validEngineObject(camp)) return null;
	// Это должно быть установлено в CITY.TXT
	camp.Visible=false;
	camp.AutoGarbage=false;
	camp.Radius=6;
	//camp.Color=0x3CFF0000;
	return camp;
}

// Локация 2 "Рейдеры атакующие караван" для второй части квеста.
Location@ _GetRaidersForce( Critter@[] group)
{
	int x = Random( 1, 2 ),
		y = Random( -1, 2 );
	uint locId= CreateLocation(
		LOCATION_arroyo_mynoc_defence2,
		( ArroyoPosX + x * __GlobalMapZoneLength + Random(int((-__GlobalMapZoneLength) * 0.5),int(__GlobalMapZoneLength * 0.5))),
		( ArroyoPosY + y * __GlobalMapZoneLength + Random(int((-__GlobalMapZoneLength) * 0.5),int(__GlobalMapZoneLength * 0.5))),
		group);
	if( locId == 0 ) return null;
	Location@ camp = GetLocation( locId );
	if( !validEngineObject( camp ) ) return null;
	// Это должно быть установлено в CITY.TXT
	camp.Visible = false;
	camp.AutoGarbage = false;
	camp.Radius = 6;
	//camp.Color=0x3CFF0000;
	return camp;
}