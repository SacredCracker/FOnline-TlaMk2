// FOS Server
// Author: rifleman17
// Mобы на нижнем уровне танкера. Унаследованный мобскрипт, за исключением того, что мобы не атакуют персонажа, у которого нет убийств гуманоидов, чужих, кентавров и флоатеров
// если заходит "чистюля" (далее, человек без киллов всех вышеперечисленных) мобы собираются со всего танкера и cледут за ним. Если зайдет кто-то другой - обычный скрипт, и чистюле тоже достанется
// твари следуют за игроком - для этого используется переменная StatBase[ST_VAR5] - пока не увидят кого то другого, тогда они стриают чистюлю из памяти и действуют по старой схеме
// чистюля может быть только один, если заходит второй - он стирается, его атакуют и второго тоже
// в независимости взят квест или нет, поведение не меняется

class TankerMob : Mob::MobDef
{
	TankerMob()
	{
		PriorityDescriptor = 120;
	}

	bool CritterShow( ::Critter& npc, ::Critter& player ) override
	{
		if (player.IsNpc()) return false;
		if(player.Id==uint(npc.Stat[ST_VAR5]) && IsCleanMan(player))
			return false;
			
		return Mob::MobDef::CritterShow(npc,player);//_ShowPlayer(cr,player);
	}
	
	void ShowCritter2(::Critter& cr, ::Critter& player) // ToDo
	{
		if(player.IsNpc()) return;
		if(cr.Stat[ST_VAR5]==0) return; // Это ловушка для чистюль исключительно
		NpcPlanes::AddAttackPlane(cr, AI_PLANE_ATTACK_PRIORITY + 1, player);
	}
	 
	bool CritterIdle(::Critter & cr) override
	{
		if (!cr.IsLife()) return false;
		if(cr.Stat[ST_VAR5]!=0)
		{
			// Одновременно на танкере может быть только один чистюля
			::Critter @ player=::GetCritter(cr.Stat[ST_VAR5]);
			if(valid(player))
			{
				// Проверка, что персонаж никого из своих не убил
				if(player.IsLife()&&IsCleanMan(player))
				{
					if(cr.IsSee(player)&&::GetCrittersDistantion(cr,player)<8)
					{
						::Map @ map=cr.GetMap();
						if(valid(map))
						{
							uint16 hX=player.HexX,
									hY=player.HexY;
							if(::GetFreeHex(map, 2, hX, hY))
								NpcPlanes::AddWalkPlane(cr, 0, hX, hY, 6, false, 0);
						}
					}
					return false; // Запоминание чистюли не сбито
				}
			}
		}
		cr.StatBase[ST_VAR5]=0;// Либо чистюля ушел, либо что-то еще, сбиваем запоминание
		return Mob::MobDef::CritterIdle(cr);
	}
	
	bool CritterDead(::Critter@ cr, ::Critter@ killer) override
	{
		Mob::MobDef::CritterDead(@cr, @killer);
		if(valid(killer) && killer.IsPlayer())
		{
			::GameVar @qVar=::GetLocalVar(LVAR_q_sf_ron_kill_beasts, killer.Id);
			if(valid(qVar) && qVar.GetValue()==1) qVar=2;
		}
			
		::Map @ map=cr.GetMap();
		if (!valid(map)) return true;
		// Остались живые мобы? TODO: сделать фильтр по бодитайпам нужным.
		if(map.GetCritters(0, FIND_LIFE_AND_KO|FIND_ONLY_NPC, null)==0)
		{
			::Critter @[] players;
			if(map.GetCritters(0, FIND_LIFE_AND_KO|FIND_ONLY_PLAYERS, players)>0)
			{
				::GameVar @ status;
				::Critter @ player;
				for(uint i=0, iMax=players.length(); i<iMax; i++)
				{
					@player=players[i];
					if(valid(player))
					{
						@status=::GetLocalVar(LVAR_q_sf_ron_kill_beasts, player.Id);
						if(valid(status) && status.GetValue()==2) status=3;
					}
				}
			}
		}
		return true;
	}
	
	/*void SmthDead(::Critter& cr, ::Critter& fromCrit, ::Critter@ killer) // ToDo
	{
		cr.StatBase[ST_VAR5]=0;
		Mob::MobDef::SmthDead(cr, fromCrit, killer);
	}*/
}

void TankerMapInit(::Map & map, bool firstTime)
{
	map.SetEvent(MAP_EVENT_IN_CRITTER, "MapSfTanker::_TankerInCritter");
}

void Init(::Critter& cr, bool firstTime)
{
	MapSfTanker::TankerMob expan();
	if( Critter::NewDescriptor( cr, expan ) )
	{
		expan.CritterInit( cr, firstTime );
	}
}

void _TankerInCritter(::Map& map, ::Critter& cr)
{
	if (cr.IsNpc()) return;
	if (!IsCleanMan(cr)) return;
	::Critter@[] critters;
	map.GetCritters(0, FIND_ALL|FIND_ONLY_NPC, critters);
	::Critter @ mob;
	for(uint i=0, iMax=critters.length(); i<iMax; i++)
	{
		@ mob=critters[i];
		mob.StatBase[ST_VAR5]=cr.Id;
	}
}

bool IsCleanMan(::Critter & player)
{
	if (player.IsNpc()) return false;
	return player.Stat[ST_LEVEL]>10&&player.Kill[KILL_MEN]==0&&player.Kill[KILL_WOMEN]==0&&player.Kill[KILL_FLOATER]==0&&player.Kill[KILL_CENTAUR]==0&&player.Kill[KILL_ALIEN]==0;
}

// ДИАЛОГ: Динамическая награда, зависит от уровня игрока
void r_GrantPlayer(::Critter & player, ::Critter @ npc)
{
	uint lvl=player.Stat[ST_LEVEL];
	uint koef=lvl%10+1;
	player.StatBase[ST_EXPERIENCE]+=(koef*100)*player.Stat[ST_LEVEL]; // 1 ур=100, 50 ур=30 000
}

// Квестовые мертвые панки
void _DeadsInit(::Critter & cr, bool firstTime)
{
	if (!cr.IsDead()) cr.ToDead(ANIM2_DEAD_FRONT,null);
	cr.StatBase[ST_REPLICATION_TIME]=-1;
	cr.SetEvent(CRITTER_EVENT_SMTH_USE_SKILL, "MapSfTanker::_SmthUseSkill");
}

void _SmthUseSkill(::Critter& cr, ::Critter& fromCr, int skill, ::Critter@ onCritter, ::Item@ onItem, ::Scenery@ onScenery)
{
	if (fromCr.IsNpc()) return;
	if(skill!=SK_SCIENCE) return;
	if (!valid(onCritter)) return;
	if(onCritter.Id!=cr.Id) return;
	::GameVar @ qVar=::GetLocalVar(LVAR_q_sf_ron_findbodies, fromCr.Id);
	if (!valid(qVar)) return;
	::GameVar @ status=::GetUnicumVar(UVAR_npc_story, cr.Id, fromCr.Id);
	if (!valid(status)) return;
	if(qVar.GetValue()>0&&qVar.GetValue()<5&&status.GetValue()==0)
	{
		qVar=qVar.GetValue()+1;
		status=1;

		::GameVar @ centNoticed=::GetLocalVar(LVAR_sf_tanker_centaur_noticed, fromCr.Id);
		::GameVar @ flotNoticed=::GetLocalVar(LVAR_sf_tanker_floater_noticed, fromCr.Id);

		if(valid(centNoticed)&&valid(flotNoticed))
		{
			if(centNoticed.GetValue()==0&&::Random(1,150)<fromCr.Skill[SK_SCIENCE])
			{
				centNoticed=1;
			}
			if(flotNoticed.GetValue()==0&&::Random(1,150)<fromCr.Skill[SK_DOCTOR])
			{
				flotNoticed=1;
			}
		}

	}
}