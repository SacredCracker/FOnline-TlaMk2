// FOS Server

#define SIERRA_BASE                        (0)
#define MARIPOSA_BASE                      (1)
#define CATHEDRAL_BASE                     (2)
#define BASE_TIMEOUT    #(base, val1, val2, val3)           (base==MARIPOSA_BASE?val1:(base==CATHEDRAL_BASE?val2:val3))

// Количество этапов удержания базы, с финальным включительно, НАЧИНАЯ С НУЛЕВОГО.
// Под этапом подразумевается атака на базу мобов, в финальном этапе появляется сама машина.
#define BASE_NUMBER_OF_CYCLES 	           (3)
#define BASE_REFRESH_TIME                  (REAL_MINUTE(::Random(5, 9))) // Время цикла удержания базы
#define CAR_WAIT_TIME                      (REAL_MINUTE(::Random(2, 3)))	// Время ожидания машины на базе

#define ORG_ENCLAVE                        (1)
#define ORG_BOS                            (2)
#define ORG_MOB							   (3)

#define ENTIRE_SUPPLY_CAR                  (50)							// Номер энтайр респа машины
#define EXP_DEFENCE                        (100)						// Опыт, за удачное удержание
#define EXP_FRACTION                       (32)   					    // Количество очек насчитанное для фракции за круг

#define LEVEL_BASE							(0)		// Ячейка масива карты, куда будет записан уровень удержания базы
#define STAGE_BASE							(1)		// Ячейка масива карты, куда будет записана текущий этап уровня удержания базы
#define ORG_BASE							(2)		// Ячейка масива карты, куда будет записана принадлежность базы
#define INDEX_BASE							(3)		// Ячейка масива карты, куда будет записан индекс данной базы
#define FRACTION_BASE						(4)		// Ячейка масива карты, куда будет записан индекс данной базы

#define MSG_ID_BASE_PROTECT (100013) //{}{База успешно защищена.}

const ::array<uint> GvarTimeEvent = { GVAR_base_sierra_time_event_id,GVAR_base_mariposa_time_event_id,GVAR_base_cathedral_time_event_id};
const ::array<int> BaseIndex = { LOCATION_Sierra, LOCATION_MilitaryBase, LOCATION_Cathedral}; // Масив констант пидов локаций
const ::array<int> ScoreCur = { SCORE_SIERRA_CUR,SCORE_MARIPOSA_CUR,SCORE_CATHEDRAL_CUR};	// Текущая принадлежность базы группировке
const ::array<int> ScoreOrg = { SCORE_SIERRA_ORG,SCORE_MARIPOSA_ORG,SCORE_CATHEDRAL_ORG};	// Текущая принадлежность базы фракции БоС или Анклав
const ::array<int> ScoreBest = { SCORE_SIERRA_BEST,SCORE_MARIPOSA_BEST,SCORE_CATHEDRAL_BEST};

int GetIndexBaseByPid(int base)
{
	for(uint i=0, iMax=BaseIndex.length(); i<iMax; i++)
		if(BaseIndex[i]==base) return i;
	Log("Ошибка. Военной базы не существует");
	return -1;
}

// Захват базы
void r_BaseTo( ::Critter& player, ::Critter@ terminal, int org)
{
	::Map@ map = player.GetMap();
	if(!validEngineObject(map)) return;
	
	::Location@ LocBase=map.GetLocation();
	if(!validEngineObject(LocBase)) return;
	int base=GetIndexBaseByPid(LocBase.GetProtoId()),
		indexBase=GetIndexBaseByPid(LocBase.GetProtoId());	// Порядковый номер базы

	// Обнуление таймевентов и уровней удержания базы
	::GameVar@ varTE = ::GetGlobalVar(GvarTimeEvent[base]);
	if(!valid(varTE)) return;
	if(varTE!=0)
	{
		::EraseTimeEvent(varTE.GetValue());
		varTE=0;
	}
	@ map=LocBase.GetMapByIndex(0);	// Первая карта локации, на которой и будет проходить атака
	if(!validEngineObject(map)) return;
	ClearBase(map);	
	map.SetData(ORG_BASE, org);				// Запись текущей организации, за которую захвачена база
	map.SetData(INDEX_BASE, base);			// Запись текущей организации, за которую захвачена база
	map.SetData(FRACTION_BASE, player.Stat[ST_FACTION]);			// Запись текущей фракции, которая захватила базу

	::SetBestScore(ScoreCur[base],null, Fractions::GetName(player.Stat[ST_FACTION]));	// Текущая фракция, захватившая базу
	::SetBestScore(ScoreOrg[base],null,org==ORG_ENCLAVE?"Enclave":"Br. of Steel");	// Текущая принадлежность базы
	
	varTE = ::CreateTimeEvent( ::__FullSecond+BASE_REFRESH_TIME/BASE_NUMBER_OF_CYCLES,"Base::e_BaseRefresh", map.Id, true);	// Запустить евент на удержание базы
}

// Проверка, есть ли хоть один криттер с захватившей фракции на базе.
bool FractionInMap( ::Map@ map )
{
	::array<::Critter@> groups;
	int fraction = map.GetData(FRACTION_BASE);
	for(uint i=0, iMax=map.GetCritters(0,FIND_LIFE_AND_KO|FIND_ONLY_PLAYERS,groups);  i<iMax; i++)
		if(validEngineObject( groups[i] ) && fraction == groups[i].Stat[ST_FACTION] && groups[i].Mode[MODE_HIDE] == 0) 
			return true;
	return false;
}

// Проверка, есть ли хоть один криттер с захватившей фракции на базе.
bool TrooperInMap( ::Map@ map)
{
	if(!validEngineObject(map))
		return true;
		
	uint count = 0;
	uint minCount = 4; //вот твоя четверка
 
	::array<::Critter@> groups;
	for(uint i=0, iMax=map.GetCritters(0,FIND_LIFE_AND_KO|FIND_ONLY_NPC,groups);  i<iMax; i++)
		if(groups[i].Stat[ST_TEAM_ID]==TEAM_BoSTrooper || groups[i].Stat[ST_TEAM_ID]==TEAM_EnclaveTrooper) 
			count++;

	//Log("count " + count + " minCount " + (minCount+1));
	return (count >= minCount);
}
//Очистка базы
void ClearBase( ::Map@ map)
{
	if(!validEngineObject(map)) return;
	// Очистка статистики
	::SetBestScore(ScoreCur[map.GetData(INDEX_BASE)], null, "---");
	::SetBestScore(ScoreOrg[map.GetData(INDEX_BASE)], null, "---");

	map.SetData(STAGE_BASE, 0);			// Обнуления этапа уровня удержания базы
	map.SetData(LEVEL_BASE, 0);			// Обнуление уровня удержания базы
	map.SetData(FRACTION_BASE, 0);			// Обнуление уровня удержания базы

	// Обнуление таймевентов
	::GameVar@ varTE = ::GetGlobalVar(GvarTimeEvent[map.GetData(INDEX_BASE)]);
	if(varTE!=0)
	{
		::EraseTimeEvent(varTE.GetValue());
		varTE=0;
	}

	// Удаление атакующих НПЦ
	::array<::Critter@> npcs = {};
	for(uint i=0, iMax=map.GetCritters(0,FIND_ALL|FIND_ONLY_NPC,npcs);	i<iMax;	i++)
		if(validEngineObject( npcs[i] ) && npcs[i].Stat[ST_ROLE_CITY] == CITY_BASE_ATACKER ) 
			NpcMenegeLib::_CritterDead(npcs[i], null);
}

uint e_BaseRefresh( uint[]@ values)
{
	if( values is null )
		return 0;
		
	Map@ map = GetMap( values[0] );
	if( !validEngineObject( map ) ) 
		return 0;
	
	int level = map.GetData( LEVEL_BASE ),
		stage = map.GetData( STAGE_BASE ),
		base = map.GetData( INDEX_BASE ),
		org = map.GetData( ORG_BASE );

	//Если база контролируется игроком, запускается новый цикл удержания.
	// Количество этапов увеличивается на единицу, после каждых четырех удержаний. 
	if(!FractionInMap(map)) 
	{
		ClearBase(map);
		return 0;
	}
	
	uint timeout = BASE_REFRESH_TIME / uint( BASE_NUMBER_OF_CYCLES + level * 0.25 );
	
	// Если на карте есть живые штурмовики, то просто добавить ещё пустой цикл
	if(TrooperInMap(map))
		return timeout;

	// Если спавнить машину ещё не пора, то следующая волна.
	if( stage < int( BASE_NUMBER_OF_CYCLES + level * 0.25 ) )
	{
		SetupWaves(base, org, level);
		map.SetData(STAGE_BASE, stage+1);
		return timeout;
	}

	// Если уже пора
	map.SetData(STAGE_BASE, 0);			// Обнуляем текущий уровень цикла удержания базы
	if( level < 50 ) map.SetData( LEVEL_BASE, level + 1 );	// Цикл удержания увеличивается на единицу

	// СПАВНИМ МАШИНУ
	//Если уровень выше 5 - заспавнить мобов во время респа машины
	if( level > 5 ) SetupWaves(base, org, level);
	CreateSupplyCar(map, level>20?20:level, base, org);
	if( level > 20 ) CreateSupplyCar(map, 20, base, org); // Если больше 20-ти кругов, то спавним дополнительную машину
	
	// Activate militia on Cathedral
	if( base == CATHEDRAL_BASE )
	{
		::array<::Critter@> players;
		uint jMax = map.GetCritters( 0, FIND_LIFE_AND_KO|FIND_ONLY_PLAYERS, players );
		if( jMax > 0 )
		{
			::Critter@ npc = null;
			for( uint i=0, iMax = map.GetNpcCount( 33, FIND_LIFE_AND_KO ); i < iMax; i++ ) 
			{
				@npc = map.GetNpc (33, FIND_LIFE_AND_KO, i);
				if( validEngineObject( npc ) )
					for( uint j = 0; j < jMax; j++ ) 
						if( validEngineObject( players[ j ] ) )
							NpcPlanes::AddAttackPlane( npc, 0, players[ j ] );
			}
		}
	}
	
	// Начисление опыта, за удержание базы.
	::array<::Critter@> groups;
	for(uint i=0, iMax=map.GetCritters(0,FIND_LIFE_AND_KO|FIND_ONLY_PLAYERS,groups); i<iMax; i++)
		if(validEngineObject( groups[i] ) && groups[i].Stat[ST_FACTION] == map.GetData(FRACTION_BASE))
		{
			groups[i].SayMsg(SAY_NETMSG,TEXTMSG_TEXT,MSG_ID_BASE_PROTECT);
			groups[i].Say(SAY_NETMSG," "+level);	 
		}
		
	// И начисление фракционных очек
	::Fraction fr = Fractions::Get(map.GetData(FRACTION_BASE));
	if(valid(fr)) 
		fr.Stats[FR_RATING]+=EXP_FRACTION*level;	

	// Обновление статистики принадлежности
	::GameVar@ varEnclaveScore = ::GetGlobalVar(GVAR_base_enclave_score);
	if(!valid(varEnclaveScore)) return 0;
	::GameVar@ varBosScore = ::GetGlobalVar(GVAR_base_bos_score);
	if(!valid(varBosScore)) return 0;
	if(org==ORG_ENCLAVE) varEnclaveScore+=1;
	else if(org==ORG_BOS) varBosScore+=1;
	if(varEnclaveScore > varBosScore) ::SetBestScore(SCORE_BASE_BEST_ORG,null,"Enclave");
	else if(varEnclaveScore < varBosScore) ::SetBestScore(SCORE_BASE_BEST_ORG,null,"Br. of Steel");
	else ::SetBestScore(SCORE_BASE_BEST_ORG,null,"<draw>");

	return timeout;
}

void Taxi( ::Critter& player, int level, int base, int org)
{
	::Map@ map = player.GetMap();
	if( validEngineObject(map) )
		CreateSupplyCar(map, level, base, org);
}

void CreateSupplyCar( ::Map& map, int level, int base, int org)
{	
	::Location@ loc = map.GetLocation();
	if(!validEngineObject(loc)) return;
	::Map@ map0 = loc.GetMapByIndex(0);
	if(!validEngineObject(map0)) return;
	
	Entires::Entire[] entires;
	Entires::ParseEntires(map,entires,ENTIRE_SUPPLY_CAR);
	uint16 carPid = ::Random(1, 500) < (499 - level * 0.20) ? Content::Item::SCOUT : Content::Item::HIGHWAYMAN;
	::Item@ car = null;
	
	for(int i=0, iMax=entires.length(); i<iMax; i++)
	{
		Entires::Entire@ ent=entires[i];
		if(map.CheckPlaceForItem(ent.HexX,ent.HexY,carPid))
		{
			@car = map.AddItem(ent.HexX,ent.HexY,carPid,1);
			map.PlaySound("carbreaks.ogg");
			break;
		}
	}

	if(!validEngineObject(car)) return;
	::Item@ bag = car.GetChild(0);
	uint keyId = ::Random(10000,50000);
	car.Charge = ::Random(0,car.Proto.Car_TankVolume);	
	if( carPid != Content::Item::HIGHWAYMAN ) 
	{
		::CreateTimeEvent( ::__FullSecond+CAR_WAIT_TIME,"Base::e_DeleteCar",car.Id,true);
		car.LockerId=1;
	}
	else 
	{
		car.LockerId=keyId;
		if(validEngineObject(bag))
		{
			bag.LockerId=keyId;
			bag.LockerComplexity = ::Random(80, 100);
			bag.Update();
			::Item@ key=bag.AddItem(Content::Item::KEY,1,0);
			if(validEngineObject(key))
			{
				key.LockerId=keyId;
				key.Update();
			}
		}
	}
	car.Update();

	// Fill bag begin	
	// Предметы, необходимые для крафта
	// Уникальные предметы
	// Общие предметы
	// Марипоза
	// Собор
	// Сиерра
	// Анклав
	//     Марипоза
	//     Собор
	//     Сиерра
	// БС
	//     Марипоза
	//     Собор
	//     Сиерра
	if(validEngineObject(bag))
	{
		SETFLAG(bag.LockerCondition, LOCKER_FACTION);
		bag.LockerId=map0.GetData(FRACTION_BASE);
		
		if(level>2)
		{
			FillBag(bag,::Pids_BooksMedium,1,1,30);
			if(level>4) 
			{
				FillBag(bag,Content::Item::AMMO_FRAG_SHELLS,22+level*3,37+level*3,100+level*2);
				FillBag(bag,Content::Item::AMMO_CANNON_BALLS_FRAG,9+level*2,17+level*2,100+level*2);
				FillBag(bag,::Pids_DrugsMajor,1,3,25+level*2);
				FillBag(bag,::Pids_BooksMedium,1,1,30);
				FillBag(bag, Content::Item::BOZAR,1,1,25+level*3, BASE_TIMEOUT(base, GVAR_timeout_bosar_mariposa, GVAR_timeout_bosar_cathedral, GVAR_timeout_bosar_sierra), 600);
				FillBag(bag, Content::Item::METAL_STORM,1,1,12+level*3, BASE_TIMEOUT(base, GVAR_timeout_STORM_mariposa, GVAR_timeout_STORM_cathedral, GVAR_timeout_STORM_sierra), 600);
				FillBag(bag, Content::Item::DOUBLE_LASER_RIFLE,1,1,12+level*4);
				FillBag(bag,Content::Item::AMMO_4_7MM_CASELESS,220+level*32,520+level*32,300+level*40);
				FillBag(bag,Content::Item::AMMO_MICRO_FUSION_CELL,14+level*12,44+level*12,220+level*29);
				FillBag(bag,Content::Item::AMMO_CANNON_BALLS,14+level*4,24+level*4,210+level*16);
				
				if(level>8) 
				{
					FillBag(bag,Content::Item::SUPER_STIMPAK,5+level,14+level*2,150+level*20);
					FillBag(bag,Content::Item::GATLING_LASER,1,1,6+level*2, BASE_TIMEOUT(base, GVAR_timeout_GATLING_mariposa, GVAR_timeout_GATLING_cathedral, GVAR_timeout_GATLING_sierra), 4500);
					FillBag(bag, Content::Item::GRANADE_REVOLV_II,1,1,20+level*15);
					FillBag(bag, Content::Item::TESLA_PISTOL,1,1,25+level*5, BASE_TIMEOUT(base, GVAR_timeout_TESLA_PISTOL_mariposa, GVAR_timeout_TESLA_PISTOL_cathedral, GVAR_timeout_TESLA_PISTOL_sierra), 360);
					FillBag(bag,Content::Item::AMMO_700_NITRO_EXPRESS,32+level*3,47+level*3,150+level*16, BASE_TIMEOUT(base, GVAR_timeout_700_NITRO_mariposa, GVAR_timeout_700_NITRO_cathedral, GVAR_timeout_700_NITRO_sierra), 80);
					
					if(level>9)
					{
						
						FillBag(bag,Content::Item::AMMO_50_CAL,5+level*5,30+level*2,100+level*2, BASE_TIMEOUT(base, GVAR_timeout_50_CAL_mariposa, GVAR_timeout_50_CAL_cathedral, GVAR_timeout_50_CAL_sierra), 360);
						FillBag(bag,Content::Item::TECHNICAL_MANUAL,1,1,4+level*2);
						FillBag(bag,Content::Item::IMPULSE_GENERATOR,1,1,2+level*2);	
						FillBag(bag,Content::Item::ALIEN_LASER_PISTOL,1,1,2+level*2);	// Пистолет пришельцев
						FillBag(bag,Content::Item::ELEPHANT_GUN,1,1,60+level*30, BASE_TIMEOUT(base, GVAR_timeout_ELEPHANT_mariposa, GVAR_timeout_ELEPHANT_cathedral, GVAR_timeout_ELEPHANT_sierra), 720);		// Слонобой
						FillBag(bag,Content::Item::PANCOR_JACKHAMMER_MK2,1,1,10+level*10, BASE_TIMEOUT(base, GVAR_timeout_JACKHAMMER_MK2_mariposa, GVAR_timeout_JACKHAMMER_MK2_cathedral, GVAR_timeout_JACKHAMMER_MK2_sierra), 1200);
						FillBag(bag, Content::Item::HEAVY_ASSAULT_RIFLE,1,1,20+level*4);		
						FillBag(bag, Content::Item::TURBO_PLASMA_RIFLE,1,1,50+level*10);
						
						if(level>11) 
						{
							FillBag(bag,Content::Item::AMMO_2MM_EC,39+level*7,55+level*7,100+level*40, BASE_TIMEOUT(base, GVAR_timeout_2MM_mariposa, GVAR_timeout_2MM_cathedral, GVAR_timeout_2MM_sierra), 80);
						
							if(level>13) 
							{
								FillBag(bag,Content::Item::ANTITANK,1,1,5+level*3, BASE_TIMEOUT(base, GVAR_timeout_ANTITANK_mariposa, GVAR_timeout_ANTITANK_cathedral, GVAR_timeout_ANTITANK_sierra), 3600);
								
								if(level>15) 
								{
									bag.AddItem(Content::Item::BOTTLE_CAPS, ::Random(5000,8000),0);
								}
							}
						}
					}		
				}
			}
		}
		
		//Предметы, необходимые для крафта
		//------------------------------------------------------------
		FillBag(bag,Content::Item::CHEMISTRY_MANUAL,1,1,30+level*10);
		FillBag(bag,Content::Item::PARTS_PLASMA_RIFLE,1,1,30+level*10);
		FillBag(bag,Content::Item::REFINED_ORE,6,12,40+level*10);
		FillBag(bag,Content::Item::LUBRICANT_MK2,1,1,5+level*1);
		//------------------------------------------------------------

				
		//------------------------------------------------------------
		FillBag(bag,Content::Item::JUMPSUIT,1,1,10);	     // Костюм жителя убежища
		FillBag(bag,Content::Item::DECOMPOSING_BODY,1,1,10);
		FillBag(bag,Content::Item::BLOW_UP_DOLL,1,1,10);
		FillBag(bag,Content::Item::POPPED_BLOW_UP_DOLL,1,1,10);	
	
		//------------------------------------------------------------
		
		// Деньги
		FillBag(bag,Content::Item::BOTTLE_CAPS,1000+level*200,5000+level*200,800);
		if(carPid==Content::Item::HIGHWAYMAN) 
			bag.AddItem(Content::Item::BOTTLE_CAPS,100000,0);
		
		// Книги
		FillBag(bag,::Pids_BooksMedium,1,1,30);
		
		// Алкоголь и еда
		FillBag(bag,::Pids_DrugsAlcohol,2,4,85);
		FillBag(bag,::Pids_MiscFood,2,4,85);
		
		// Наркотики
		FillBag(bag,::Pids_DrugsMinor,1,4,45);
		FillBag(bag,Content::Item::STIMPAK,8+level*3,20+level*3,500+level*50);
		
		FillBag(bag, ::Pids_WeaponPistolMachineGunMajor,1,1,15+level*2);
		FillBag(bag, Content::Item::SNIPER_RIFLE,1,1,120+level*12);
		
		FillBag(bag, Content::Item::ANACONDA,1,1,80+level*12);
		FillBag(bag, Content::Item::MORTAR,1,1,80+level*12);
		
		FillBag(bag, Content::Item::ROCKET_LAUNCHER,1,1,150+level*10);
		FillBag(bag, Content::Item::MACHINEGUN_10MM,1,1,80+level*10);
		FillBag(bag, ::Pids_WeaponBigGunsMinor,1,1,20);
		
		FillBag(bag, Content::Item::LASER_RIFLE,1,1,180);
		FillBag(bag, Content::Item::PLASMA_RIFLE,1,1,100+level*10);
		
		FillBag(bag, Content::Item::MACHINEGUN_14MM,1,1,100+level*10);
		
		FillBag(bag, Content::Item::LOUISVILLE_SLUGGER,1,1,100+level*8);
		FillBag(bag, Content::Item::SUPER_SLEDGE,1,1,60+level*15);
		
		if(level<2)
		{
			FillBag(bag, ::Pids_WeaponMeleeMinor,1,2,48);
			FillBag(bag, ::Pids_WeaponUnarmedMinor,1,2,60);
		}
		else 
		{
			FillBag(bag, ::Pids_WeaponMeleeMajor,1,2,35);
			if(level<4)FillBag(bag, Content::Item::POWER_FIST,1,1,200+level*15);
			else FillBag(bag, Content::Item::MEGA_POWER_FIST,1,1,100+level*10);
		}

		//Боеприпасы
		FillBag(bag,Content::Item::AMMO_223_FMJ,285+level*15,330+level*15,220+level*25);
		FillBag(bag,Content::Item::AMMO_SMALL_ENERGY_CELL,25+level*10,85+level*10,310+level*39);
		FillBag(bag,::Pids_AmmoMinor,45+level*11,115+level*11,46+level*4);
		FillBag(bag,Content::Item::AMMO_14MM_AP,38+level*6,46+level*6,240+level*38);
		FillBag(bag,Content::Item::AMMO_40MM_GRANADE,18+level*4,26+level*4,210+level*16);
		FillBag(bag,Content::Item::AMMO_EXPLOSIVE_ROCKET,11+level,17+level,210+level*26);
		FillBag(bag,Content::Item::SMOKE_GRENADE,4+level,8+level,100+level*20);
		FillBag(bag,Content::Item::MUSTARD_GAS_GRENADE,4+level,8+level,100+level*20);
		FillBag(bag,Content::Item::FRAG_GRENADE,14+level*2,18+level*2,200+level*30);
		FillBag(bag,Content::Item::PLASMA_GRENADE,14+level*2,18+level*2,200+level*30);
		
		FillBag(bag,::Pids_MiscPartsBasic,2,5,35+level*2);
		FillBag(bag,::Pids_MiscPartsBody,1,1,5);
		FillBag(bag,::Pids_MiscOther,1,1,10);

		FillBag(bag,::Pids_MiscToolsMediacal,1,1,23);	
		FillBag(bag,::Pids_MiscToolsTech,1,1,15);	
				
		::GameVar@ timeout_motivator = ::GetGlobalVar(GVAR_timeout_motivator);
		if(valid(timeout_motivator) && ::__FullSecond>uint(timeout_motivator.GetValue()))
		{
			bag.AddItem(Content::Item::MOTIVATOR, 1, 0);
			timeout_motivator=::__FullSecond+REAL_HOUR(::Random(72,120));
			Log("Добавлено на базу 1 Content::Item::MOTIVATOR");
		}
			
		::GameVar@ timeout_motivator_k9 = ::GetGlobalVar(GVAR_timeout_motivator);
		if(valid(timeout_motivator_k9) && uint(timeout_motivator_k9.GetValue()) < ::__FullSecond)
		{
			bag.AddItem(Content::Item::K9_MOTIVATOR, 1, 0);
			timeout_motivator_k9=::__FullSecond + REAL_HOUR(::Random(96,144));
			Log("Добавлено на базу 1 Content::Item::K9_MOTIVATOR");
		}
			
		::GameVar@ timeout_oil_can = ::GetGlobalVar(GVAR_timeout_oil_can);
		if(valid(timeout_oil_can) && uint(timeout_oil_can.GetValue())<::__FullSecond)
		{
			bag.AddItem(Content::Item::OIL_CAN_TRUE, 1, 0);
			timeout_oil_can=::__FullSecond+REAL_HOUR(::Random(8,10));
			Log("Добавлено на базу 1 Content::Item::OIL_CAN_TRUE");
		}
		
		if(base==MARIPOSA_BASE)
		{
			if(level>4)
			{
				FillBag(bag,Content::Item::SUPER_STIMPAK,3+level,12+level,150+level*20);
				FillBag(bag,Content::Item::AMMO_4_7MM_CASELESS,220+level*32,520+level*32,30+level*10);
				FillBag(bag,Content::Item::AMMO_MICRO_FUSION_CELL,14+level*12,44+level*12,20+level*10);
				FillBag(bag,Content::Item::AMMO_CANNON_BALLS,14+level*4,24+level*4,20+level*10);
				FillBag(bag,Content::Item::AMMO_FRAG_SHELLS,22+level*3,37+level*3,20+level*5);
				FillBag(bag,Content::Item::AMMO_CANNON_BALLS_FRAG,9+level*2,17+level*2,20+level*3);
				
				if(level>15) 
				{
					bag.AddItem(Content::Item::BOTTLE_CAPS,::Random(5000,8000),0);
				}
			}
			
			FillBag(bag,Content::Item::BOTTLE_CAPS,1000+level*200,5000+level*200,800);
			FillBag(bag,::Pids_ArmorLight,1,3,150);
			FillBag(bag,::Pids_ArmorMetal,1,2,150);
			FillBag(bag,::Pids_DrugsAntiRad,2,4,46);
			FillBag(bag,Content::Item::STIMPAK,8+level*3,20+level*3,650+level*69);
			FillBag(bag,::Pids_WeaponShotgunsMinor,1,1,15);
			FillBag(bag,::Pids_WeaponPistolMachineGunMinor,1,1,15);	
			FillBag(bag,::Pids_WeaponPistolsMajor,1,1,15);
			FillBag(bag,Content::Item::AMMO_HN_NEEDLER_CARTRIDGE,25+level*11,50+level*10,150+level*20);
			FillBag(bag,Content::Item::AMMO_7_62MM,210+level*32,215+level*32,250+level*35);
			FillBag(bag,Content::Item::AMMO_5MM_JHP,450+level*40,600+level*40,250+level*30);
			FillBag(bag,Content::Item::AMMO_EXPLOSIVE_ROCKET,16+level,21+level,130+level*20);
			FillBag(bag,Content::Item::AMMO_FLAMETHROWER_FUEL,52+level*6,73+level*6,250+level*26);
			FillBag(bag,Content::Item::AMMO_FLAMETHROWER_FUEL_MK_II,22+level*5,35+level*5,150+level*30);
			FillBag(bag,Content::Item::AMMO_223_FMJ,285+level*15,330+level*15,50+level*10);
			FillBag(bag,Content::Item::AMMO_SMALL_ENERGY_CELL,25+level*10,85+level*10,30+level*10);
			FillBag(bag,::Pids_AmmoMinor,45+level*11,115+level*11,80+level*20);
			FillBag(bag,Content::Item::AMMO_14MM_AP,38+level*6,46+level*6,50+level*10);
			FillBag(bag,Content::Item::AMMO_40MM_GRANADE,18+level*4,26+level*4,20+level*10);
			FillBag(bag,Content::Item::AMMO_EXPLOSIVE_ROCKET,11+level,17+level,20+level*10);
			FillBag(bag,Content::Item::FRAG_GRENADE,14+level*2,18+level*2,200+level*30);
			FillBag(bag,Content::Item::PLASMA_GRENADE,14+level*2,18+level*2,200+level*30);
			FillBag(bag,Content::Item::WELDING_MK2,1,3,100);
			FillBag(bag,Content::Item::CHEMICALS_MK2,1,2,100);
			FillBag(bag,Content::Item::ELECTRO_MAGNET,1,1,50);
			FillBag(bag,Content::Item::PLANK,1,1,20);
			FillBag(bag,Content::Item::ROBOT_MOTIVATOR_MK2,1,1,3);
			FillBag(bag,Content::Item::NAVCOM_PARTS,1,1,1);
			FillBag(bag,Content::Item::SUPER_CAPACITOR_MK2,1,1,10);
			FillBag(bag,Content::Item::ELECTRO_MAGNET_MK2,1,1,1);
			FillBag(bag,Content::Item::PLASMA_TRANSFORMER_MK2,1,1,5);
			FillBag(bag,Content::Item::SUPER_CAPACITOR,1,1,18);
			FillBag(bag,Content::Item::IMPULSE_GENERATOR_MK2,1,1,5);
		}
		else if(base==CATHEDRAL_BASE)
		{			
			if(level>4)
			{
				FillBag(bag,Content::Item::SUPER_STIMPAK,3+level,12+level,150+level*20);
				FillBag(bag,Content::Item::AMMO_MICRO_FUSION_CELL,14+level*12,44+level*12,20+level*10);
				FillBag(bag,Content::Item::AMMO_CANNON_BALLS,14+level*4,24+level*4,20+level*10);
				FillBag(bag,Content::Item::AMMO_FRAG_SHELLS,22+level*3,37+level*3,20+level*5);
				FillBag(bag,Content::Item::AMMO_CANNON_BALLS_FRAG,9+level*2,17+level*2,20+level*3);
				
				if(level>15) 
				{
					bag.AddItem(Content::Item::BOTTLE_CAPS,::Random(5000,8000),0);
				}
			}
		
			FillBag(bag,Content::Item::BOTTLE_CAPS,1000+level*200,5000+level*200,800);
			FillBag(bag,Content::Item::PURPLE_ROBE,1,2,250);
			FillBag(bag,::Pids_BooksMedium,1,2,30);
			FillBag(bag,::Pids_ArmorLight,1,3,150);
			FillBag(bag,::Pids_ArmorMetal,1,2,150);
			FillBag(bag,::Pids_WeaponShotgunsMinor,1,1,20);
			FillBag(bag,::Pids_WeaponPistolMachineGunMinor,1,1,20);	
			FillBag(bag,::Pids_WeaponPistolsMajor,1,1,20);		
			FillBag(bag,Content::Item::AMMO_HN_NEEDLER_CARTRIDGE,25+level*11,50+level*10,150+level*20);
			FillBag(bag,Content::Item::AMMO_7_62MM,210+level*32,215+level*32,250+level*35);
			FillBag(bag,Content::Item::AMMO_5MM_JHP,450+level*40,600+level*40,250+level*30);
			FillBag(bag,Content::Item::AMMO_EXPLOSIVE_ROCKET,16+level,21+level,130+level*20);
			FillBag(bag,Content::Item::AMMO_FLAMETHROWER_FUEL,52+level*6,73+level*6,250+level*26);
			FillBag(bag,Content::Item::AMMO_FLAMETHROWER_FUEL_MK_II,22+level*5,35+level*5,150+level*30);
			FillBag(bag,Content::Item::AMMO_223_FMJ,285+level*15,330+level*15,50+level*10);
			FillBag(bag,Content::Item::AMMO_SMALL_ENERGY_CELL,25+level*10,85+level*10,30+level*10);
			FillBag(bag,::Pids_AmmoMinor,45+level*11,115+level*11,80+level*20);
			FillBag(bag,Content::Item::AMMO_14MM_AP,38+level*6,46+level*6,50+level*10);
			FillBag(bag,Content::Item::AMMO_40MM_GRANADE,18+level*4,26+level*4,20+level*10);
			FillBag(bag,Content::Item::AMMO_EXPLOSIVE_ROCKET,11+level,17+level,20+level*10);
			FillBag(bag,Content::Item::FRAG_GRENADE,14+level*2,18+level*2,200+level*30);
			FillBag(bag,Content::Item::PLASMA_GRENADE,14+level*2,18+level*2,200+level*30);
			FillBag(bag,Content::Item::WELDING_MK2,1,3,100);
			FillBag(bag,Content::Item::CHEMICALS_MK2,1,2,100);
			FillBag(bag,Content::Item::ELECTRO_MAGNET,1,1,100);
			FillBag(bag,Content::Item::PLANK,1,1,30);
			FillBag(bag,Content::Item::ROBOT_MOTIVATOR_MK2,1,1,3);
			FillBag(bag,Content::Item::NAVCOM_PARTS,1,1,1);
			FillBag(bag,Content::Item::SUPER_CAPACITOR_MK2,1,1,10);
			FillBag(bag,Content::Item::ELECTRO_MAGNET_MK2,1,1,1);
			FillBag(bag,Content::Item::PLASMA_TRANSFORMER_MK2,1,1,5);
			FillBag(bag,Content::Item::SUPER_CAPACITOR,1,1,18);
			FillBag(bag,Content::Item::IMPULSE_GENERATOR_MK2,1,1,5);
		}
		else if(base==SIERRA_BASE)
		{
			if(level>7)
			{
				FillBag(bag,Content::Item::VINDICATOR_MINIGUN,1,1,2+level*4, BASE_TIMEOUT(base, GVAR_timeout_VINDICATOR_mariposa, GVAR_timeout_VINDICATOR_cathedral, GVAR_timeout_VINDICATOR_sierra), 2400);
				
				if(level>20) 
				{
					FillBag(bag,Content::Item::SENTRY_BOT_ARMOR,1,1,1+level, BASE_TIMEOUT(base, GVAR_timeout_JBAN_mariposa, GVAR_timeout_JBAN_cathedral, GVAR_timeout_JBAN_sierra), 43200);
				}
			}
		
			FillBag(bag,::Pids_WeaponShotgunsMajor,1,1,15);
			FillBag(bag,::Pids_WeaponPistolsMajor,1,1,15);
			
			FillBag(bag,Content::Item::AMMO_223_FMJ,225+level*16,310+level*16,180+level*20);	
			FillBag(bag,Content::Item::AMMO_HN_AP_NEEDLER_CARTRIDGE,32+level*12,60+level*12,40+level*22);
			FillBag(bag,Content::Item::AMMO_FLAMETHROWER_FUEL_MK_II,32+level*4,41+level*4,140+level*18);
			FillBag(bag,Content::Item::AMMO_5MM_AP,258+level*41,412+level*42,50+level*70);
			FillBag(bag,Content::Item::AMMO_ROCKET_AP,6+level,11+level,140+level*28);
			
		}

		if(org==ORG_BOS)		
		{
			if(base==SIERRA_BASE)
			{
			
				if(level>11) 
				{
					FillBag(bag,Content::Item::MINIGUN_50CAL,1,1,5+level*3, BASE_TIMEOUT(base, GVAR_timeout_50CAL_MINIGUN_mariposa, GVAR_timeout_50CAL_MINIGUN_cathedral, GVAR_timeout_50CAL_MINIGUN_sierra), 12000);
					FillBag(bag,Content::Item::HYPERBOLOID,1,1,4+level*3, BASE_TIMEOUT(base, GVAR_timeout_HYPERBOLOID_mariposa, GVAR_timeout_HYPERBOLOID_cathedral, GVAR_timeout_HYPERBOLOID_sierra), 9000);
					if(level>14) 
					{
						FillBag(bag,Content::Item::POWERED_ARMOR,1,1,8+level*2, BASE_TIMEOUT(base, GVAR_timeout_PA_mariposa, GVAR_timeout_PA_cathedral, GVAR_timeout_PA_sierra), 28800);
					}
				}
			}
			
			if(level>4) 
			{
				FillBag(bag,Content::Item::CHIP_IN,1,1,2+level*2);
				FillBag(bag,Content::Item::CHIP_AG,1,1,2+level*2);
				FillBag(bag,Content::Item::CHIP_LK,1,1,2+level*2);
				FillBag(bag,Content::Item::CHIP_MAX_HP,1,1,2+level*2);
				FillBag(bag,Content::Item::CHIP_SEQUENCE,1,1,2+level*2);
				FillBag(bag,Content::Item::CHIP_POISON_RESISTANCE,1,1,2+level*2);
				FillBag(bag,Content::Item::CHIP_CRITICAL_RESISTANCE,1,1,2+level*2);
				FillBag(bag,Content::Item::CHIP_ABSORB_SET2,1,1,2+level*2);
				FillBag(bag,Content::Item::CHIP_RESIST_SET2,1,1,2+level*2);
				FillBag(bag,Content::Item::CHIP_MELEE_DAMAGE,1,1,2+level*2);
				FillBag(bag,Content::Item::CHIP_AP,1,1,2+level*2);
				FillBag(bag,Content::Item::CHIP_EVADE,1,1,2+level*2);
				FillBag(bag,Content::Item::INDEPENDENT,1,1,50+level*10);
				if(level>9) 
				{
					FillBag(bag,Content::Item::COMBAT_ARMOR_MK_II,1,1,15+level*10, BASE_TIMEOUT(base, GVAR_timeout_CAmk2_mariposa, GVAR_timeout_CAmk2_cathedral, GVAR_timeout_CAmk2_sierra), 1800);
					if(level>11) 
					{
						FillBag(bag,Content::Item::YK42B_PULSE_RIFLE,1,1,20+level*5, BASE_TIMEOUT(base, GVAR_timeout_YK42B_PULSE_mariposa, GVAR_timeout_YK42B_PULSE_cathedral, GVAR_timeout_YK42B_PULSE_sierra), 2000);
						if(level>14) 
							FillBag(bag,Content::Item::BROTHERHOOD_COMBAT_ARMOR,1,1,10+level*3, BASE_TIMEOUT(base, GVAR_timeout_BhCA_mariposa, GVAR_timeout_BhCA_cathedral, GVAR_timeout_BhCA_sierra), 3600);
					}
				}
			}
		}
		else
		{
			if(base==SIERRA_BASE)
			{
				if(level>13) 
				{
					FillBag(bag,Content::Item::BIG_MORTAR,1,1,90+level*5, BASE_TIMEOUT(base, GVAR_timeout_BIG_MORTAR_mariposa, GVAR_timeout_BIG_MORTAR_cathedral, GVAR_timeout_BIG_MORTAR_sierra), 12000);
					if(level>16) 
					{
						FillBag(bag,Content::Item::ADVANCED_POWER_ARMOR,1,1,2+level*2, BASE_TIMEOUT(base, GVAR_timeout_APA_mariposa, GVAR_timeout_APA_cathedral, GVAR_timeout_APA_sierra), 38000);
						FillBag(bag,Content::Item::HYPERBOLOID_MK2,1,1,9+level*2, BASE_TIMEOUT(base, GVAR_timeout_HYPERBOLOID_MK2_mariposa, GVAR_timeout_HYPERBOLOID_MK2_cathedral, GVAR_timeout_HYPERBOLOID_MK2_sierra), 30000);
					}
				}
			}
			if(level>4) 
			{
				FillBag(bag,Content::Item::CHIP_ST,1,1,10+level*2);
				FillBag(bag,Content::Item::CHIP_PE,1,1,10+level*2);
				FillBag(bag,Content::Item::CHIP_EN,1,1,10+level*2);
				FillBag(bag,Content::Item::CHIP_CH,1,1,10+level*2);
				FillBag(bag,Content::Item::CHIP_CARRY_WEIGHT,1,1,10+level*2);
				FillBag(bag,Content::Item::CHIP_HEALING_RATE,1,1,10+level*2);
				FillBag(bag,Content::Item::CHIP_CRITICAL_CHANCE,1,1,10+level*2);
				FillBag(bag,Content::Item::CHIP_RADIATION_RESISTANCE,1,1,10+level*2);
				FillBag(bag,Content::Item::CHIP_ABSORB_SET1,1,1,10+level*2);
				FillBag(bag,Content::Item::CHIP_RESIST_SET1,1,1,10+level*2);
				FillBag(bag,Content::Item::CHIP_AC,1,1,10+level*2);
				FillBag(bag,Content::Item::CHIP_MOVEMENT_SPEED,1,1,10+level*2);		
			
				if(level>7) 
				{
					FillBag(bag,Content::Item::HK_G36,1,1,50+level*15);
					FillBag(bag, Content::Item::YK32_PULSE_PISTOL,1,1,120+level*10);
					if(level>9) 
					{
						FillBag(bag,Content::Item::VULCAN,1,1,10+level*4, BASE_TIMEOUT(base, GVAR_timeout_VULCAN_mariposa, GVAR_timeout_VULCAN_cathedral, GVAR_timeout_VULCAN_sierra), 6000);
						FillBag(bag,Content::Item::BLACK_COMBAT_ARMOR,1,1,5+level*3, BASE_TIMEOUT(base, GVAR_timeout_BlCA_mariposa, GVAR_timeout_BlCA_cathedral, GVAR_timeout_BlCA_sierra), 1800);	 // ЧББ
						FillBag(bag,Content::Item::PK12_GAUSS_PISTOL,1,1,90+level*12, BASE_TIMEOUT(base, GVAR_timeout_PK12_GAUSS_mariposa, GVAR_timeout_PK12_GAUSS_cathedral, GVAR_timeout_PK12_GAUSS_sierra), 120);
						
						if(level>11) 
							FillBag(bag,Content::Item::COMBAT_ARMOR,1,1,20+level*25, BASE_TIMEOUT(base, GVAR_timeout_CA_mariposa, GVAR_timeout_CA_cathedral, GVAR_timeout_CA_sierra), 600);
					}
				}
			}
		}
	}
}
// Fill bag end

// Функция заполнения багажника, для наборов итэмов, с chance=100 для 100% вероятности.
void FillBag(::Item@ bag, ::array<uint16>& pids, uint min, uint max, int chance)
{
	if(chance>=::Random(1,100)) bag.AddItem(pids[::Random(0,pids.length()-1)],::Random(min, max),0);
}

//Перегруженная функция заполнения багажника, для отдельных итэмов, с chance=1000 для 100% вероятности.
void FillBag(::Item@ bag, uint16 pid, uint min, uint max, int chance)
{
	if(chance>=::Random(1,1000)) bag.AddItem(pid,::Random(min, max),0);
}

// Функция заполнения багажника, для наборов итэмов, с chance=100 для 100% вероятности.
void FillBag(::Item@ bag, ::array<uint16>& pids, uint min, uint max, int chance, uint16 var, uint16 value)
{
	if(chance<::Random(1,100))	return;
	if(!ItemTimeouts::checkItemTimeout(var)) return;	
	bag.AddItem(pids[::Random(0,pids.length()-1)],::Random(min, max),0);
	ItemTimeouts::setItemTimeoutMinute(var, value);
}

//Перегруженная функция заполнения багажника, для отдельных итэмов, с chance=1000 для 100% вероятности.
void FillBag(::Item@ bag, uint16 pid, uint min, uint max, int chance, uint16 var, uint16 value)
{
	if(chance<::Random(1,1000))	return;
	if(!ItemTimeouts::checkItemTimeout(var)) return;
	bag.AddItem(pid,::Random(min, max),0);	
	ItemTimeouts::setItemTimeoutMinute(var, value);
}

//Удаление машины
uint e_DeleteCar(::array<uint>@ values)
{
	if(valid(values) && values.length() > 0)
	{
		::Item@ car = ::GetItem(values[0]);
		if(validEngineObject(car))
		{		
			::DeleteItem(car);
			@car = null;
		}
	}
	return 0;
}

void SetupWaves(int base, int org, int level)
{
	switch(base)
	{
		case MARIPOSA_BASE :
		{
			if(::Random(0,4)==3) 
				SetupMariposaWaves(ORG_MOB, level);
			else 
				SetupMariposaWaves(org, level);
		} break;
		
		case CATHEDRAL_BASE :
		{
			if(::Random(0,4)==3) 
				SetupCathedralWaves(ORG_MOB, level);
			else 
				SetupCathedralWaves(org, level);
		} break;
		
		case SIERRA_BASE :
		{
			if(::Random(0,4)==3) 
				SetupSierraWaves(ORG_MOB, level);
			else 
				SetupSierraWaves(org, level);
		} break;
		
		default: break;
	}
}

// Пиды прототипов атакующих НПЦ
#define NPCPID_Dog			     (676)						 // Волк красный
#define NPCPID_Alien			 (243) 						 // Пришелец
#define NPCPID_BosTrooper        (497) 						 // Тяжелый пехотинец БС
#define NPCPID_EnclaveTrooper    (496) 						 // Тяжелый пехотинец анклава
#define NPCPID_BosSniper         (494) 						 // Снайпер БС
#define NPCPID_EnclaveSniper     (492) 						 // Снайпер Анклава
#define NPCPID_RoboEye  	     (76)						 // Робоглаз
#define NPCPID_SentryRobot       (77)						 // Сентри Бот
#define NPCPID_Ghul		  	     (678)						 // Гуль
#define NPCPID_VBat		  	     (507)						 // Кажан

//Багажники
#define BAG_BaseTermPtrn1		     (304)
#define BAG_BaseTermPtrn2		     (305)
#define BAG_BaseTermPtrn3		     (306)
#define BAG_BaseTermPtrn4		     (307)	
#define BAG_BaseSniperPtrn1          (300)
#define BAG_BaseSniperPtrn2          (301)
#define BAG_BaseSniperPtrn3          (302)
#define BAG_BaseSniperPtrn4          (303)
#define BAG_RoboEye         	 (139)
#define BAG_SentryRobot        	 (144)

// Подбор багажника, в зависимости от уровня
int GetBagSniper(int level)
{
	if(level<6) 
		return BAG_BaseSniperPtrn1;
	if(level<11) 
		return BAG_BaseSniperPtrn2;
	if(level<16) 
		return BAG_BaseSniperPtrn3;
	return BAG_BaseSniperPtrn4;	
}

int GetBagTerm(int level)
{
	if(level<6) 
		return BAG_BaseTermPtrn1;
	if(level<11) 
		return BAG_BaseTermPtrn2;
	if(level<16) 
		return BAG_BaseTermPtrn3;
	return BAG_BaseTermPtrn4;
}

// Атака на собор.
void SetupCathedralWaves( int8 bosWave, int level )
{
	Map@ map = GetMapByPid(MAP_cath_enter,0);
	if (!validEngineObject(map)) return;

	if (!FractionInMap(map))
	{	
		ClearBase(map);		
		return;
	}

	if(bosWave!=ORG_MOB)
	{
		array<Critter@> trooper = {}, snipper = {};
		//Critter@[] slayer;
		array<int>	paramsTrooper = {
				ST_TEAM_ID, (bosWave!=ORG_BOS?TEAM_BoSTrooper:TEAM_EnclaveTrooper), 
				ST_BAG_ID, (GetBagTerm(level)),
				ST_CRITICAL_RESISTANCE, 70,
				MODE_NO_DROP, 1,
				MODE_NO_KNOCK, 1,
				MODE_UNLIMITED_AMMO, 1,
				ST_KILL_EXPERIENCE, 100,
				ST_REPLICATION_TIME, -1,
				MODE_NO_HOME, 1,
				ST_ROLE_CITY, CITY_BASE_ATACKER },
			paramsSniper = {
				ST_TEAM_ID, (bosWave!=ORG_BOS?TEAM_BoSTrooper:TEAM_EnclaveTrooper), 
				ST_BAG_ID, (GetBagSniper(level)),
				PE_SILENT_RUNNING, 1,
				ST_CRITICAL_RESISTANCE, 40,
				SK_SNEAK, 300,
				MODE_HIDE, 1,
				MODE_NO_KNOCK, 1,
				MODE_UNLIMITED_AMMO, 1,
				MODE_NO_DROP, 1,
				ST_PERCEPTION, 14,
				MODE_NO_HOME, 1,
				ST_AGILITY, 10,
				ST_KILL_EXPERIENCE, 80,
				ST_REPLICATION_TIME, -1,
				ST_ROLE_CITY, CITY_BASE_ATACKER };
	
		// Группа штурмовиков.
		trooper = NpcMenegeLib::addGroupNpc(map, (bosWave==ORG_BOS?NPCPID_EnclaveTrooper:NPCPID_BosTrooper), paramsTrooper, 147, 89, 100, 5, 
				  bosWave!=ORG_BOS? int( Random( 1, 3 ) + level * 0.33 ) : int( Random( 1, 3 ) + level * 0.33 ), "pattern_term@_CritterInit");
		// Группа снайперов.
		snipper = NpcMenegeLib::addGroupNpc(map, (bosWave==ORG_BOS?NPCPID_EnclaveSniper:NPCPID_BosSniper), paramsSniper, 147, 89, 100, 5, 
				  bosWave!=ORG_BOS? int( Random( 1, 2 ) + level * 0.33) : int( Random( 1, 2 ) + level * 0.33 ), "pattern_sniper@_CritterInit");

		NpcMenegeLib::GroupInit(trooper);
		NpcMenegeLib::GroupInit(snipper);
		NpcMenegeLib::addEnemyGroupsNpc(map, trooper);

		// Группа снайперов старается передвигатся
		NpcMenegeLib::moveGroupsNpc(map, snipper, 0, 0, 101, 0, 100, true);
		NpcMenegeLib::addEnemyGroupsNpc(map, snipper);

		// Группа штурмовиков передвигается
		NpcMenegeLib::moveGroupsNpc(map, trooper, 0, 0, 102, 0, 0, true);
	}
	else 
	{
		::array<::Critter@> attackingGroup;
		if(::Random(0,(100 + level * 5))>80)
		{
			::array<int> paramsGhoul={
				ST_TEAM_ID, TEAM_Mob1, 
				ST_BAG_ID, BAG_BaseSniperPtrn1,
				MODE_NO_DROP, 1,
				ST_MAX_LIFE, 180,
				ST_CRITICAL_RESISTANCE, 40,
				MODE_NO_KNOCK, 1,
				MODE_UNLIMITED_AMMO, 1,
				MODE_NO_HOME, 1,
				ST_KILL_EXPERIENCE, 20,
				ST_REPLICATION_TIME, -1,
				ST_ROLE_CITY, CITY_BASE_ATACKER};
			attackingGroup = NpcMenegeLib::addGroupNpc(map, NPCPID_Ghul, paramsGhoul, 147, 89, 100, 5, ::Random(10,15)+level*3, "Mob::_MobInit");
		}
		else
		{
			::array<int> paramsVBat={
				ST_TEAM_ID, TEAM_Mob1,
				MODE_NO_DROP, 1,
				PE_SILENT_RUNNING, 1,
				ST_CRITICAL_RESISTANCE, 40,
				SK_SNEAK, 300,
				MODE_HIDE, 1,
				MODE_NO_KNOCK, 1,
				MODE_UNLIMITED_AMMO, 1,
				MODE_NO_HOME, 1,
				ST_MELEE_DAMAGE, 25,
				ST_KILL_EXPERIENCE, 150,
				ST_REPLICATION_TIME, -1,
				ST_ROLE_CITY, CITY_BASE_ATACKER};
			attackingGroup = NpcMenegeLib::addGroupNpc(map, NPCPID_VBat, paramsVBat, 147, 89, 100, 5, ::Random(2,4)+level, "pattern_term@_CritterInit");
		}
		
		NpcMenegeLib::moveGroupsNpc(map, attackingGroup, 0, 0, 102, 0, 0, true);
		NpcMenegeLib::addEnemyGroupsNpc(map, 			 attackingGroup);
		NpcMenegeLib::GroupInit(attackingGroup);
	}
}

// Атака на Сиерру.
void SetupSierraWaves(int8 bosWave, int level)
{
	Map@ map = GetMapByPid(MAP_sad_enter,0);
	if (!validEngineObject(map))	return;

	if (!FractionInMap(map))
	{			
		ClearBase(map);		
		return;
	}

	if(bosWave!=ORG_MOB)
	{
		::array<::Critter@> trooper = {}, snipper = {};
		::array<int> paramsTrooper = {
				ST_TEAM_ID, (bosWave!=ORG_BOS?TEAM_BoSTrooper:TEAM_EnclaveTrooper), 
				ST_BAG_ID, (GetBagTerm(level+2)),
				ST_CRITICAL_RESISTANCE, 70,
				ST_KILL_EXPERIENCE, 100,
				MODE_NO_DROP, 1,
				MODE_NO_KNOCK, 1,
				MODE_UNLIMITED_AMMO, 1,
				ST_REPLICATION_TIME, -1,
				MODE_NO_HOME, 1,
				ST_ROLE_CITY, CITY_BASE_ATACKER},
			paramsSniper={
				ST_TEAM_ID, (bosWave!=ORG_BOS?TEAM_BoSTrooper:TEAM_EnclaveTrooper), 
				ST_BAG_ID, (GetBagSniper(level+2)),
				PE_SILENT_RUNNING, 1,
				ST_CRITICAL_RESISTANCE, 40,
				SK_SNEAK, 300,
				MODE_HIDE, 1,
				MODE_NO_KNOCK, 1,
				MODE_UNLIMITED_AMMO, 1,
				MODE_NO_DROP, 1,
				MODE_NO_HOME, 1,
				ST_PERCEPTION, 14,
				ST_AGILITY, 10,
				ST_KILL_EXPERIENCE, 80,
				ST_REPLICATION_TIME, -1,
				ST_ROLE_CITY, CITY_BASE_ATACKER};

		// Группа штурмовиков.
		trooper = NpcMenegeLib::addGroupNpc(map, (bosWave==ORG_BOS?NPCPID_EnclaveTrooper:NPCPID_BosTrooper), paramsTrooper, 84, 84, 100, 5, 
				  bosWave != ORG_BOS ? int( Random( 2, 4 ) + level * 0.5 ) : int( Random( 2, 4 ) + level * 0.5 ), "pattern_term@_CritterInit");
		// Группа снайперов.
		snipper = NpcMenegeLib::addGroupNpc(map, (bosWave==ORG_BOS?NPCPID_EnclaveSniper:NPCPID_BosSniper), paramsSniper, 84, 84, 100, 5, 
				  bosWave != ORG_BOS ? int( Random( 1, 2 ) + level * 0.5 ) : int( Random( 1, 2 ) + level * 0.5 ), "pattern_sniper@_CritterInit");

		NpcMenegeLib::GroupInit(trooper);
		NpcMenegeLib::GroupInit(snipper);
		NpcMenegeLib::addEnemyGroupsNpc(map, 			trooper);

		// Группа снайперов старается передвигатся за внешней стороной ограждения.
		NpcMenegeLib::moveGroupsNpc(map, snipper, 0, 0, 101, 0, 100, true);
		NpcMenegeLib::addEnemyGroupsNpc(map, snipper);

		// Группа штурмовиков передвигается внутрь заграждения.
		NpcMenegeLib::moveGroupsNpc(map, trooper, 0, 0, 102, 0, 0, true);
	}
	else 
	{
		::array<::Critter@> FloatingEyeballs = {}, SentryBots = {};

		::array<int> paramFloatingEyeballs={
				ST_TEAM_ID, TEAM_Mob0, 
				ST_BAG_ID, BAG_RoboEye,
				ST_MELEE_DAMAGE, 22,
				MODE_NO_DROP, 1,
				ST_CRITICAL_RESISTANCE, 60,
				ST_VAR2, 13,
				MODE_NO_KNOCK, 1,
				MODE_NO_HOME, 1,
				MODE_UNLIMITED_AMMO, 1,
				ST_REPLICATION_TIME, -1,
				ST_ROLE_CITY, CITY_BASE_ATACKER},
			paramSentryBots={
				ST_TEAM_ID, TEAM_Mob0, 
				ST_BAG_ID, BAG_SentryRobot,
				ST_CRITICAL_RESISTANCE, 85,
				MODE_NO_DROP, 1,
				MODE_NO_KNOCK, 1,
				MODE_NO_HOME, 1,
				MODE_UNLIMITED_AMMO, 1,
				ST_REPLICATION_TIME, -1,
				ST_ROLE_CITY, CITY_BASE_ATACKER};

		FloatingEyeballs = NpcMenegeLib::addGroupNpc(map, NPCPID_RoboEye, paramFloatingEyeballs, 84, 84, 100, 5, ::Random(2,4)+level, "pattern_slayer@_CritterInit");
		SentryBots = NpcMenegeLib::addGroupNpc(map, NPCPID_SentryRobot, paramSentryBots, 84, 84, 100, 5, int( Random( 1, 2 ) + level * 0.5 ), "pattern_term@_CritterInit");

		NpcMenegeLib::GroupInit(FloatingEyeballs);
		NpcMenegeLib::GroupInit(SentryBots);

		NpcMenegeLib::addEnemyGroupsNpc(map, FloatingEyeballs);
		NpcMenegeLib::addEnemyGroupsNpc(map, SentryBots);

		NpcMenegeLib::moveGroupsNpc(map, FloatingEyeballs, 0, 0, 101, 0, 0, true);
		NpcMenegeLib::moveGroupsNpc(map, SentryBots, 0, 0, 102, 0, 0, true);
	}
}

//Атака на Марипозу.
void SetupMariposaWaves(int8 bosWave, int level)
{
	::Map@ map = ::GetMapByPid(MAP_mariposa_enter,0);
	if (!validEngineObject(map))	return;

	if (!FractionInMap(map))
	{		
		ClearBase(map);	
		return;
	}
	
	if(bosWave!=ORG_MOB)
	{
		::array<::Critter@> trooper = {}, snipper = {};
		::array<int> paramsTrooper={
				ST_TEAM_ID, TEAM_Mob0, 
				ST_BAG_ID, (GetBagTerm(level)),
				ST_RADIATION_RESISTANCE, 95,
				ST_CRITICAL_RESISTANCE, 70,
				ST_KILL_EXPERIENCE, 100,
				MODE_NO_DROP, 1,
				MODE_NO_KNOCK, 1,
				MODE_UNLIMITED_AMMO, 1,
				ST_REPLICATION_TIME, -1,
				MODE_NO_HOME, 1,
				ST_ROLE_CITY, CITY_BASE_ATACKER},
			paramsSniper={
				ST_TEAM_ID, TEAM_Mob0, 
				ST_BAG_ID, (GetBagSniper(level)),
				PE_SILENT_RUNNING, 1,
				ST_CRITICAL_RESISTANCE, 40,
				SK_SNEAK, 300,
				MODE_HIDE, 1,
				MODE_NO_DROP, 1,
				MODE_NO_KNOCK, 1,
				MODE_UNLIMITED_AMMO, 1,
				MODE_NO_HOME, 1,
				ST_RADIATION_RESISTANCE, 95,
				ST_PERCEPTION, 14,
				ST_AGILITY, 10,
				ST_KILL_EXPERIENCE, 80,
				ST_REPLICATION_TIME, -1,
				ST_ROLE_CITY, CITY_BASE_ATACKER};

		// Группа штурмовиков.
		trooper = NpcMenegeLib::addGroupNpc(map, (bosWave==ORG_BOS?NPCPID_EnclaveTrooper:NPCPID_BosTrooper), paramsTrooper, 84, 84, 100, 5, 
				  bosWave != ORG_BOS ? int( Random( 1, 3 ) + level * 0.33 ) : int( Random( 1, 3 ) + level * 0.33 ), "pattern_term@_CritterInit");
		// Группа снайперов.
		snipper = NpcMenegeLib::addGroupNpc(map, (bosWave==ORG_BOS?NPCPID_EnclaveSniper:NPCPID_BosSniper), paramsSniper, 84, 84, 100, 5, 
				  bosWave != ORG_BOS ? int( Random( 1, 2 ) + level * 0.33 ) : int( Random( 1, 2 ) + level * 0.33 ), "pattern_sniper@_CritterInit");

		NpcMenegeLib::GroupInit(trooper);
		NpcMenegeLib::GroupInit(snipper);

		NpcMenegeLib::addEnemyGroupsNpc(map, trooper);
		
		// Группа снайперов старается передвигатся за внешней стороной ограждения.
		NpcMenegeLib::moveGroupsNpc(map, snipper, 0, 0, 101, 0, 100, true);
		NpcMenegeLib::addEnemyGroupsNpc(map, snipper);
			
		// Группа штурмовиков передвигается внутрь заграждения.
		NpcMenegeLib::moveGroupsNpc(map, trooper, 0, 0, 102, 0, 0, true);
	}
	else
	{
		::array<::Critter@> attackingGroup = {};
		if( ::Random(0,(100+level*5))>80)
		{
			::array<int> params = {};
			attackingGroup = NpcMenegeLib::addGroupNpc(map, NPCPID_Dog, params, 84, 84, 100, 5, ::Random(15,17)+level*4, "pattern_term@_CritterInit");
		}
		else
		{
			::array<int> params = {};
			attackingGroup = NpcMenegeLib::addGroupNpc(map, NPCPID_Alien, params, 84, 84, 100, 5, ::Random(6,8)+level, "pattern_term@_CritterInit");
		}

		NpcMenegeLib::moveGroupsNpc(map, attackingGroup, 0, 0, 102, 0, 0, true);
		NpcMenegeLib::addEnemyGroupsNpc(map, 			 attackingGroup);
		NpcMenegeLib::GroupInit(attackingGroup);
	}
}

// ~run base testTermAnkl 94 112 0
void testTermAnkl(::Critter & cr,int lvl, int , int )
{

	::array<::Critter@> trooper = {};
	::array<int> paramsTrooper={
			ST_TEAM_ID, TEAM_EnclaveTrooper, 
			ST_BAG_ID, (GetBagTerm(lvl+2)),
			ST_CRITICAL_RESISTANCE, 70,
			ST_KILL_EXPERIENCE, 100,
			MODE_NO_KNOCK, 1,
			MODE_UNLIMITED_AMMO, 1,
			ST_REPLICATION_TIME, -1,
			MODE_NO_HOME, 1,
			MODE_NO_DROP,0,
			MODE_NO_LOOT,0,
			MODE_NO_STEAL,0,
			ST_ROLE_CITY, CITY_BASE_ATACKER};

		// Группа штурмовиков.
		trooper=NpcMenegeLib::addGroupNpc(cr.GetMap(), NPCPID_EnclaveTrooper, paramsTrooper, cr.HexX-5, cr.HexY-5, 0, 5, 
				  ::Random(2,4), "pattern_term@_CritterInit");

		NpcMenegeLib::GroupInit(trooper);
		NpcMenegeLib::addEnemyGroupsNpc(cr.GetMap(), trooper);	
}

//Очистка базы вручную
//~run Mk2 Base::CBase 0 0 0
void CBase(::Critter& cr, int, int, int)
{
	::Map@ map=cr.GetMap();
	if(valid(map)) ClearBase(map);
}

//~run base StageBase st 0 0
void StageBase(::Critter& cr, int st, int v, int)
{
	cr.GetMap().SetData(v, st);
	GetStageBase( cr, st, v, 0 );
}

//~run base GetStageBase 0 0 0
void GetStageBase(::Critter& cr, int st, int v, int)
{
	cr.Say( SAY_NETMSG, "v "+cr.GetMap().GetData( v ) );
}