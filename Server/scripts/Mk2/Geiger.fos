// FOS Server
// Author: cvet
// Geiger counter

enum Define
{
	GeigerDuration           = REAL_SECOND( 5 ) , // 5 real seconds
    GeigerHexRange          = 20 ,               // Range of critters collect
    GeigerEnergyCharge      = 10 ,
    GeigerFusionCharge     = 50 ,

    StrGeigerNoCharges     = 10350 ,
    StrGeigerOn             = 10351 ,
    StrGeigerOff            = 10352 ,
    StrGeigerFirstCheck    = 10353 ,
    StrGeigerLoopCheck     = 10354 ,
    StrGeigerNothing        = 10355 ,
    StrGeigerAddCharge     = 10356 ,
    StrGeigerCurCharge     = 10357
}

bool UseGeiger( Critter& cr, Item& geiger ) // Export
{
    if( geiger.Val1 == 1 )
    {
        geiger.Val1 = 0;
        if( geiger.Val3 != 0 )
            EraseTimeEvent( uint( geiger.Val3 ) );
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, Geiger::Define::StrGeigerOff );
    }
    else
    {
        if( geiger.Val2 == 0 )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, Geiger::Define::StrGeigerNoCharges );
            return true;
        }

        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, Geiger::Define::StrGeigerFirstCheck, "$rem" + cr.Stat[ ST_RADIATION_LEVEL ] );

        geiger.Val2--;
        if( geiger.Val2 == 0 )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, Geiger::Define::StrGeigerNoCharges );
        }
        else
        {
            // Turn on and loop
            geiger.Val1 = 1;
            geiger.Val3 = int( CreateTimeEvent( __FullSecond + uint( Geiger::Define::GeigerDuration ), "Geiger::e_Geiger", geiger.Id, true ) );
            cr.PlaySound( "GEIGER.ACM", true );
        }
    }

    geiger.Update();
    return true;
}

bool UseItemOnGeiger( ::Critter& cr, ::Item& geiger, ::Item& item ) // Export
{
    uint16 itemPid = item.GetProtoId();
    if( ( itemPid == Content::Item::AMMO_SMALL_ENERGY_CELL || itemPid == Content::Item::AMMO_MICRO_FUSION_CELL ) && geiger.Val2 < geiger.Proto.StartValue_2 )
    {
        uint needCharge = geiger.Proto.StartValue_2 - geiger.Val2;
        uint charge = ( itemPid == Content::Item::AMMO_SMALL_ENERGY_CELL ? Geiger::Define::GeigerEnergyCharge : Geiger::Define::GeigerFusionCharge );
        uint needItems = needCharge / charge;
        if( ( needCharge % charge ) != 0 )
            needItems++;
        if( needItems > item.GetCount() )
            needItems = item.GetCount();
        geiger.Val2 += needItems * charge;
        if( geiger.Val2 > geiger.Proto.StartValue_2 )
            geiger.Val2 = geiger.Proto.StartValue_2;
        geiger.Update();
        _SubItem( item, needItems );
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, Geiger::Define::StrGeigerAddCharge );
    }
    else
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, Geiger::Define::StrGeigerNothing );
    }
    return true;
}

bool UseSkillOnGeiger( ::Critter& cr, ::Item& geiger, int skill ) // Export
{
    if( skill < 0 )
        return false;                                         // Pick, move

    if( skill == SK_SCIENCE )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, Geiger::Define::StrGeigerCurCharge, "$cur" + geiger.Val2 + "$max" + geiger.Proto.StartValue_2 );
    }
    else
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, Geiger::Define::StrGeigerNothing );
    }
    return true;
}

uint e_Geiger( uint[] @ values )
{
    ::Item@ geiger = ::GetItem( values[ 0 ] );
    if( !valid( geiger ) )
        return 0;

    if( geiger.Val1 == 0 )
        return 0;                    // Off
    if( geiger.Val2 > 0 )
        geiger.Val2--;

    // Show rems
    if( geiger.Accessory == ACCESSORY_CRITTER )
    {
        ::Critter@ cr = ::GetCritter( geiger.CritId );
        if( valid( cr ) )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, Geiger::Define::StrGeigerLoopCheck, "$rem" + cr.Stat[ ST_RADIATION_LEVEL ] );
            if( geiger.Val2 == 0 )
            {
                cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, Geiger::Define::StrGeigerNoCharges );
                cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, Geiger::Define::StrGeigerOff );
                cr.PlaySound( "GEIGER.ACM", true );
            }
        }
    }
    else if( geiger.Accessory == ACCESSORY_HEX )
    {
        uint16 hx = 0, hy = 0;
        ::Map@   map = geiger.GetMapPosition( hx, hy );
        if( valid( map ) )
        {
            ::Critter@[] critters;
            map.GetCrittersHex( hx, hy, Geiger::Define::GeigerHexRange - 1, FIND_ALL, critters );
            // Calculate aprox value of radiation
            uint aproxValue = 0;
            for( uint i = 0, iMax = critters.length(); i < iMax; i++ )
            {
                ::Critter@ cr = critters[ i ];
                uint     value = cr.Stat[ ST_RADIATION_LEVEL ] * ( Geiger::Define::GeigerHexRange - ::GetDistantion( cr.HexX, cr.HexY, hx, hy ) ) / Geiger::Define::GeigerHexRange;
                if( value > aproxValue )
                    aproxValue = value;
            }
            // Show to all
            map.SetTextMsg( hx, hy, COLOR_GRAY, TEXTMSG_GAME, Geiger::Define::StrGeigerLoopCheck, "$rem" + aproxValue );
        }
    }

    if( geiger.Val2 == 0 ) // Turn off
    {
        geiger.Val1 = 0;
        geiger.Val3 = 0;
    }

    geiger.Update();
    return geiger.Val2 == 0 ? 0 : Geiger::Define::GeigerDuration;
}
