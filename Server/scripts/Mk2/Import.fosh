// FOS Common
// Вспомогательный скрипт содержащий все импорты, в конце переноса он должен быть пустым


bool IsItemUpgrade( ItemMutual& item, ItemMutual& upgrade )
{
	return Item::IsUpgrade( item, upgrade );
}

#ifdef __CLIENT

import void SetItemInformer( int lookType, ::string& text, ItemCl@ item, ::string& lexems, uint info, uint protoId, IGUIDescriptor@ descr ) from "client_main";
import bool main_critter_action( bool localCall, CritterCl& cr, int action, int actionExt, ItemCl@ item ) from "client_main";
import bool main_in_message( ::string& message, int& sayType, uint& critterId, uint& delay ) from "client_main";
import void main_change_screen( bool show, int screen, int p0, int p1, int p2 ) from "client_main";
import uint GetIfaceColorUD( const string& in Key, const uint& in defColor ) from "client_main";
import string generic_description( int descType, int& offsX, int& offsY ) from "client_main";
import bool main_out_message( ::string& message, int& sayType ) from "client_main";
import IGUIDescriptor@ get_InformerDescriptor( ) from "client_main";
import bool main_critter_in( CritterCl@ cr ) from "client_main";
import void main_mouse_move( int x, int y ) from "client_main";
import bool main_render_iface( uint layer ) from "client_main";
import bool main_mouse_down( int click ) from "client_main";
import bool main_mouse_up( int click ) from "client_main";
import bool main_input_lost() from "client_main";
import bool main_start() from "client_main";
import uint main_loop() from "client_main";

import int GUI_GetActiveMainScreen()from"client_gui";
import int GUI_GetActiveScreen()from"client_gui";
import void GUI_Init() from "client_gui";

import bool DrawMap_DynamicScenery() from "dynamic_object";

# include "client_gui_h.fos"

#endif
#ifdef __SERVER

import void StopMaintainAttack( Critter& critter ) from "combat";
import void SetTracker(::Critter& cr, int trackId) from "globalmap_group";
import void CheckTracker( ::Critter& cr ) from "globalmap_group";

import void CheckAllGameEvents() from "game_event";
import void DeclareEvents() from "game_event";

import void respItem(Map& map, Item@[] containers, int entire, bool deleteOldItems) from "farm_location";
import void CheckGlobalFarmLocation() from "farm_location";
import void InitializeFarmLocation() from "farm_location";
import void GenerateFarmLocation() from "farm_location";

import void SaveLoot2Storehouse( uint16 WorldX, uint16 WorldY, Item@[] items ) from "game_event_storehouse";
import void _TrapSpikeWalk(Item& item, Critter& cr, bool entered, uint8 dir) from "trap";
import void player_UpdateDynamicMap( ::Critter& player, ::Map& map ) from "dynamic_object";
import void PlaceLoot2Container( ::Map& map, ::Critter& cr ) from "game_event_caches";
import bool Merc2Player( Critter& player, Critter& merc, uint16 type )  from "merc";
import void OnCritterKilled( ::Critter& cr, ::Critter@ killer ) from "q_hunter";
import void SetSlayerStats(Critter & cr, uint8 lvl) from "pattern_slayer";
import uint QWarehouseGetLocId( ::Critter& player ) from "quest_warehouse";
import void newbieReplicateCritter(Critter& cr) from "q_newbie_scripts";
import string ElectronicLockerCode( int varNum ) from "electronic_lock";
import void _TraderInit(Critter& boss, bool firstTime) from "trader";
import void hellReplicateCritter(Critter& cr) from "replication_hell";
import bool NeedReplicateCritterToBattle(Critter& cr) from "purgatory";
import bool check_perk(::Critter& cr, uint perk) from "perks";
import void SpawnHubBooks(Map & map) from "ncr_common";
import void SetAuctionLotCheckEvent() from "auction";
import void SetupRadioDJQuest() from "q_radio_dj";

import uint e_DisableForceField(uint[]@ values) from "energy_barier";
import uint e_EnableForceField(uint[]@ values) from "energy_barier";

import void SaveMessengerData() from "bulletin_board";
import void StartMessenger() from "bulletin_board";

import bool GetFreeHex( Map& map, uint radius, uint16& hx, uint16& hy ) from "caravan";
import void _SetupCaravanLeader(uint idCaravan, Critter & leader) from "caravan";
import void CaravansInit() from "caravan";

import ::Item@ AddBlueprint( ::Map& map, const uint16&in  hexX, const uint16&in  hexY, const uint16&in pid, const uint16&in count ) from "fix_boy";
import ::Item@ AddBlueprint( ::Critter& cr, const uint16&in pid, const uint16&in count ) from "fix_boy";
import ::Item@ AddBlueprint( ::Item& cont, const uint16&in pid, const uint16&in count ) from "fix_boy";

import void ExplodeEx(Map& map, uint16 hexX, uint16 hexY, uint16 effectPid, uint effectRadius, uint damage, uint damageType, uint damageRadius, uint ownerId) from "explode";
import void Explode( Map@ map, uint16 hexX, uint16 hexY, Critter@ cr, uint16 explodePid, uint ownerId, int bonusDamage, int bonusRadius ) from "explode";
import bool OnUseExplode(::Critter& cr, ::Item& explode, ::Critter@ targetCr, ::Item@ targetItem, Scenery@ targetScen, uint timer) from "explode";
import void ExplodeItemDrop(Item& it) from "explode"; // Export
import bool IsExplosive(Item@ item) from "explode";

import void InjureCritter(::Critter& cr, uint dmg, uint dmgType, uint8 dir, uint attackerId) from "combat";
import bool Zone_Attack(::Critter& cr, uint16 hexX, uint16 hexY, int slot) from "combat";

import bool MainPlane_NpcPlaneBegin(::Critter& npc, NpcPlane& plane, int reason, ::Critter@ someCr, ::Item@ someItem) from "main_planes";
import bool MainPlane_NpcPlaneEnd(::Critter& npc, NpcPlane& plane, int reason, ::Critter@ someCr, ::Item@ someItem) from "main_planes";
import void SkillsSort( ::Critter& npc, array< int >&inout skills, const uint&in first, const uint&in count ) from "main_planes";
import bool MainPlane_NpcPlaneRun(Critter& npc, NpcPlane& plane, int reason, uint& r0, uint& r1, uint& r2) from "main_planes";
import bool CheckBattleWeapon(::Critter& npc, ::Item& weapon) from "main_planes";
import bool IsCurrentEnemy( ::Critter& cr, uint targetId) from "main_planes";
import void SkillToBegin(int[]& skills, int skill) from "main_planes";

import void InviteToEncounter(Critter@[]& group, Item@ car, uint encounterDescriptor, int combatMode, uint& mapId, uint16& hexX, uint16& hexY, uint8& dir) from "worldmap";
import void FindEncounter(Critter@[]& group, Item@ car, uint x, uint y, uint& encounterDescriptor, bool& waitForAnswer, bool empty) from "worldmap";
import void WorldmapInit() from "worldmap";

import void OnCritterMapOut( ::Critter& cr, ::Map& map ) from "nopvp_maps";
import void OnCitterMapIn( ::Critter& cr, ::Map& map ) from "nopvp_maps";
import void SetNoPvp() from "nopvp_maps";
import void InitNoPvpMaps() from "nopvp_maps";

import bool main_critter_use_skill( ::Critter@ cr, int skill, ::Critter@ targetCr, ::Item@ targetItem, ::Scenery@ targetScen ) from "main";
import void main_critter_init( Critter& cr, bool firstTime ) from "main";
import uint16 GetVersionWorldSave( ::string@ time ) from "main";
import void critter_idle_dead(::Critter& cr) from "main";
import bool isExplosive(::Item@ item) from "main";
import bool SaveWorldNextVersion() from "main";

bool Mk2RunDialog ( Critter& player, Critter& npc, uint dialogId, bool ignoreDistance )
{
	return Dialog::RunCritterDialogId( player, npc, dialogId, 1, ignoreDistance );
}
  
bool Mk2RunDialog ( Critter& player, Critter& npc, bool ignoreDistance )
{
	return Dialog::RunCritter( player, npc, 1, ignoreDistance );
}

bool Mk2RunDialog ( Critter& player, uint16 dialogId, ::Map& map, uint16 hexX, uint16 hexY, bool ignoreDistance ) 
{
	return Dialog::RunHex( player, map, hexX, hexY, dialogId, ignoreDistance );
}

string@ GetFractionName( uint num )
{
	return @Fractions::GetName(num);
}

string@[] GetFractionList()
{
	return Fractions::GetList( );
}

Fraction@ GetFraction(uint id)
{
	return @Fractions::Get( id );
}

Fraction@ GetFraction( string& name )
{
	return @Fractions::Get( name );
}

void EncounterNpc_NpcInit( Critter& npc, bool firstTime )
{
	EncounterNpc::_NpcInit( npc, firstTime );
}

void EncounterNpc_NpcDead( Critter& npc, Critter@ killer )
{
	EncounterNpc::_NpcDead( npc, killer );
}

void DenBOS_GuardInit(Critter & cr, bool firstTime)
{
	DenBOS::_GuardInit( cr, firstTime );
}

bool BagPick(::Critter& crit,::Item@  item)
{
	return Bags::Pick( crit, item );
}

bool CityGuard_ProcessOfCrime( Critter& cr, int penalty, int info, Critter@ infoCr, Item@ infoIt, bool noPenalty )
{
	return CityGuard::ProcessOfCrime( cr, penalty, info, infoCr, infoIt, noPenalty );
}

void CityGuard_SaveBags( )
{
	CityGuard::SaveBags();
}

void CityGuard_SneakCritter( Critter& cr, const bool&in InSneak )
{
	CityGuard::SneakCritter( cr, InSneak );
}

bool CityGuard_PlayerDead( Critter& player, Item@[]@ items, Map& map )
{
	return CityGuard::PlayerDead( player, items, map );
}

void CityGuard_CritterRespawn( Critter& cr )
{
	CityGuard::CritterRespawn( cr );
}

void UseDrug(Critter& cr, Item& drug)
{
	Drugs::Use( cr, drug);
}

void DropDrugEffects(Critter& cr)
{
	Drugs::DropEffects( cr );
}

void UseDrugOn(Critter& cr, Critter& onCr, Item& drug)
{
	Drugs::UseOn( cr, onCr, drug );
}

void DropDrug(::Critter& cr, uint16 drugPid, uint stage)
{
	Drugs::Drop( cr, drugPid, stage );
}

void AffectRadiation(Critter& cr, int value)
{
	Radiation::Affect(cr,value);
}

void DropRadiation(Critter& cr)
{
	Radiation::Drop(cr);
}

void AffectPoison(Critter& cr, int value)
{
	Poison::Affect(cr,value);
}

void DropPoison(Critter& cr)
{
	Poison::Drop(cr);
}

bool _GrupPatrolAttack(Critter& cr, Critter& target)
{
	return GrupPatrol::_Attack(cr,target);
}

void _GrupPatrolIdle(Critter& cr)
{
	GrupPatrol::_Idle(cr);
}

bool _GrupPatrolAttacked(Critter& cr, Critter& attacker)
{
	return GrupPatrol::_Attacked(cr,attacker);
}

void _GrupPatrolDead(Critter& cr, Critter@ killer) 
{
	GrupPatrol::_Dead(cr,killer);
}

void _GrupPatrolRespawn(Critter& cr) 
{
	GrupPatrol::_Respawn(cr);
}

bool WantedSignSet(::Item& wantedSign, ::string& name, uint cost)
{
	return Wanted::Set( wantedSign, name, cost );
}
#endif