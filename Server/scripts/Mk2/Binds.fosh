// FOS Common
// Имитация системы эвентов на последней ревизии сдк.

funcdef bool FuncdefEventStart();
funcdef void FuncdefEventResultStart();
funcdef bool FuncdefEventLoop( uint& loop );

class LoopData
{
	LoopData( FuncdefEventLoop@ func, uint& tick )
	{
		@Funcdef = @func;
		Tick = tick;
		Release = false;
	}

	bool Raise( uint& minLoop, uint curTick )
	{
		if( Tick < curTick )
		{
			uint loop = minLoop;
			bool result = Funcdef( loop );
			if( loop == 0 )
			{
				Release = true;
				return result;
			}
			Tick = GetTick() + loop;
			if( loop < minLoop )
				minLoop = loop;
			return result;
		}
		else if( curTick - Tick < minLoop )
			minLoop = curTick - Tick;
		return true;
	}
	
	bool Release;
	uint Tick;
	FuncdefEventLoop@ Funcdef;
}

# pragma event "EventStart( )" 
EventStart __EventStart;
EventLoop __EventLoop;

uint loop( )
{
	uint minLoop = uint( -1 );
	__EventLoop.Raise( minLoop );
	return 1;
}


void item_proto_init( ProtoItem& proto )
{
	Item::item_proto_init( proto );
}

void item_init( ItemMutual& item, bool isFirstTime )
{
	Item::item_init( item, isFirstTime );
}

class EventLoop
{
	void Subscribe( FuncdefEventLoop@ func, uint tick = 0 )
	{
		tick += ::GetTick();
		Events.insertLast( @LoopData( @func, tick ) );
	}
	
	void Unsubscribe( FuncdefEventLoop@ func, bool isRun = false )
	{
		for( uint i = 0, iEnd = Events.length(); i < iEnd; i++ )
			if( @Events[i].Funcdef is @func )
			{
				if( isRun )
				{
					uint loop = 0;
					Events[i].Funcdef( loop );
				}
				Events.removeAt( i );
			}
	}
	
	bool Raise( uint& minLoop )
	{
		uint tick = ::GetTick();
		bool result = true;
		LastCallIndex = 0;
		for( uint iEnd = Events.length(); LastCallIndex < iEnd; LastCallIndex++ )
		{
			result = Events[LastCallIndex].Raise( minLoop, tick ); 
			
			if( Events[LastCallIndex].Release )
			{
				Events.removeAt( LastCallIndex-- );
				iEnd--;
			}
			
			if( !result )
				return false;
		}
		return true;
	}
	
	LoopData@ get_Last( )
	{
		return Events[LastCallIndex];
	}
	
	uint LastCallIndex;
	private LoopData@[] Events;
}

class EventStart
{
	void Subscribe( FuncdefEventStart@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventStart@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 )
			Funcdef.removeAt( index );
	}
	
	void Subscribe( FuncdefEventResultStart@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventResultStart@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 )
			FuncdefResult.removeAt( index );
	}
	
	bool Raise( )
	{
		LastCallIndex = 0;
		for( uint iEnd = Funcdef.length(); LastCallIndex < iEnd; LastCallIndex++ )
		{
			if( !Funcdef[LastCallIndex]() )
				return false;
		}
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]();
			
		return true;
	}
	
	FuncdefEventStart@ get_Last( )
	{
		return Funcdef[LastCallIndex];
	}
	
	uint LastCallIndex;
	
	private FuncdefEventStart@[] Funcdef;
	private FuncdefEventResultStart@[] FuncdefResult;
}

bool start()
{
	return __EventStart.Raise( );
}

#ifndef __MAPPER

# ifdef __CLIENT
# pragma funcdef "void FuncdefEventResultCritterCheckMoveItem ( CritterCl@ cr, ItemCl@ item, uint8 toSlot, ItemCl@ itemSwap )"
# pragma funcdef "bool FuncdefEventCritterCheckMoveItem ( CritterCl@ cr, ItemCl@ item, uint8 toSlot, ItemCl@ itemSwap )"
# endif
# ifdef __SERVER
# pragma funcdef "void FuncdefEventResultCritterCheckMoveItem ( Critter@ cr, Item@ item, uint8 toSlot, Item@ itemSwap )"
# pragma funcdef "bool FuncdefEventCritterCheckMoveItem ( Critter@ cr, Item@ item, uint8 toSlot, Item@ itemSwap )"
# endif

EventCritterCheckMoveItem 	__EventCritterCheckMoveItem;

class EventCritterCheckMoveItem
{
	void Subscribe( FuncdefEventCritterCheckMoveItem@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventCritterCheckMoveItem@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 )
			Funcdef.removeAt( index );
	}
	
	void Subscribe( FuncdefEventResultCritterCheckMoveItem@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventResultCritterCheckMoveItem@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 )
			FuncdefResult.removeAt( index );
	}
	
	bool Raise( CritterMutual@ cr, ItemMutual@ item, uint8 toSlot, ItemMutual@ itemSwap )
	{
		LastCallIndex = 0;
		for( uint iEnd = Funcdef.length(); LastCallIndex < iEnd; LastCallIndex++ )
			if( !Funcdef[LastCallIndex]( cr, item, toSlot, itemSwap ) )
				return false;
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( cr, item, toSlot, itemSwap );
		return true;
	}
	
	FuncdefEventCritterCheckMoveItem@ get_Last()
	{
		return Funcdef[LastCallIndex];
	}
	
	private uint LastCallIndex;
	private FuncdefEventCritterCheckMoveItem@[] Funcdef;
	private FuncdefEventResultCritterCheckMoveItem@[] FuncdefResult;
}

bool critter_check_move_item(CritterMutual& cr, ItemMutual& item, uint8 toSlot, ItemMutual@ itemSwap)
{
	return __EventCritterCheckMoveItem.Raise( cr, item, toSlot, itemSwap );
}

#ifdef __SERVER

funcdef bool FuncdefEventFinish( );
funcdef bool FuncdefEventWorldGeneration( );
funcdef bool FuncdefEventCritterInMap( ::Critter@ cr, ::Map@ map );
funcdef bool FuncdefEventCritterOutMap( ::Critter@ cr, ::Map@ map );
funcdef bool FuncdefEventTrapShow( ::Critter@ cr, ::Item@ item );
funcdef bool FuncdefEventTrapHide( ::Critter@ cr, ::Item@ item );
funcdef bool FuncdefEventCritterStealing( ::Critter@ cr, ::Critter@ thief, bool& success, ::Item@ item, uint count );
funcdef bool FuncdefEventKarmaVoting( ::Critter@ crFrom, ::Critter@ crTo, bool valUp );
funcdef bool FuncdefEventItemsBarter( ::array< ::Item@ >& saleItems, ::array< uint >& saleItemsCount, ::array< ::Item@ >& buyItems, ::array< uint >& buyItemsCount, ::Critter& player, ::Critter& npc );
funcdef bool FuncdefEventCritterUseSkill( ::Critter@ cr, int skill, ::Critter@ targetCr, ::Item@ targetItem, ::Scenery@ targetScen );
funcdef bool FuncdefEventItemFinish( ::Item@ item, bool isDelete );
funcdef bool FuncdefEventPlayerLogin( uint ip, string& name, uint id, uint& textMsg, uint& strNum );
funcdef bool FuncdefEventCritterSmthMoveItem( ::Critter@ critter, ::Critter@ target, ::Item@ item, uint8 fromSlot );

funcdef void FuncdefEventResultWorldGeneration( );
funcdef void FuncdefEventResultFinish( );
funcdef void FuncdefEventResultCritterInMap( ::Critter@ cr, ::Map@ map );
funcdef void FuncdefEventResultCritterOutMap( ::Critter@ cr, ::Map@ map );
funcdef void FuncdefEventResultTrapShow( ::Critter@ cr, ::Item@ item );
funcdef void FuncdefEventResultTrapHide( ::Critter@ cr, ::Item@ item );
funcdef void FuncdefEventResultCritterStealing( ::Critter@ cr, ::Critter@ thief, bool& success, ::Item@ item, uint count );
funcdef void FuncdefEventResultKarmaVoting( ::Critter@ crFrom, ::Critter@ crTo, bool valUp );
funcdef void FuncdefEventResultItemsBarter( ::array< ::Item@ >& saleItems, ::array< uint >& saleItemsCount, ::array< ::Item@ >& buyItems, ::array< uint >& buyItemsCount, ::Critter& player, ::Critter& npc );
funcdef void FuncdefEventResultCritterUseSkill( ::Critter@ cr, int skill, ::Critter@ targetCr, ::Item@ targetItem, ::Scenery@ targetScen );
funcdef void FuncdefEventResultItemFinish( ::Item@ item, bool isDelete );
funcdef void FuncdefEventResultPlayerLogin( uint ip, string& name, uint id, uint& textMsg, uint& strNum );
funcdef void FuncdefEventResultCritterSmthMoveItem( ::Critter@ critter, ::Critter@ target, ::Item@ item, uint8 fromSlot );

funcdef Mk2::Descriptor@+ FuncdefEventItemDefaultDescriptor( ::Item@ item );

EventFinish						__EventFinish;
EventWorldSave					__EventWorldSave;

EventCritterMoveItem			__EventCritterMoveItem;
EventCritterAttacked			__EventCritterAttacked;
EventCritterDead				__EventCritterDead;
EventCritterAttack				__EventCritterAttack;
EventCritterInit 				__EventCritterInit;
EventCritterFinish 			__EventCritterFinish;
EventCritterIdle 				__EventCritterIdle;
EventCritterRespawn			__EventCritterRespawn;
EventCritterStealing			__EventCritterStealing;
EventCritterUseSkill 			__EventCritterUseSkill;
EventCritterShow				__EventCritterShow;
EventCritterShowMe				__EventCritterShowMe;
EventCritterHide				__EventCritterHide;
EventCritterHideMe				__EventCritterHideMe;
EventCritterMessage			__EventCritterMessage;
EventCritterInMap				__EventCritterInMap;
EventCritterOutMap				__EventCritterOutMap;

EventNpcPlaneRun				__EventNpcPlaneRun;
EventNpcPlaneBegin				__EventNpcPlaneBegin;
EventNpcPlaneEnd				__EventNpcPlaneEnd;

EventPlayerGetAccess			__EventPlayerGetAccess;
EventPlayerAllowCommand		__EventPlayerAllowCommand;
EventPlayerLevelUp				__EventPlayerLevelUp;

EventTrapShow					__EventTrapShow;
EventTrapHide					__EventTrapHide;

EventKarmaVoting				__EventKarmaVoting;

EventItemsBarter				__EventItemsBarter;
EventItemDefaultDescriptor	__EventItemDefaultDescriptor;
EventItemFinish					__EventItemFinish;

EventPlayerLogin				__EventPlayerLogin;

EventCritterSmthMoveItem		__EventCritterSmthMoveItem;

EventWorldGeneration			__EventWorldGeneration;

class EventWorldGeneration
{
	void Subscribe( FuncdefEventWorldGeneration@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventWorldGeneration@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 )
			Funcdef.removeAt( index );
	}
	
	void Subscribe( FuncdefEventResultWorldGeneration@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventResultWorldGeneration@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 )
			FuncdefResult.removeAt( index );
	}
	
	bool Raise( )
	{					
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( ) )
				return false;
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( );
		return true;
	}
	
	private FuncdefEventWorldGeneration@[] 	Funcdef;
	private FuncdefEventResultWorldGeneration@[] 	FuncdefResult;
}

class EventItemsBarter
{
	void Subscribe( FuncdefEventItemsBarter@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventItemsBarter@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 )
			Funcdef.removeAt( index );
	}
	
	void Subscribe( FuncdefEventResultItemsBarter@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventResultItemsBarter@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 )
			FuncdefResult.removeAt( index );
	}
	
	bool Raise( ::array< ::Item@ >& saleItems, ::array< uint >& saleItemsCount, ::array< ::Item@ >& buyItems, ::array< uint >& buyItemsCount, ::Critter& player, ::Critter& npc )
	{					
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( saleItems, saleItemsCount, buyItems, buyItemsCount, player, npc ) )
				return false;
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( saleItems, saleItemsCount, buyItems, buyItemsCount, player, npc );
		return true;
	}
	
	private FuncdefEventItemsBarter@[] 	Funcdef;
	private FuncdefEventResultItemsBarter@[] 	FuncdefResult;
}

class EventKarmaVoting
{
	void Subscribe( FuncdefEventKarmaVoting@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventKarmaVoting@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 )
			Funcdef.removeAt( index );
	}
	
	void Subscribe( FuncdefEventResultKarmaVoting@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventResultKarmaVoting@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 )
			FuncdefResult.removeAt( index );
	}
	
	bool Raise( ::Critter@ crFrom, ::Critter@ crTo, bool valUp )
	{					
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( crFrom, crTo, valUp ) )
				return false;
				
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( crFrom, crTo, valUp );
		return true;
	}
	
	private FuncdefEventKarmaVoting@[] 	Funcdef;
	private FuncdefEventResultKarmaVoting@[] 	FuncdefResult;
}

class EventCritterStealing
{
	void Subscribe( FuncdefEventCritterStealing@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void SubscribeToCritter( FuncdefEventCritterStealing@ func, ::Critter@ toCr )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@toCr.ScriptDescriptor);
		if( @descriptor !is null ) descriptor.EventsStealing.insertLast( @func );
	}
	
	void UnsubscribeFromCritter( Mk2::FuncdefEventCritterStealing@ func, Critter@ fromCr )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@fromCr.ScriptDescriptor);
		if( @descriptor !is null )
		{
			int index = descriptor.EventsStealing.find( @func );
			if( index != -1 ) descriptor.EventsStealing.removeAt( index );
		}
	}
	
	void Unsubscribe( FuncdefEventCritterStealing@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 )
			Funcdef.removeAt( index );
	}
	
	void Subscribe( FuncdefEventResultCritterStealing@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventResultCritterStealing@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 )
			FuncdefResult.removeAt( index );
	}
	
	bool Raise( ::Critter@ critter, ::Critter@ thief, bool& success, ::Item@ item, uint count )
	{					
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@critter.ScriptDescriptor);
		if( @descriptor !is null )
			if( !descriptor.Stealing( @critter, @thief, success, @item, count ) )
				return success;
		
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( @critter, @thief, success, @item, count ) )
				return success;
	
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( @critter, @thief, success, @item, count );
				
		return success;
	}
	
	private FuncdefEventCritterStealing@[]		Funcdef;
	private FuncdefEventResultCritterStealing@[] FuncdefResult;
}

class EventCritterUseSkill
{
	void Subscribe( FuncdefEventCritterUseSkill@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventCritterUseSkill@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 )
			Funcdef.removeAt( index );
	}
	
	void Subscribe( FuncdefEventResultCritterUseSkill@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventResultCritterUseSkill@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 )
			FuncdefResult.removeAt( index );
	}
	
	bool Raise( ::Critter@ cr, int skill, ::Critter@ targetCr, ::Item@ targetItem, ::Scenery@ targetScen )
	{
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )	
			if( !Funcdef[i]( @cr, skill, @targetCr, @targetItem, @targetScen ) )
				return false;
		
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )	
			FuncdefResult[i]( @cr, skill, @targetCr, @targetItem, @targetScen );

		return true;
	}
	
	private FuncdefEventCritterUseSkill@[] 		Funcdef;
	private FuncdefEventResultCritterUseSkill@[] FuncdefResult;
}

class EventCritterMessage
{
	void Subscribe( Mk2::FuncdefEventCritterMessage@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventCritterMessage@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 ) Funcdef.removeAt( index );
	}
	
	void Subscribe( Mk2::FuncdefEventResultCritterMessage@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventResultCritterMessage@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 ) FuncdefResult.removeAt( index );
	}
	
	void SubscribeToCritter( Mk2::FuncdefEventCritterMessage@ func, Critter@ toCr )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@toCr.ScriptDescriptor);
		if( @descriptor !is null ) descriptor.EventsMessage.insertLast( @func );
	}
	
	void UnsubscribeFromCritter( Mk2::FuncdefEventCritterMessage@ func, Critter@ fromCr )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@fromCr.ScriptDescriptor);
		if( @descriptor !is null )
		{
			int index = descriptor.EventsMessage.find( @func );
			if( index != -1 )
				descriptor.EventsMessage.removeAt( index );
		}
	}
	
	bool Raise(::Critter@ critter, Mk2::MessagePacket@ message )
	{			
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@critter.ScriptDescriptor);
		if( @descriptor !is null )
			if( !descriptor.Message( critter, message ) )
				return false;
		
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( critter, message ) )
				return false;
				
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( critter, message );
				
		return true;
	}
	
	private Mk2::FuncdefEventCritterMessage@[] 			Funcdef;
	private Mk2::FuncdefEventResultCritterMessage@[] 	FuncdefResult;
}

class EventItemDefaultDescriptor
{
	void Subscribe( Mk2::FuncdefEventItemDefaultDescriptor@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventItemDefaultDescriptor@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 )
			Funcdef.removeAt( index );
	}
	
	bool Raise( ::Item@ item, Mk2::Descriptor@ descriptor )
	{					
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
		{		
			if( (@descriptor = @Funcdef[i]( @item )) !is null )
				return false;
		}		
		return true;
	}
	
	private Mk2::FuncdefEventItemDefaultDescriptor@[] 	Funcdef;
}

class EventItemFinish
{
	void Subscribe( Mk2::FuncdefEventItemFinish@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventItemFinish@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 )
			Funcdef.removeAt( index );
	}
	
	void Subscribe( Mk2::FuncdefEventResultItemFinish@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventResultItemFinish@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 )
			FuncdefResult.removeAt( index );
	}
	
	bool Raise( ::Item@ item, bool isDelete )
	{					
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( @item, isDelete ) )
				return false;
				
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( @item, isDelete );
		return true;
	}
	
	private Mk2::FuncdefEventItemFinish@[] 			Funcdef;
	private Mk2::FuncdefEventResultItemFinish@[] 	FuncdefResult;
}

class EventTrapShow
{
	void Subscribe( Mk2::FuncdefEventTrapShow@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventTrapShow@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 )
			Funcdef.removeAt( index );
	}
	
	void Subscribe( Mk2::FuncdefEventResultTrapShow@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventResultTrapShow@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 )
			FuncdefResult.removeAt( index );
	}
	
	bool Raise( Critter@ critter, Item@ item  )
	{					
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( @critter, @item ) )
				return false;
				
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( @critter, @item );
		return true;
	}
	
	private Mk2::FuncdefEventTrapShow@[] 			Funcdef;
	private Mk2::FuncdefEventResultTrapShow@[] 	FuncdefResult;
}

class EventTrapHide
{
	void Subscribe( Mk2::FuncdefEventTrapHide@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventTrapHide@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 )
			Funcdef.removeAt( index );
	}
	
	void Subscribe( Mk2::FuncdefEventResultTrapHide@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventResultTrapHide@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 )
			FuncdefResult.removeAt( index );
	}
	
	bool Raise( Critter@ critter, Item@ item  )
	{					
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( @critter, @item ) )
				return false;
				
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( @critter, @item );
			
		return true;
	}
	
	private Mk2::FuncdefEventResultTrapHide@[] 	FuncdefResult;
	private Mk2::FuncdefEventTrapHide@[] 			Funcdef;
}

class EventCritterShow
{
	void Subscribe( Mk2::FuncdefEventCritterShow@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventCritterShow@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 )
			Funcdef.removeAt( index );
	}
	
	void Subscribe( Mk2::FuncdefEventResultCritterShow@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventResultCritterShow@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 )
			FuncdefResult.removeAt( index );
	}
	
	void SubscribeToCritter( Mk2::FuncdefEventCritterShow@ func, Critter@ toCr )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@toCr.ScriptDescriptor);
		if( @descriptor !is null )
			descriptor.EventsShow.insertLast( @func );
	}
	
	void UnsubscribeFromCritter( Mk2::FuncdefEventCritterShow@ func, Critter@ fromCr  )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@fromCr.ScriptDescriptor);
		if( @descriptor !is null )
		{
			int index = descriptor.EventsShow.find( @func );
			if( index != -1 )
				descriptor.EventsShow.removeAt( index );
		}
	}
	
	bool Raise( Critter@ critter, Critter@ opponent  )
	{			
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@critter.ScriptDescriptor);
		if( @descriptor !is null )
			if( !descriptor.CritterShow( critter, opponent ) )
				return false;
		
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( critter, opponent ) )
				return false;
		
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( critter, opponent );
			
		return true;
	}
	
	private Mk2::FuncdefEventCritterShow@[] 	Funcdef;
	private Mk2::FuncdefEventResultCritterShow@[] 	FuncdefResult;
}

class EventCritterInMap
{
	void Subscribe( Mk2::FuncdefEventCritterInMap@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventCritterInMap@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 )
			Funcdef.removeAt( index );
	}
	
	void Subscribe( Mk2::FuncdefEventResultCritterInMap@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventResultCritterInMap@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 )
			FuncdefResult.removeAt( index );
	}
	
	bool Raise( Critter@ critter, Map@ map  )
	{
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( critter, map ) )
				return false;
				
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( critter, map );
	
		return true;
	}
	
	private Mk2::FuncdefEventCritterInMap@[] 	Funcdef;
	private Mk2::FuncdefEventResultCritterInMap@[] 	FuncdefResult;
}

class EventCritterOutMap
{
	void Subscribe( Mk2::FuncdefEventCritterOutMap@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventCritterOutMap@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 )
			Funcdef.removeAt( index );
	}
	
	void Subscribe( Mk2::FuncdefEventResultCritterOutMap@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventResultCritterOutMap@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 )
			FuncdefResult.removeAt( index );
	}
	
	bool Raise( Critter@ critter, Map@ map  )
	{			
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( critter, map ) )
				return false;
		
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )	
			FuncdefResult[i]( critter, map );
		return true;
	}
	
	private Mk2::FuncdefEventCritterOutMap@[] 	Funcdef;
	private Mk2::FuncdefEventResultCritterOutMap@[] 	FuncdefResult;
}

class EventCritterShowMe
{
	void Subscribe( Mk2::FuncdefEventCritterShowMe@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventCritterShowMe@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 )
			Funcdef.removeAt( index );
	}
	
	void Subscribe( Mk2::FuncdefEventResultCritterShowMe@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventResultCritterShowMe@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 )
			FuncdefResult.removeAt( index );
	}
	
	void SubscribeToCritter( Mk2::FuncdefEventCritterShowMe@ func, Critter@ toCr )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@toCr.ScriptDescriptor);
		if( @descriptor !is null )
			descriptor.EventsShowMe.insertLast( @func );
	}
	
	void UnsubscribeFromCritter( Mk2::FuncdefEventCritterShowMe@ func, Critter@ fromCr  )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@fromCr.ScriptDescriptor);
		if( @descriptor !is null )
		{
			int index = descriptor.EventsShowMe.find( @func );
			if( index != -1 )
				descriptor.EventsShowMe.removeAt( index );
		}
	}
	
	bool Raise( Critter@ critter, Critter@ opponent  )
	{			
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@critter.ScriptDescriptor);
		if( @descriptor !is null )
			if( !descriptor.CritterShowMe( critter, opponent ) )
				return false;
		
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( critter, opponent ) )
				return false;
		
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( critter, opponent );
		return true;
	}
	
	private Mk2::FuncdefEventCritterShowMe@[] 		Funcdef;
	private Mk2::FuncdefEventResultCritterShowMe@[] FuncdefResult;
}

class EventCritterHide
{
	void Subscribe( Mk2::FuncdefEventCritterHide@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventCritterHide@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 )
			Funcdef.removeAt( index );
	}
	
	void Subscribe( Mk2::FuncdefEventResultCritterHide@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventResultCritterHide@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 )
			FuncdefResult.removeAt( index );
	}
	
	void SubscribeToCritter( Mk2::FuncdefEventCritterHide@ func, Critter@ toCr )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@toCr.ScriptDescriptor);
		if( @descriptor !is null )
			descriptor.EventsHide.insertLast( @func );
	}
	
	void UnsubscribeFromCritter( Mk2::FuncdefEventCritterHide@ func, Critter@ fromCr  )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@fromCr.ScriptDescriptor);
		if( @descriptor !is null )
		{
			int index = descriptor.EventsHide.find( @func );
			if( index != -1 )
				descriptor.EventsHide.removeAt( index );
		}
	}
	
	bool Raise( Critter@ critter, Critter@ opponent  )
	{			
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@critter.ScriptDescriptor);
		if( @descriptor !is null )
			if( !descriptor.CritterHide( critter, opponent ) )
				return false;
		
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( critter, opponent ) )
				return false;
		
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( critter, opponent );
			
		return true;
	}
	
	private Mk2::FuncdefEventCritterHide@[] 		Funcdef;
	private Mk2::FuncdefEventResultCritterHide@[] FuncdefResult;
}

class EventCritterHideMe
{
	void Subscribe( Mk2::FuncdefEventCritterHideMe@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventCritterHideMe@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 )
			Funcdef.removeAt( index );
	}
	
	void Subscribe( Mk2::FuncdefEventResultCritterHideMe@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventResultCritterHideMe@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 )
			FuncdefResult.removeAt( index );
	}
	
	void SubscribeToCritter( Mk2::FuncdefEventCritterHideMe@ func, Critter@ toCr )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@toCr.ScriptDescriptor);
		if( @descriptor !is null )
			descriptor.EventsHideMe.insertLast( @func );
	}
	
	void UnsubscribeFromCritter( Mk2::FuncdefEventCritterHideMe@ func, Critter@ fromCr  )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@fromCr.ScriptDescriptor);
		if( @descriptor !is null )
		{
			int index = descriptor.EventsHideMe.find( @func );
			if( index != -1 )
				descriptor.EventsHideMe.removeAt( index );
		}
	}
	
	bool Raise( Critter@ critter, Critter@ opponent  )
	{			
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@critter.ScriptDescriptor);
		if( @descriptor !is null )
			if( !descriptor.CritterHideMe( critter, opponent ) )
				return false;
				
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( critter, opponent ) )
				return false;
		
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( critter, opponent );

		return true;
	}
	
	private Mk2::FuncdefEventCritterHideMe@[]			Funcdef;
	private Mk2::FuncdefEventResultCritterHideMe@[] FuncdefResult;
}

class EventFinish
{
	void Subscribe( FuncdefEventFinish@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventFinish@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 )
			Funcdef.removeAt( index );
	}
	
	void Subscribe( FuncdefEventResultFinish@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventResultFinish@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 )
			FuncdefResult.removeAt( index );
	}
	
	bool Raise( )
	{
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			Funcdef[i]();
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]();
		return true;
	}
	
	private FuncdefEventFinish@[] Funcdef;
	private FuncdefEventResultFinish@[] FuncdefResult;
}

class EventWorldSave
{
	void Subscribe( FuncdefEventWorldSave@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventWorldSave@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 )
			Funcdef.removeAt( index );
	}
	
	void Subscribe( FuncdefEventResultWorldSave@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventResultWorldSave@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 )
			FuncdefResult.removeAt( index );
	}
	
	bool Raise( uint currentIndex, ::array<uint>& deleteIndexes )
	{
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			Funcdef[i]( currentIndex, deleteIndexes );
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( currentIndex, deleteIndexes );
		return true;
	}
	
	private FuncdefEventWorldSave@[] Funcdef;
	private FuncdefEventResultWorldSave@[] FuncdefResult;
}

class EventPlayerGetAccess
{
	void Subscribe( Mk2::FuncdefEventPlayerGetAccess@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventPlayerGetAccess@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 ) Funcdef.removeAt( index );
	}
	
	void Subscribe( Mk2::FuncdefEventResultPlayerGetAccess@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventResultPlayerGetAccess@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 ) FuncdefResult.removeAt( index );
	}
	
	bool Raise( Critter@ critter, int access, string@ password )
	{
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( critter, access, password ) )
				return false;
				
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( critter, access, password );
			
		return true;
	}
	
	private Mk2::FuncdefEventPlayerGetAccess@[] Funcdef;
	private Mk2::FuncdefEventResultPlayerGetAccess@[] FuncdefResult;
}

class EventPlayerLevelUp
{
	void Subscribe( Mk2::FuncdefEventPlayerLevelUp@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventPlayerLevelUp@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 ) Funcdef.removeAt( index );
	}
	
	void Subscribe( Mk2::FuncdefEventResultPlayerLevelUp@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventResultPlayerLevelUp@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 ) FuncdefResult.removeAt( index );
	}
	
	bool Raise(::Critter@ player, uint skillIndex, uint skillUp, uint perkIndex)
	{
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( player, skillIndex, skillUp, perkIndex ) )
				return false;

		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( player, skillIndex, skillUp, perkIndex );
			
		return true;
	}
	
	private Mk2::FuncdefEventPlayerLevelUp@[] Funcdef;
	private Mk2::FuncdefEventResultPlayerLevelUp@[] FuncdefResult;
}

class EventPlayerAllowCommand
{
	void Subscribe( Mk2::FuncdefEventPlayerAllowCommand@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventPlayerAllowCommand@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 ) Funcdef.removeAt( index );
	}
	
	void Subscribe( Mk2::FuncdefEventResultPlayerAllowCommand@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventResultPlayerAllowCommand@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 ) FuncdefResult.removeAt( index );
	}
	
	bool Raise( ::Critter@ player, ::string@ adminPanel, uint8 command )
	{
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( player, adminPanel, command ) )
				return false;

		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( player, adminPanel, command );
			
		return true;
	}
	
	private Mk2::FuncdefEventPlayerAllowCommand@[] Funcdef;
	private Mk2::FuncdefEventResultPlayerAllowCommand@[] FuncdefResult;
}

class EventCritterInit
{
	void Subscribe( Mk2::FuncdefEventCritterInit@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventCritterInit@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 ) Funcdef.removeAt( index );
	}
	
	void Subscribe( Mk2::FuncdefEventResultCritterInit@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventResultCritterInit@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 ) FuncdefResult.removeAt( index );
	}
	
	void SubscribeToCritter( Mk2::FuncdefEventCritterInit@ func, Critter@ toCr )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@toCr.ScriptDescriptor);
		if( @descriptor !is null ) descriptor.EventsInit.insertLast( @func );
	}
	
	void UnsubscribeFromCritter( Mk2::FuncdefEventCritterInit@ func, Critter@ fromCr  )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@fromCr.ScriptDescriptor);
		if( @descriptor !is null )
		{
			int index = descriptor.EventsInit.find( @func );
			if( index != -1 ) descriptor.EventsInit.removeAt( index );
		}
	}
	
	bool Raise( Critter@ critter, bool firstTime )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@critter.ScriptDescriptor);
		if( @descriptor !is null )
			if( !descriptor.CritterInit( critter, firstTime ) )
				return false;
				
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( critter, firstTime ) )
				return false;
		
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( critter, firstTime );
			
		return true;
	}
	
	private Mk2::FuncdefEventCritterInit@[] Funcdef;
	private Mk2::FuncdefEventResultCritterInit@[] FuncdefResult;
}

class EventCritterFinish
{
	void Subscribe( Mk2::FuncdefEventCritterFinish@ func )
	{
		Funcdef.insertLast( @func );
	}

	void Unsubscribe( Mk2::FuncdefEventCritterFinish@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 ) Funcdef.removeAt( index );
	}
	
	void Subscribe( Mk2::FuncdefEventResultCritterFinish@ func )
	{
		FuncdefResult.insertLast( @func );
	}

	void Unsubscribe( Mk2::FuncdefEventResultCritterFinish@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 ) FuncdefResult.removeAt( index );
	}
	
	void SubscribeToCritter( Mk2::FuncdefEventCritterFinish@ func, Critter@ toCr )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@toCr.ScriptDescriptor);
		if( @descriptor !is null ) descriptor.EventsFinish.insertLast( @func );
	}
	
	void UnsubscribeFromCritter( Mk2::FuncdefEventCritterFinish@ func, Critter@ fromCr  )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@fromCr.ScriptDescriptor);
		if( @descriptor !is null )
		{
			int index = descriptor.EventsFinish.find( @func );
			if( index != -1 ) descriptor.EventsFinish.removeAt( index );
		}
	}
	
	bool Raise( Critter@ critter, bool toDelete )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@critter.ScriptDescriptor);
		if( @descriptor !is null )
			if( !descriptor.CritterFinish( critter, toDelete ) )
				return false;
		
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( critter, toDelete ) )
				return false;
				
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( critter, toDelete );
				
		return true;
	}
	
	private Mk2::FuncdefEventCritterFinish@[] Funcdef;
	private Mk2::FuncdefEventResultCritterFinish@[] FuncdefResult;
}

class EventCritterIdle
{
	void Subscribe( Mk2::FuncdefEventCritterIdle@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventCritterIdle@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 ) Funcdef.removeAt( index );
	}
	
	void Subscribe( Mk2::FuncdefEventResultCritterIdle@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventResultCritterIdle@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 ) FuncdefResult.removeAt( index );
	}
	
	void SubscribeToCritter( Mk2::FuncdefEventCritterIdle@ func, Critter@ toCr )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@toCr.ScriptDescriptor);
		if( @descriptor !is null ) descriptor.EventsIdle.insertLast( @func );
	}
	
	void UnsubscribeFromCritter( Mk2::FuncdefEventCritterIdle@ func, Critter@ fromCr  )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@fromCr.ScriptDescriptor);
		if( @descriptor !is null )
		{
			int index = descriptor.EventsIdle.find( @func );
			if( index != -1 ) descriptor.EventsIdle.removeAt( index );
		}
	}
	
	bool Raise( Critter@ critter )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@critter.ScriptDescriptor);
		if( @descriptor !is null )
			if( !descriptor.CritterIdle( critter ) )
				return false;
			
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( critter ) )
				return false;
			
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( critter );
				
		return true;
	}
	
	private Mk2::FuncdefEventCritterIdle@[] Funcdef;
	private Mk2::FuncdefEventResultCritterIdle@[] FuncdefResult;
}

class EventCritterRespawn
{
	void Subscribe( Mk2::FuncdefEventCritterRespawn@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventCritterRespawn@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 ) Funcdef.removeAt( index );
	}
	
	void Subscribe( Mk2::FuncdefEventResultCritterRespawn@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventResultCritterRespawn@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 ) FuncdefResult.removeAt( index );
	}
	
	void SubscribeToCritter( Mk2::FuncdefEventCritterRespawn@ func, Critter@ toCr )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@toCr.ScriptDescriptor);
		if( @descriptor !is null ) descriptor.EventsRespawn.insertLast( @func );
	}
	
	void UnsubscribeFromCritter( Mk2::FuncdefEventCritterRespawn@ func, Critter@ fromCr  )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@fromCr.ScriptDescriptor);
		if( @descriptor !is null )
		{
			int index = descriptor.EventsRespawn.find( @func );
			if( index != -1 ) descriptor.EventsRespawn.removeAt( index );
		}
	}
	
	bool Raise( Critter@ critter )
	{		
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@critter.ScriptDescriptor);
		if( @descriptor !is null )
			if( !descriptor.CritterRespawn( critter ) )
				return false;
			
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( critter ) )
				return false;
			
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( critter );
				
		return true;
	}
	
	private Mk2::FuncdefEventCritterRespawn@[] Funcdef;
	private Mk2::FuncdefEventResultCritterRespawn@[] FuncdefResult;
}

class EventCritterAttacked
{
	void Subscribe( Mk2::FuncdefEventCritterAttacked@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventCritterAttacked@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 ) Funcdef.removeAt( index );
	}
	
	void Subscribe( Mk2::FuncdefEventResultCritterAttacked@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventResultCritterAttacked@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 ) FuncdefResult.removeAt( index );
	}
	
	void SubscribeToCritter( Mk2::FuncdefEventCritterAttacked@ func, Critter@ toCr )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@toCr.ScriptDescriptor);
		if( @descriptor !is null ) descriptor.EventsAttacked.insertLast( @func );
	}
	
	void UnsubscribeFromCritter( Mk2::FuncdefEventCritterAttacked@ func, Critter@ fromCr  )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@fromCr.ScriptDescriptor);
		if( @descriptor !is null )
		{
			int index = descriptor.EventsAttacked.find( @func );
			if( index != -1 ) descriptor.EventsAttacked.removeAt( index );
		}
	}
	
	bool Raise( Critter@ critter, Critter@ attacker  )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@critter.ScriptDescriptor);
		if( @descriptor !is null )
			if( !descriptor.CritterAttacked( critter, attacker ) )
				return false;
		
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( critter, attacker ) )
				return false;
		
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( critter, attacker );

		return true;
	}
	
	private Mk2::FuncdefEventCritterAttacked@[] 	Funcdef;
	private Mk2::FuncdefEventResultCritterAttacked@[] 	FuncdefResult;
}

class EventCritterDead
{
	void Subscribe( Mk2::FuncdefEventCritterDead@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventCritterDead@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 ) Funcdef.removeAt( index );
	}
	
	void Subscribe( Mk2::FuncdefEventResultCritterDead@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventResultCritterDead@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 ) FuncdefResult.removeAt( index );
	}
	
	void SubscribeToCritter( Mk2::FuncdefEventCritterDead@ func, Critter@ toCr )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@toCr.ScriptDescriptor);
		if( @descriptor !is null ) descriptor.EventsDead.insertLast( @func );
	}
	
	void UnsubscribeFromCritter( Mk2::FuncdefEventCritterDead@ func, Critter@ fromCr  )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@fromCr.ScriptDescriptor);
		if( @descriptor !is null )
		{
			int index = descriptor.EventsDead.find( @func );
			if( index != -1 ) descriptor.EventsDead.removeAt( index );
		}
	}
	
	bool Raise( Critter@ critter, Critter@ killer  )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@critter.ScriptDescriptor);
		if( @descriptor !is null )
			if( !descriptor.CritterDead( @critter, @killer ) )
				return false;
			
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( @critter, @killer ) )
				return false;
			
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( @critter, @killer );

		return true;
	}
	
	private Mk2::FuncdefEventCritterDead@[] 	Funcdef;
	private Mk2::FuncdefEventResultCritterDead@[] 	FuncdefResult;
}

class EventCritterAttack
{
	void Subscribe( Mk2::FuncdefEventCritterAttack@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventCritterAttack@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 )
			Funcdef.removeAt( index );
	}
	
	void Subscribe( Mk2::FuncdefEventResultCritterAttack@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventResultCritterAttack@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 )
			FuncdefResult.removeAt( index );
	}
	
	void SubscribeToCritter( Mk2::FuncdefEventCritterAttack@ func, Critter@ toCr )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@toCr.ScriptDescriptor);
		if( @descriptor !is null ) descriptor.EventsAttack.insertLast( @func );
	}
	
	void UnsubscribeFromCritter( Mk2::FuncdefEventCritterAttack@ func, Critter@ fromCr  )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@fromCr.ScriptDescriptor);
		if( @descriptor !is null )
		{
			int index = descriptor.EventsAttack.find( @func );
			if( index != -1 ) descriptor.EventsAttack.removeAt( index );
		}
	}
	
	bool Raise( Critter@ critter, Critter@ target, ProtoItem@ weapon, uint8 weaponMode, ProtoItem@ ammo )
	{		
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@critter.ScriptDescriptor);
		if( @descriptor !is null )
			if( !descriptor.CritterAttack( critter, target, weapon, weaponMode, ammo ) )
				return false;
			
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( critter, target, weapon, weaponMode, ammo ) )
				return false;
			
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( critter, target, weapon, weaponMode, ammo );

		return true;
	}
	
	private Mk2::FuncdefEventCritterAttack@[] 	Funcdef;
	private Mk2::FuncdefEventResultCritterAttack@[] 	FuncdefResult;
}

class EventNpcPlaneRun
{
	void Subscribe( Mk2::FuncdefEventNpcPlaneRun@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventNpcPlaneRun@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 ) Funcdef.removeAt( index );
	}
	
	void Subscribe( Mk2::FuncdefEventResultNpcPlaneRun@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventResultNpcPlaneRun@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 ) FuncdefResult.removeAt( index );
	}
	
	void SubscribeToCritter( Mk2::FuncdefEventNpcPlaneRun@ func, Critter@ toCr )
	{
		Npc::NpcDescriptor@ descriptor = cast<Npc::NpcDescriptor>(@toCr.ScriptDescriptor);
		if( @descriptor !is null ) descriptor.EventsNpcPlaneRun.insertLast( @func );
	}
	
	void UnsubscribeFromCritter( Mk2::FuncdefEventNpcPlaneRun@ func, Critter@ fromCr  )
	{
		Npc::NpcDescriptor@ descriptor = cast<Npc::NpcDescriptor>(@fromCr.ScriptDescriptor);
		if( @descriptor !is null )
		{
			int index = descriptor.EventsNpcPlaneRun.find( @func );
			if( index != -1 ) descriptor.EventsNpcPlaneRun.removeAt( index );
		}
	}
	
	bool Raise( Critter& critter, NpcPlane& plane, int reason, uint& r0, uint& r1, uint& r2 )
	{
		Npc::NpcDescriptor@ descriptor = cast<Npc::NpcDescriptor>(@critter.ScriptDescriptor);
		if( @descriptor !is null )
			if( !descriptor.NpcPlaneRun( critter, plane, reason, r0, r1, r2 ) )
				return false;
			
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( critter, plane, reason, r0, r1, r2 ) )
				return false;
			
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( critter, plane, reason, r0, r1, r2 );

		return true;
	}
	
	private Mk2::FuncdefEventNpcPlaneRun@[] 	Funcdef;
	private Mk2::FuncdefEventResultNpcPlaneRun@[] 	FuncdefResult;
}

class EventNpcPlaneBegin
{
	void Subscribe( Mk2::FuncdefEventNpcPlaneBegin@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventNpcPlaneBegin@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 ) Funcdef.removeAt( index );
	}
	
	void Subscribe( Mk2::FuncdefEventResultNpcPlaneBegin@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventResultNpcPlaneBegin@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 ) FuncdefResult.removeAt( index );
	}
	
	void SubscribeToCritter( Mk2::FuncdefEventNpcPlaneBegin@ func, Critter@ toCr )
	{
		Npc::NpcDescriptor@ descriptor = cast<Npc::NpcDescriptor>(@toCr.ScriptDescriptor);
		if( @descriptor !is null ) descriptor.EventsNpcPlaneBegin.insertLast( @func );
	}
	
	void UnsubscribeFromCritter( Mk2::FuncdefEventNpcPlaneBegin@ func, Critter@ fromCr  )
	{
		Npc::NpcDescriptor@ descriptor = cast<Npc::NpcDescriptor>(@fromCr.ScriptDescriptor);
		if( @descriptor !is null )
		{
			int index = descriptor.EventsNpcPlaneBegin.find( @func );
			if( index != -1 ) descriptor.EventsNpcPlaneBegin.removeAt( index );
		}
	}
	
	bool Raise( Critter& critter, NpcPlane& plane, int reason, Critter@ someCr, Item@ someItem )
	{		
		Npc::NpcDescriptor@ descriptor = cast<Npc::NpcDescriptor>(@critter.ScriptDescriptor);
		if( @descriptor !is null )
			if( !descriptor.NpcPlaneBegin( critter, plane, reason, someCr, someItem ) )
				return false;
		
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( critter, plane, reason, someCr, someItem ) )
				return false;
		
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( critter, plane, reason, someCr, someItem );

		return true;
	}
	
	private Mk2::FuncdefEventNpcPlaneBegin@[] 	Funcdef;
	private Mk2::FuncdefEventResultNpcPlaneBegin@[] 	FuncdefResult;
}

class EventNpcPlaneEnd
{
	void Subscribe( Mk2::FuncdefEventNpcPlaneEnd@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventNpcPlaneEnd@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 ) Funcdef.removeAt( index );
	}
	
	void Subscribe( Mk2::FuncdefEventResultNpcPlaneEnd@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventResultNpcPlaneEnd@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 ) FuncdefResult.removeAt( index );
	}
	
	void SubscribeToCritter( Mk2::FuncdefEventNpcPlaneEnd@ func, Critter@ toCr )
	{
		Npc::NpcDescriptor@ descriptor = cast<Npc::NpcDescriptor>(@toCr.ScriptDescriptor);
		if( @descriptor !is null ) descriptor.EventsNpcPlaneEnd.insertLast( @func );
	}
	
	void UnsubscribeFromCritter( Mk2::FuncdefEventNpcPlaneEnd@ func, Critter@ fromCr  )
	{
		Npc::NpcDescriptor@ descriptor = cast<Npc::NpcDescriptor>(@fromCr.ScriptDescriptor);
		if( @descriptor !is null )
		{
			int index = descriptor.EventsNpcPlaneEnd.find( @func );
			if( index != -1 ) descriptor.EventsNpcPlaneEnd.removeAt( index );
		}
	}
	
	bool Raise( Critter& critter, NpcPlane& plane, int reason, Critter@ someCr, Item@ someItem )
	{
		Npc::NpcDescriptor@ descriptor = cast<Npc::NpcDescriptor>(@critter.ScriptDescriptor);
		if( @descriptor !is null )
			if( !descriptor.NpcPlaneEnd( critter, plane, reason, someCr, someItem ))
				return false;
			
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( critter, plane, reason, someCr, someItem ) )
				return false;
			
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( critter, plane, reason, someCr, someItem );

		return true;
	}
	
	private Mk2::FuncdefEventNpcPlaneEnd@[] 	Funcdef;
	private Mk2::FuncdefEventResultNpcPlaneEnd@[] 	FuncdefResult;
}

class EventCritterMoveItem
{
	void Subscribe( Mk2::FuncdefEventCritterMoveItem@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventCritterMoveItem@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 ) Funcdef.removeAt( index );
	}
	
	void Subscribe( Mk2::FuncdefEventResultCritterMoveItem@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventResultCritterMoveItem@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 ) FuncdefResult.removeAt( index );
	}
	
	bool Raise( Critter@ critter, Item@ item, uint8 fromSlot )
	{
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( critter, item, fromSlot ) )
				return false;
				
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( critter, item, fromSlot );
				
		return true;
	}
	
	private Mk2::FuncdefEventCritterMoveItem@[] Funcdef;
	private Mk2::FuncdefEventResultCritterMoveItem@[] FuncdefResult;
}

class EventCritterSmthMoveItem
{
	void Subscribe( FuncdefEventCritterSmthMoveItem@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventCritterSmthMoveItem@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 ) Funcdef.removeAt( index );
	}
	
	void Subscribe( FuncdefEventResultCritterSmthMoveItem@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventResultCritterSmthMoveItem@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 ) FuncdefResult.removeAt( index );
	}
	
	void UnsubscribeFromCritter( FuncdefEventCritterSmthMoveItem@ func, Critter@ critter  )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@critter.ScriptDescriptor);
		if( @descriptor !is null )
		{
			int index = descriptor.EventsSmthMoveItem.find( @func );
			if( index != -1 ) descriptor.EventsSmthMoveItem.removeAt( index );
		}
	}
	
	void SubscribeToCritter( FuncdefEventCritterSmthMoveItem@ func, Critter@ critter )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@critter.ScriptDescriptor);
		if( @descriptor !is null ) descriptor.EventsSmthMoveItem.insertLast( @func );
	}
	
	bool Raise( ::Critter@ critter, ::Critter@ target, ::Item@ item, uint8 fromSlot )
	{
		Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@critter.ScriptDescriptor);
		if( @descriptor !is null )
			if( !descriptor.SmthMoveItem( critter, target, item, fromSlot ) )
				return false;
	
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( critter, target, item, fromSlot ) )
				return false;
	
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( critter, target, item, fromSlot );
				
		return true;
	}
	
	private FuncdefEventCritterSmthMoveItem@[] Funcdef;
	private FuncdefEventResultCritterSmthMoveItem@[] FuncdefResult;
}

class EventPlayerLogin	
{
	void Subscribe( Mk2::FuncdefEventPlayerLogin@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventPlayerLogin@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 ) Funcdef.removeAt( index );
	}
	
	void Subscribe( Mk2::FuncdefEventResultPlayerLogin@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( Mk2::FuncdefEventResultPlayerLogin@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 ) FuncdefResult.removeAt( index );
	}
	
	bool Raise( uint ip, string& name, uint id, uint& textMsg, uint& strNum )
	{
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( ip, name, id, textMsg, strNum ) )
				return false;
				
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( ip, name, id, textMsg, strNum );
				
		return true;
	}
	
	private Mk2::FuncdefEventPlayerLogin@[] Funcdef;
	private Mk2::FuncdefEventResultPlayerLogin@[] FuncdefResult;
}

void critter_move_item( Critter& critter, Item& item, uint8 fromSlot )
{
	__EventCritterMoveItem.Raise( critter, item, fromSlot );
	
	Critter@[] critters;
	for( uint i = 0, iEnd = critter.GetCritters ( true, FIND_LIFE_AND_KO , critters ); i < iEnd; i++ )
		__EventCritterSmthMoveItem.Raise( critters[i], critter, item, fromSlot );
}

void finish()
{
	__EventFinish.Raise( );
}

void critter_finish( Critter& critter, bool toDelete )
{
	__EventCritterFinish.Raise( critter, toDelete );
	@critter.ScriptDescriptor = null;
}

void critter_respawn( Critter& critter )
{
	__EventCritterRespawn.Raise( critter );
}

void critter_init( Critter& critter, bool firstTime )
{
	if( !Critter::NewDescriptor( critter, critter.IsPlayer() ? Critter::CritterDescriptor( ) : Npc::NpcDescriptor( ) ) )
	{
		Log( "Error critter Init " + critter.Id );
		if( critter.IsPlayer() )
			critter.Disconnect();
		return;
	}
	
	__EventCritterInit.Raise( critter, firstTime );
}

void critter_idle( Critter& critter )
{
	__EventCritterIdle.Raise( critter );
}

void critter_attacked( Critter& critter, Critter& attacker )
{
	__EventCritterAttacked.Raise( critter, attacker );
}

void critter_dead( Critter& critter, Critter@ killer )
{
	__EventCritterDead.Raise( critter, killer );
}

void critter_attack( Critter& critter, Critter& target, ProtoItem& weapon, uint8 weaponMode, ProtoItem@ ammo )
{
	__EventCritterAttack.Raise( critter, target, weapon, weaponMode, ammo );
}

bool result = false;

bool npc_plane_run( Critter& critter, NpcPlane& plane, int reason, uint& r0, uint& r1, uint& r2 )
{
	result  = __EventNpcPlaneRun.Raise( critter, plane, reason, r0, r1, r2 );
	if( reason == REASON_ATTACK_WEAPON && r0 == 0 && r1 == uint( -1 ) && r2 == uint( -1 ) )
		Log(" REASON_ATTACK_WEAPON - false " + critter.Id);
	return result;
}

bool npc_plane_begin( Critter& critter, NpcPlane& plane, int reason, Critter@ someCr, Item@ someItem )
{
	result  = __EventNpcPlaneBegin.Raise( critter, plane, reason, someCr, someItem );
	return result;
}

bool npc_plane_end( Critter& critter, NpcPlane& plane, int reason, Critter@ someCr, Item@ someItem )
{
	result = __EventNpcPlaneEnd.Raise( critter, plane, reason, someCr, someItem );
	return result;
}

bool player_allowcommand( ::Critter@ player, ::string@ adminPanel, uint8 command )
{
	return __EventPlayerAllowCommand.Raise( player, adminPanel, command );
}

void player_levelup(::Critter& player, uint skillIndex, uint skillUp, uint perkIndex)
{
	__EventPlayerLevelUp.Raise( player, skillIndex, skillUp, perkIndex );
}

void world_save(uint currentIndex, ::array<uint>& deleteIndexes)
{
	__EventWorldSave.Raise( currentIndex, deleteIndexes );
}

bool show_critter(::Critter& cr, ::Critter& opponent)
{
	/* if( cr.IsPlayer() || opponent.IsPlayer() )
		Log( "show" ); */
	if( __EventCritterShow.Raise( cr, opponent ) )
		if( __EventCritterShowMe.Raise( opponent, cr ) )
			return true;
	//Log( "false " + cr.IsPlayer() + " " + cr.GetProtoId() );
	/* if( cr.IsPlayer() || opponent.IsPlayer() )
		Log( "show2" ); */
	return false;
}

bool hide_critter(::Critter& cr, ::Critter& opponent)
{
	if( __EventCritterHide.Raise( cr, opponent ) )
		if( __EventCritterHideMe.Raise( opponent, cr ) )
			return true;
	return false;
}

void show_trap(::Critter& cr, ::Item& item )
{
	__EventTrapShow.Raise( cr, item );
}

void hide_trap(::Critter& cr, ::Item& item )
{
	__EventTrapHide.Raise( cr, item );
}

void turn_based_begin(::Map& map)
{
	map.SetTurnBasedAvailability(false);
	map.EndTurnBased();
}

bool player_getaccess( Critter& critter, int access, string& password )
{
	return __EventPlayerGetAccess.Raise( critter, access, password );
}

void map_critter_in( ::Map& map, ::Critter& cr )
{
	__EventCritterInMap.Raise( cr, map );
}

void map_critter_out( ::Map& map, ::Critter& cr )
{
	__EventCritterOutMap.Raise( cr, map );
}

bool critter_stealing( ::Critter& cr, ::Critter& thief, ::Item& item, uint count )
{
	bool success = true;
	__EventCritterStealing.Raise( cr, thief, success, item, count );
	return success; 
}

bool items_barter( ::array< ::Item@ >& saleItems, ::array< uint >& saleItemsCount, ::array< ::Item@ >& buyItems, ::array< uint >& buyItemsCount, ::Critter& player, ::Critter& npc )
{
	return __EventItemsBarter.Raise( saleItems, saleItemsCount, buyItems, buyItemsCount, player, npc );
}

void karma_voting( ::Critter& crFrom, ::Critter& crTo, bool valUp )
{
	__EventKarmaVoting.Raise( crFrom, crTo, valUp );
}

bool critter_use_skill( ::Critter& cr, int skill, ::Critter@ targetCr, ::Item@ targetItem, ::Scenery@ targetScen )
{
	if( main_critter_use_skill( @cr, skill, @targetCr, @targetItem, @targetScen ) )
		return __EventCritterUseSkill.Raise( @cr, skill, @targetCr, @targetItem, @targetScen );
	return false;
}

void item_finish( ::Item& item, bool isDelete )
{
	__EventItemFinish.Raise( item, isDelete );
	if( @item.ScriptDescriptor !is null )
	{
		SaveData::SaveData@ anyData = cast<SaveData::SaveData> (@item.ScriptDescriptor);
		if( @anyData !is null )
			anyData.Erase();
		@item.ScriptDescriptor = null;
	}
	
}

bool player_login( uint ip, string& name, uint id, uint& textMsg, uint& strNum )
{
	return __EventPlayerLogin.Raise( ip, name, id, textMsg, strNum );
}

void items_crafted( Item@[]& items, uint[]& itemsCount, Item@[]& resources, Critter& crafter ) {}
void turn_based_end( Map& map ) {}
void turn_based_process( Map& map, Critter& cr, bool beginTurn ) {}
void turn_based_sequence( Map& map, Critter@[]& critters, Critter@ firstTurnCrit ) {}

bool player_registration( uint ip, string& name, uint& textMsg, uint& strNum )
{
	file log;
    if( log.open( "playerIps.lst", "a" ) != -1 )
	{
		log.writeString( "Регистрируется " + name + " айпи " + "<" + (ip >> 24) + "." + (ip << 8 >> 24 ) + "." + (ip << 16 >> 24 ) + "." + (ip << 24 >> 24 ) + ">" + ".\n" );
		log.close( );
	}
    return true;
}



void get_start_time( uint16& multiplier, uint16& year, uint16& month, uint16& day, uint16& hour, uint16& minute )
{
    multiplier = Time::Start::Multiplier;
    year = Time::Start::Year;
    month = Time::Start::Month;
    day = Time::Start::Day;
    hour = Time::Start::Hour;
    minute = Time::Start::Minute;
}
#endif

Mk2::Descriptor@+ item_default_descriptor( ItemMutual& item )
{
	/*Mk2::Descriptor@ descriptor = null;
	__EventItemDefaultDescriptor.Raise( item, @descriptor );
	if( !Mk2::IsEvent( item, ITEM_EVENT_FINISH ) )
				item.SetEvent( ITEM_EVENT_FINISH, "Mk2@item_finish" );
				
	if( @descriptor !is null ) 
		Log( "Find descriptor " + descriptor.Name );
	else Log( "No find def descriptor " );*/
	Mk2::Descriptor@ descriptor = @Item::GetDeafultItemDescriptor( item );
#ifdef __SERVER
	if( !Mk2::IsEvent( item, ITEM_EVENT_FINISH ) )
		item.SetEvent( ITEM_EVENT_FINISH, "Mk2@item_finish" );
#endif
	return @descriptor;
}

uint item_cost( ItemMutual& item, CritterMutual& cr, CritterMutual& npc, bool sell ) { return sell ? 1 : 2; }

#ifdef __CLIENT

funcdef bool FuncdefEventRenderIface( uint layer );
funcdef bool FuncdefEventInCritter( ::CritterCl@ critter );
funcdef bool FuncdefEventMouseUp( int click );
funcdef bool FuncdefEventMouseMove( int x, int y );
funcdef bool FuncdefEventMouseDown( int click );
funcdef bool FuncdefEventRenderMap( );
funcdef bool FuncdefEventInputLost( );
funcdef bool FuncdefEventOutMessage( ::string& message, int& type );
funcdef bool FuncdefEventScreenChange( bool show, int screen, int p0, int p1, int p2 );
funcdef bool FuncdefEventInMessage( ::string& message, int& sayType, uint& critterId, uint& delay );

funcdef bool FuncdefEventInventoryItemIn( ::ItemCl& );
funcdef bool FuncdefEventInventoryItemOut( ::ItemCl& );
funcdef bool FuncdefEventItemDrop( ::ItemCl& );
funcdef bool FuncdefEventCritterAction( bool localCall, CritterCl& cr, int action, int actionExt, ItemCl@ item );

funcdef void FuncdefEventResultRenderIface( uint layer );
funcdef void FuncdefEventResultInCritter( ::CritterCl@ critter );
funcdef void FuncdefEventResultMouseUp( int click );
funcdef void FuncdefEventResultMouseMove( int x, int y );
funcdef void FuncdefEventResultMouseDown( int click );
funcdef void FuncdefEventResultRenderMap( );
funcdef void FuncdefEventResultInputLost( );
funcdef void FuncdefEventResultOutMessage( ::string& message, int& type );
funcdef void FuncdefEventResultScreenChange( bool show, int screen, int p0, int p1, int p2 );
funcdef void FuncdefEventResultInMessage( ::string& message, int& sayType, uint& critterId, uint& delay );

funcdef void FuncdefEventResultInventoryItemIn( ::ItemCl& );
funcdef void FuncdefEventResultInventoryItemOut( ::ItemCl& );
funcdef void FuncdefEventResultItemDrop( ::ItemCl& );
funcdef void FuncdefEventResultCritterAction( bool localCall, CritterCl& cr, int action, int actionExt, ItemCl@ item );

EventRenderIface 	__EventRenderIface;
EventOutMessage	 	__EventOutMessage;
EventScreenChange 	__EventScreenChange;
EventInMessage	 	__EventInMessage;
EventMouseUp	 		__EventMouseUp;
EventMouseMove	 	__EventMouseMove;
EventMouseDown	 	__EventMouseDown;
EventInCritter	 	__EventInCritter;
EventRenderMap		__EventRenderMap;
EventInputLost		__EventInputLost;

EventInventoryItemIn	 	__EventInventoryItemIn;
EventInventoryItemOut	 	__EventInventoryItemOut;
EventItemDrop	 			__EventItemDrop;
EventCritterAction			__EventCritterAction;

class EventInputLost
{
	void Subscribe( FuncdefEventInputLost@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventInputLost@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 ) Funcdef.removeAt( index );
	}
	
	void Subscribe( FuncdefEventResultInputLost@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventResultInputLost@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 ) FuncdefResult.removeAt( index );
	}
	
	bool Raise(  )
	{
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( ) )
				return false;

		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( );

		return true;
	}
	
	private FuncdefEventInputLost@[] Funcdef;
	private FuncdefEventResultInputLost@[] FuncdefResult;
}

class EventRenderMap
{
	void Subscribe( FuncdefEventRenderMap@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventRenderMap@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 ) Funcdef.removeAt( index );
	}
	
	void Subscribe( FuncdefEventResultRenderMap@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventResultRenderMap@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 ) FuncdefResult.removeAt( index );
	}
	
	bool Raise(  )
	{
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( ) )
				return false;
				
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( );
				
		return true;
	}
	
	private FuncdefEventRenderMap@[] Funcdef;
	private FuncdefEventResultRenderMap@[] FuncdefResult;
}

class EventRenderIface
{
	void Subscribe( FuncdefEventRenderIface@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventRenderIface@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 ) Funcdef.removeAt( index );
	}
	
	void Subscribe( FuncdefEventResultRenderIface@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventResultRenderIface@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 ) FuncdefResult.removeAt( index );
	}
	
	bool Raise( uint layer )
	{
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( layer ) )
				return false;
				
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( layer );
				
		return true;
	}
	
	private FuncdefEventRenderIface@[] Funcdef;
	private FuncdefEventResultRenderIface@[] FuncdefResult;
}

bool out_message( ::string& message, int& sayType )
{
	if( !__EventOutMessage.Raise( message, sayType ) )
		return false;
	return main_out_message( message, sayType );
}

bool in_message( ::string& message, int& sayType, uint& critterId, uint& delay )
{
	if( !__EventInMessage.Raise( message, sayType, critterId, delay ) )
		return false;
	return main_in_message( message, sayType, critterId, delay );
}

class EventOutMessage
{
	void Subscribe( FuncdefEventOutMessage@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventOutMessage@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 ) Funcdef.removeAt( index );
	}
	
	void Subscribe( FuncdefEventResultOutMessage@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventResultOutMessage@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 ) FuncdefResult.removeAt( index );
	}
	
	bool Raise( ::string& message, int& sayType )
	{
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( message, sayType ) )
				return false;
				
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( message, sayType );
				
		return true;
	}
	
	private FuncdefEventOutMessage@[] Funcdef;
	private FuncdefEventResultOutMessage@[] FuncdefResult;
}

void screen_change( bool show, int screen, int p0, int p1, int p2 )
{
	__EventScreenChange.Raise( show, screen, p0, p1, p2 );
	main_change_screen( show, screen, p0, p1, p2 );
}

class EventScreenChange
{
	void Subscribe( FuncdefEventScreenChange@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventScreenChange@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 ) Funcdef.removeAt( index );
	}
	
	void Subscribe( FuncdefEventResultScreenChange@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventResultScreenChange@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 ) FuncdefResult.removeAt( index );
	}
	
	bool Raise( bool show, int screen, int p0, int p1, int p2 )
	{
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( show, screen, p0, p1, p2 ) )
				return false;
				
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( show, screen, p0, p1, p2 );
				
		return true;
	}
	
	private FuncdefEventScreenChange@[] Funcdef;
	private FuncdefEventResultScreenChange@[] FuncdefResult;
}

class EventInMessage
{
	void Subscribe( FuncdefEventInMessage@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventInMessage@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 ) Funcdef.removeAt( index );
	}
	
	void Subscribe( FuncdefEventResultInMessage@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventResultInMessage@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 ) FuncdefResult.removeAt( index );
	}
	
	bool Raise( ::string& message, int& sayType, uint& critterId, uint& delay )
	{
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( message, sayType, critterId, delay ) )
				return false;
				
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( message, sayType, critterId, delay );
				
		return true;
	}
	
	private FuncdefEventInMessage@[] Funcdef;
	private FuncdefEventResultInMessage@[] FuncdefResult;
}

class EventInCritter
{
	void Subscribe( FuncdefEventInCritter@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventInCritter@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 ) Funcdef.removeAt( index );
	}
	
	void Subscribe( FuncdefEventResultInCritter@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventResultInCritter@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 ) FuncdefResult.removeAt( index );
	}
	
	bool Raise( CritterCl@ critter )
	{
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( @critter ) )
				return false;
				
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( @critter );
				
		return true;
	}
	
	private FuncdefEventInCritter@[] Funcdef;
	private FuncdefEventResultInCritter@[] FuncdefResult;
}

class EventInventoryItemIn
{
	void Subscribe( FuncdefEventInventoryItemIn@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventInventoryItemIn@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 ) Funcdef.removeAt( index );
	}
	
	void Subscribe( FuncdefEventResultInventoryItemIn@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventResultInventoryItemIn@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 ) FuncdefResult.removeAt( index );
	}
	
	bool Raise( ItemCl& item )
	{
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( item ) )
				return false;
				
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( item );
				
		return true;
	}
	
	private FuncdefEventInventoryItemIn@[] Funcdef;
	private FuncdefEventResultInventoryItemIn@[] FuncdefResult;
}

class EventInventoryItemOut
{
	void Subscribe( FuncdefEventInventoryItemOut@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventInventoryItemOut@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 ) Funcdef.removeAt( index );
	}
	
	void Subscribe( FuncdefEventResultInventoryItemOut@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventResultInventoryItemOut@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 ) FuncdefResult.removeAt( index );
	}
	
	bool Raise( ItemCl& item )
	{
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( item ) )
				return false;
				
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( item );
				
		return true;
	}
	
	private FuncdefEventInventoryItemOut@[] Funcdef;
	private FuncdefEventResultInventoryItemOut@[] FuncdefResult;
}

class EventItemDrop
{
	void Subscribe( FuncdefEventItemDrop@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventItemDrop@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 ) Funcdef.removeAt( index );
	}
	
	void Subscribe( FuncdefEventResultItemDrop@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventResultItemDrop@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 ) FuncdefResult.removeAt( index );
	}
	
	bool Raise( ItemCl& item )
	{
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( item ) )
				return false;
				
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( item );
				
		return true;
	}
	
	private FuncdefEventItemDrop@[] Funcdef;
	private FuncdefEventResultItemDrop@[] FuncdefResult;
}

class EventMouseDown
{
	void Subscribe( FuncdefEventMouseDown@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventMouseDown@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 ) Funcdef.removeAt( index );
	}
	
	void Subscribe( FuncdefEventResultMouseDown@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventResultMouseDown@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 ) FuncdefResult.removeAt( index );
	}
	
	bool Raise( int click )
	{
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( click ) )
				return false;
				
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( click );
				
		return true;
	}
	
	private FuncdefEventMouseDown@[] Funcdef;
	private FuncdefEventResultMouseDown@[] FuncdefResult;
}

class EventMouseMove
{
	void Subscribe( FuncdefEventMouseMove@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventMouseMove@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 ) Funcdef.removeAt( index );
	}
	
	void Subscribe( FuncdefEventResultMouseMove@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventResultMouseMove@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 ) FuncdefResult.removeAt( index );
	}
	
	bool Raise( int x, int y )
	{
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( x, y ) )
				return false;
				
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( x, y );
				
		return true;
	}
	
	private FuncdefEventMouseMove@[] Funcdef;
	private FuncdefEventResultMouseMove@[] FuncdefResult;
}

class EventMouseUp
{
	void Subscribe( FuncdefEventMouseUp@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventMouseUp@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 ) Funcdef.removeAt( index );
	}
	
	void Subscribe( FuncdefEventResultMouseUp@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventResultMouseUp@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 ) FuncdefResult.removeAt( index );
	}
	
	bool Raise( int click )
	{
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( click ) )
				return false;
				
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( click );
				
		return true;
	}
	
	private FuncdefEventMouseUp@[] Funcdef;
	private FuncdefEventResultMouseUp@[] FuncdefResult;
}

class EventCritterAction
{
	void Subscribe( FuncdefEventCritterAction@ func )
	{
		Funcdef.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventCritterAction@ func )
	{
		int index = Funcdef.find( @func );
		if( index != -1 ) Funcdef.removeAt( index );
	}
	
	void Subscribe( FuncdefEventResultCritterAction@ func )
	{
		FuncdefResult.insertLast( @func );
	}
	
	void Unsubscribe( FuncdefEventResultCritterAction@ func )
	{
		int index = FuncdefResult.find( @func );
		if( index != -1 ) FuncdefResult.removeAt( index );
	}
	
	bool Raise( bool localCall, CritterCl& cr, int action, int actionExt, ItemCl@ item )
	{
		for( uint i = 0, iEnd = Funcdef.length(); i < iEnd; i++ )
			if( !Funcdef[i]( localCall, cr, action, actionExt, @item ) )
				return false;
				
		for( uint i = 0, iEnd = FuncdefResult.length(); i < iEnd; i++ )
			FuncdefResult[i]( localCall, cr, action, actionExt, @item );
				
		return true;
	}
	
	private FuncdefEventCritterAction@[] Funcdef;
	private FuncdefEventResultCritterAction@[] FuncdefResult;
}

void render_iface( uint layer )
{
	main_render_iface( layer );
	__EventRenderIface.Raise( layer );
}

void input_lost()
{
	__EventInputLost.Raise( );
}

bool mouse_up( int click )
{
	MouseDown[click] = false;
	if( IsLMenu() )
	{
		LMenuMouseUp();
		SmthClear();
		return true;
	}
	
	if( !__EventMouseUp.Raise( click ) )
		return true;
	return main_mouse_up( click );
}

void mouse_move( int x, int y )
{
	if( IsLMenu() )
		return;
	
	if( !__EventMouseMove.Raise( x, y ) )
		return;
	main_mouse_move( x, y );
}

bool mouse_down( int click )
{
	MouseDown[click] = true;
	if( !__EventMouseDown.Raise( click ) )
		return true;
	return main_mouse_down( click );
}

void item_inv_in( ::ItemCl& item )
{
	__EventInventoryItemIn.Raise( item );
}

void item_inv_out( ::ItemCl& item )
{
	__EventInventoryItemOut.Raise( item );
}

void item_drop( ::ItemCl& item )
{
	__EventItemDrop.Raise( item );
}

void critter_action( bool localCall, CritterCl& cr, int action, int actionExt, ItemCl@ item )
{
	__EventCritterAction.Raise( localCall, cr, action, actionExt, @item );
}

void critter_in( CritterCl& critter )
{
	if( critter.IsChosen() && __ChosenId != critter.Id )
	{
		__ChosenId = critter.Id;
		__ChosenName = critter.Name;
		__IsFirst = true;
	}
	
	main_critter_in( @critter );
	__EventInCritter.Raise( @critter );
	
	if( __IsFirst )
		__IsFirst = false;
	
}

void render_map()
{
	__EventRenderMap.Raise( );
}
#endif

#endif 