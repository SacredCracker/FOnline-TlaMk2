// FOS Server
// Author: cvet
// Original Fallout2 system
// In Fallout, Fallout 2 and Fallout Tactics, the amount of skill points gained is equal to 100,
// subtract the current skill level, divide by 10, and then rounded down. Thus, the maximum a skill
// can increased by books is up to 91%. Other books are used in quests.
// Read time (Int/hours): 1/10, 2/9, 3/8, 4/7, 5/6, 6/5, 7/4, 8/3, 9/2, 10/1
// For timeout used Science timeout.

void TryReadBook( Critter& cr, Item& book ) // Export
{
 /* if(uint( cr.Timeout[TO_SK_SCIENCE] ) >REAL_MINUTE(30))
  {
    cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,STR_SKILL_WEARINESS);
    return;
  }*/
  if(cr.CountReadBook[book.Proto.BookNumber] == 80 )
	return;
	
  if(book.Proto.IsReadableBook==0)
  {
    cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,STR_BOOK_READ_FAIL);
    return;
  }
  
  if( cr.CountReadBook[book.Proto.BookNumber] >= uint( book.Proto.BookCountRead + ( book.Proto.IsSkillBook == 1 ? ( cr.Perk[PE_BOOKWORM] * 5 ): 0 ) ) )
  {
    cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,STR_BOOK_READ_FAIL);
    return;
  }
  cr.CountReadBook[book.Proto.BookNumber]= cr.CountReadBook[book.Proto.BookNumber] + 1;
  //Log("cr.CountReadBook[" + book.Proto.BookNumber +"] " + cr.CountReadBook[book.Proto.BookNumber]);
  uint strNum=book.Proto.BookNumber+STR_BOOK_READ_FIRST;
  int readTime=REAL_MINUTE(MAX(1,11-cr.Stat[ST_INTELLECT]));

  switch(book.Proto.IsSkillBook)
  {
    case 1:
    {
		int bookParam=book.Proto.BookNumberParam;
		int  paramNum=bookParam+SKILL_BEGIN,
			sp=book.Proto.BookAddPoint+cr.SurplusPoint[bookParam],
			skillVal=0,
			needPoints=1;
		cr.SurplusPoint[bookParam] = 0;
      if(cr.SkillBase[paramNum]>=::GetMaxSkill(paramNum))
        return;
		//Log("Book debug info: bookParam " + bookParam + " sp " + sp + "(" + book.Proto.BookAddPoint + "/"+ cr.SurplusPoint[bookParam] + ")");
      while(sp>0)
      {
        skillVal=cr.Skill[paramNum];
        needPoints=1;
        if(skillVal>::__SkillModAdd6) needPoints=6;
        else if(skillVal>::__SkillModAdd5) needPoints=5;
        else if(skillVal>::__SkillModAdd4) needPoints=4;
        else if(skillVal>::__SkillModAdd3) needPoints=3;
        else if(skillVal>::__SkillModAdd2) needPoints=2;
        if(needPoints<=sp)
        {
          sp-=needPoints;
          cr.SkillBase[paramNum]+=_CritIsTagSkill(cr,paramNum)?2:1;
          if(cr.SkillBase[paramNum]>=::GetMaxSkill(paramNum))
          {
            cr.SkillBase[paramNum]=::GetMaxSkill(paramNum);
            break;
          }
        }
        else
        {
          cr.SurplusPoint[bookParam]=sp;
          break;
        }
      }
    } break;
    
    case 2:
    {
      int  skillVal=0,
        needPoints=1;
      int sp=0;
      for(uint paramNum=SKILL_BEGIN;paramNum<=SKILL_END;paramNum++)
      {  
        sp=book.Proto.BookAddPoint+cr.SurplusPoint[paramNum-SKILL_BEGIN];
		cr.SurplusPoint[paramNum-SKILL_BEGIN] = 0;
        while(sp>0)
        {
          skillVal=cr.Skill[paramNum];
          needPoints=1;
          if(skillVal>__SkillModAdd6) needPoints=6;
          else if(skillVal>__SkillModAdd5) needPoints=5;
          else if(skillVal>__SkillModAdd4) needPoints=4;
          else if(skillVal>__SkillModAdd3) needPoints=3;
          else if(skillVal>__SkillModAdd2) needPoints=2;
          if(needPoints<=sp)
          {
            sp-=needPoints;
            cr.SkillBase[paramNum]+=_CritIsTagSkill(cr,paramNum)?2:1;
            if(cr.SkillBase[paramNum]>=GetMaxSkill(paramNum))
            {
              cr.SkillBase[paramNum]=GetMaxSkill(paramNum);
              break;
            }
          }
          else
          {
            cr.SurplusPoint[paramNum-SKILL_BEGIN]=sp;
            break;
          }
        }
      }
    } break;
    
    case 3: cr.BookBonusBase[book.Proto.BookNumberParam]+=book.Proto.BookAddPoint; break;
    
    default: cr.StatBase[book.Proto.BookNumberParam]+=book.Proto.BookAddPoint; break;
    
  }
 /* if(cr.Timeout[TO_SK_SCIENCE]<=0) cr.TimeoutBase[TO_SK_SCIENCE]=__FullSecond;
  cr.TimeoutBase[TO_SK_SCIENCE]+=readTime;*/
  cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,strNum);
  _SubItem(book,1);
}

void DropTimeout(::Critter& cr, int, int, int)
{
  cr.TimeoutBase[TO_SK_SCIENCE]=0;
}

  







