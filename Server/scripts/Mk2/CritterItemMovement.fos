// FOS Server Client
// Author: cvet

////////////////////////////////////////////////////////////////////////////////////////////////////
// Call on something critter want move item from one slot to another.
// Return true to allow transaction, false to disallow.
// Function must exist on server and client side.

void ModuleInit( )
{
	::__EventCritterCheckMoveItem.Subscribe( @CritterCheckMoveItem );
#ifdef __SERVER
	::__EventCritterMoveItem.Subscribe( @CritterMoveItem );
#endif
}

bool CritterCheckMoveItem(::CritterMutual@ cr, ::ItemMutual@ item, uint8 toSlot, ::ItemMutual@ itemSwap)
{
	uint8 fromSlot = item.CritSlot;
	uint16 pid = item.GetProtoId();
	
	if( ( toSlot == SLOT_ARMOR || fromSlot == SLOT_ARMOR ) && cr.Mode[MODE_ONLY_ARMOR_PID] != 0 )
	{
		if( pid == uint16( cr.Mode[MODE_ONLY_ARMOR_PID] ) )
			return toSlot == SLOT_ARMOR;
	}
	
	// Drop	
	if( toSlot == SLOT_GROUND )
		return true;
	
	// If busy, then allow only hands item swapping
	bool handsSwap = ((toSlot == SLOT_HAND1 || toSlot == SLOT_HAND1) && ( fromSlot == SLOT_HAND2 || fromSlot == SLOT_HAND2 ));
    if(validEngineObject(itemSwap) && !handsSwap && fromSlot != SLOT_INV )
        return false;
		
	// Weapon animation
    if(toSlot == SLOT_HAND1 || toSlot == SLOT_HAND2)
	{
		if(item.GetType() == ITEM_TYPE_WEAPON && !::IsCritterAnim1(cr.CrType, item.Proto.Weapon_Anim1))
		{
			#ifndef __CLIENT
			#ifndef __NO_FAVORIT_ITEMS
			if(cr.IsNpc())
			{
				if(cr.GetFavoriteItem(toSlot)==pid)
				{	
					//Ищем любое другое подходящее оружее.
					::array<::ItemMutual@> items;
					bool isNewFavorit=false;
					for(uint i=0, iEnd=cr.GetItems(-1,items);i<iEnd;i++)
						if(items[i].GetType()==ITEM_TYPE_WEAPON && cr.IsAnim1(items[i].Proto.Weapon_Anim1)) 
						{
							cr.SetFavoriteItem(toSlot,items[i].GetProtoId());
							isNewFavorit=true;
						}
					if(!isNewFavorit) cr.SetFavoriteItem(toSlot,0);
				}
			}
			#endif
			#endif
			return false;
		}
	}
	
	// Armor animation
    if(toSlot == SLOT_ARMOR)
	{
		if(item.GetType() != ITEM_TYPE_ARMOR)
			return false;
		if(item.Proto.Slot != SLOT_INV)
			return false;
		if(!::IsCritterCanArmor(cr.CrType))
			return false;
	}
	
	// Custom slot checks
    if(toSlot > SLOT_ARMOR)
	{
		if(toSlot != item.Proto.Slot)
			return false;
	}
	
	// Allow moving
	return true;
}

#ifdef __SERVER

////////////////////////////////////////////////////////////////////////////////////////////////////
// Call on critter item moved.
bool CritterMoveItem(::CritterMutual@ cr, ::ItemMutual@ item, uint8 fromSlot)
{
	uint8 toSlot=item.CritSlot;
	if((toSlot>=SLOT_HAND1 && toSlot<=SLOT_ARMOR) || (fromSlot>=SLOT_HAND1 && fromSlot<=SLOT_ARMOR))
		cr.RefreshSpeed( );
	uint pid=item.GetProtoId();
	::Map@ map = cr.GetMap();

	if( validEngineObject(map) && toSlot == SLOT_GROUND )
	{
		item.EventDrop (cr);
		if( item.IsNotValid )
			return false;
			
		if( item.GetType() == ITEM_TYPE_ANIMAL )
		{
			if( item.Val1 == 0 )
			{
				//Log( "Prov? ");
				uint16 x = cr.HexX, y =cr.HexY;
				map.MoveHexByDir( x, y, cr.Dir, 1 );
				::array<int> params = { ST_ROLE_CITY, CITY_ANIMAL_ITEM };
				::CritterMutual@ animal = map.AddNpc( item.Val0, x + 1, y, cr.Dir, params, null, "Mk2@Mob::_MobInit" );
				if( validEngineObject( animal ) )
				{
					item.Val1 = animal.Id;
					animal.StatBase[ST_ROLE_CITY] = CITY_ANIMAL_ITEM;
					::DeleteItem( item );
					
					animal.StatBase[ST_REPLICATION_TIME] = 1;
					return false;
				}
			}
			else
			{
				//Log( "Trololo? ");
				::CritterMutual@ animal = ::GetCritter( item.Val1 );
				if( validEngineObject( animal ) )
				{
					::DeleteNpc( animal );
					::ItemMutual@ itAnimal = cr.AddItem( item.GetProtoId(), 1);
					if( validEngineObject( itAnimal ) )
					{
						itAnimal.Val0 = animal.GetProtoId( );
						::DeleteNpc( animal );
						return false;
					}
				}
			}
		}
	}
	#ifndef __NO_FAVORIT_ITEMS
	if( cr.IsNpc( ) )
	{	
		if(fromSlot>=SLOT_HAND1 && fromSlot<=SLOT_ARMOR)
		{
			if( cr.Stat[ ST_DEBUG_IM_TICK ] == 0 ) cr.StatBase[ ST_DEBUG_IM_TICK ] = ::GetTick( );
			uint oldTick = cr.Stat[ ST_DEBUG_IM_TICK ], tick = ::GetTick( );
			if( ( tick - oldTick ) >= 10000 )
			{
				cr.StatBase[ ST_DEBUG_IM_TICK ] = tick;
				if( cr.Stat[ ST_DEBUG_IM_COUNT ] >= 3 && cr.Stat[ ST_DEBUG_IM_COUNT_WARNING ] < 5 )
				{
					Log( "НПЦ дрочит!! Скорость: " + cr.Stat[ ST_DEBUG_IM_COUNT ] + " раз за 10 секунд. Id " + cr.Id + ". Pid итема " + pid + ". ФаворитПид для слота " + cr.GetFavoriteItem ( SLOT_HAND1 ) +". Вставим эту вещь фаворитной для слота. cr.Mode[ MODE_NO_FAVORITE_ITEM ] = " + cr.Mode[ MODE_NO_FAVORITE_ITEM ]  );
			
					ScriptInfo::CallStackToLog( );
					if( cr.Mode[ MODE_NO_FAVORITE_ITEM ] != 0 )
						cr.ModeBase[ MODE_NO_FAVORITE_ITEM ] = 0;
					// ToDo: Найти причину.
					cr.StatBase[ ST_DEBUG_IM_COUNT_WARNING ]++;
					cr.SetFavoriteItem( fromSlot, pid );
				}
				cr.StatBase[ ST_DEBUG_IM_COUNT ] = -1;
			}
			cr.StatBase[ ST_DEBUG_IM_COUNT ]++;
		}
	}
	#endif
	
	if( pid == uint(Content::Item::ACTIVE_PLASTIC_EXPLOSIVE) || pid==uint(Content::Item::ACTIVE_MINE) || pid== uint(Content::Item::ACTIVE_DYNAMITE) )
	{
		if( cr.IsDead() && fromSlot == SLOT_GROUND )
			item.Val6 = 0;
		else if( toSlot == SLOT_GROUND )
			item.Val6 = cr.Id;
	}
	if( validEngineObject(map) )
	{
		// HolodiskNumber
		if( pid != uint(Content::Item::HOLODISK) && pid != uint(Content::Item::ACTIVE_MINE) )
		{			
			if( toSlot == SLOT_GROUND && item.Accessory == ACCESSORY_CRITTER_DROP_ITEM ) // Выкладываем вещь на гекс.
			{
				::array<::ItemMutual@> items;
				for( uint i = 0, iEnd = map.GetItems ( cr.HexX, cr.HexY, items); i < iEnd; i++ )
				{
					::ItemMutual@ mine = items[i];
					if( validEngineObject( mine ) && mine.GetProtoId( ) == uint(Content::Item::ACTIVE_MINE) && mine.Val6 == 0 && item.HolodiskNumber == 0 )
					{
						mine.Val6 = item.Id; // запрещаем активирование мины криттером.
						item.HolodiskNumber = mine.Id; 
						break;
					}
				}				
			}
			else if ( fromSlot == SLOT_GROUND && item.HolodiskNumber != 0 )
			{
				::ItemMutual@ mine = ::GetItem( item.HolodiskNumber );
				item.HolodiskNumber = 0;
				if( validEngineObject( mine ) )
				{
					//Log( "-");
					::CreateTimeEvent(::__FullSecond,"explode@e_Explode",mine.Id,false);
				}
				else Log( "wtf" );
			}
		}
		
		if(toSlot == SLOT_GROUND )
		{
			if(pid==uint(Content::Item::RADIO))
			{

				if(not FLAG(item.RadioFlags,RADIO_DISABLE_SHIFT_SEND))
				{
					item.RadioFlags^=RADIO_DISABLE_SEND;
					item.Update();
				}
				if(not FLAG(item.RadioFlags,RADIO_DISABLE_SHIFT_RECV))
				{
					item.RadioFlags^=RADIO_DISABLE_RECV;
					item.Update();
				}
				return false;
			}
			if(pid==uint(Content::Item::ACTIVE_TRAP_PLANT_SPIKE))
			{
				CityGuard::ProcessOfCrime( cr, City::PenaltyListing::ExplodeActivate,0, null, item, false);
				::array<::ItemMutual@> items;
				for( uint i = 0, iEnd = map.GetItems (cr.HexX, cr.HexY, items ); i<iEnd; i++)
				{
					::ItemMutual@ trap = items[i];
					if(validEngineObject(trap) && trap.GetProtoId()==uint(Content::Item::ACTIVE_TRAP_PLANT_SPIKE))
						_TrapSpikeWalk(trap, cr, true, 0);
				}
				item.SetEvent(ITEM_EVENT_WALK,"trap@_TrapSpikeWalk");
				return false;
			}
			if(pid==uint(Content::Item::ACTIVE_PLASTIC_EXPLOSIVE) || pid==uint(Content::Item::ACTIVE_MINE) || pid==uint(Content::Item::ACTIVE_DYNAMITE))
			{
				CityGuard::ProcessOfCrime( cr, City::PenaltyListing::ExplodeActivate,0, null, item, false);
				::ItemMutual@ mine = map.GetItem(cr.HexX, cr.HexY, uint(Content::Item::ACTIVE_MINE));								
				::ItemMutual@ plast = map.GetItem(cr.HexX, cr.HexY, uint(Content::Item::ACTIVE_PLASTIC_EXPLOSIVE));
				::ItemMutual@ dynamite = map.GetItem(cr.HexX, cr.HexY, uint(Content::Item::ACTIVE_DYNAMITE));
				if(validEngineObject(mine) && ::Random(0,100)>20+cr.Stat[ST_LUCK])
				{
					ExplodeItemDrop(item);
					ExplodeItemDrop(mine);
				}
				if(validEngineObject(plast) && ::Random(0,100)>80+cr.Stat[ST_LUCK])
				{
					ExplodeItemDrop(item);
					ExplodeItemDrop(plast);
				}
				if(validEngineObject(dynamite) && ::Random(0,100)>80+cr.Stat[ST_LUCK])
				{
					ExplodeItemDrop(item);
					ExplodeItemDrop(dynamite);
				}
			}
			if( pid == uint(Content::Item::MINE) )
			{
				
			}
		}
	}
	if((toSlot==SLOT_HAND1 || toSlot==SLOT_HAND2) && item.GetType()==ITEM_TYPE_WEAPON) 
	{
		if(!cr.IsAnim1(item.Proto.Weapon_Anim1))
		{
			//cr.MoveItem(item.Id,item.GetCount(),SLOT_INV);
			#ifndef __NO_FAVORIT_ITEMS
			if(cr.IsNpc())
			{
				if(cr.GetFavoriteItem(toSlot)==pid)
				{	
					//Ищем любое другое подходящее оружее.
					::array<::ItemMutual@> items;
					bool isNewFavorit=false;
					for(uint i=0, iEnd=cr.GetItems(-1,items);i<iEnd;i++)
						if(items[i].GetType()==ITEM_TYPE_WEAPON && cr.IsAnim1(items[i].Proto.Weapon_Anim1)) 
						{
							cr.SetFavoriteItem(toSlot,items[i].GetProtoId());
							isNewFavorit=true;
						}
					if(!isNewFavorit) cr.SetFavoriteItem(toSlot,0);
				}
			}
			#endif
			return false;
		}
	}
	
	if(pid==uint(Content::Item::EXP_COLLAR) && fromSlot==SLOT_ARMOR) return false; // Исключение глобальной обработки ошейника
	
// TabaK. Вызов интерфейса Тесла-брони

	if(pid==uint(Content::Item::TESLA_ARMOR)||pid==uint(Content::Item::ADVANCED_POWER_ARMOR_MK2)||pid==uint(Content::Item::ADVANCED_POWER_ARMOR)
		||pid==uint(Content::Item::HARDENED_POWER_ARMOR)||pid==uint(Content::Item::POWERED_ARMOR))
	{
		if(cr.IsPlayer())
		{
			if(fromSlot==SLOT_ARMOR)
			{
				cr.ModeBase[MODE_TERMOVISOR]=0;
				cr.ModeBase[MODE_NIGHTVISOR]=0;
			}
		}
	}
	// Armor changing
	if(item.GetType()==ITEM_TYPE_ARMOR && (fromSlot==SLOT_ARMOR || toSlot==SLOT_ARMOR))
	{
		if(::GetCritterAnimType(cr.CrType)!=ANIM_TYPE_3D)
		{
			// Default dude
			bool isMale=(cr.Stat[ST_GENDER]==GENDER_MALE);
			uint crType=cr.Stat[ST_BASE_CRTYPE];

			if(crType==0) crType=(isMale?CRTYPE_DEFAULT_M:CRTYPE_DEFAULT_F);
			
			//Log( "crType0 " + crType );
			if(toSlot==SLOT_ARMOR) switch(crType)
			{
				case CRTYPE_DEFAULT_M:
				case CRTYPE_DEFAULT_F:
					crType=(isMale?item.Proto.Armor_CrTypeMale:item.Proto.Armor_CrTypeFemale);
					break;
				case CRTYPE_LHD_JUMPSUIT:
					if(!isMale) break;
					crType=item.Proto.Armor_CrTypeMale;
					if(crType==CRTYPE_DW_LEATHER_ARMOR_M) crType=CRTYPE_LHD_LEATHER_ARMOR;
					else if(crType==CRTYPE_DW_LEATHER_JACKET_M) crType=CRTYPE_LHD_LEATHER_JACKET;
					else if(crType==CRTYPE_DW_METAL_ARMOR_M) crType=CRTYPE_LHD_METAL_ARMOR;
					break;
				case CRTYPE_BD_JUMPSUIT:
					if(!isMale) break;
					{
						crType=item.Proto.Armor_CrTypeMale;
						if(crType==CRTYPE_DW_LEATHER_ARMOR_M) crType=CRTYPE_BD_LEATHER_ARMOR;
						else if(crType==CRTYPE_DW_LEATHER_JACKET_M) crType=CRTYPE_BD_LEATHER_JACKET;
						else if(crType==CRTYPE_DW_METAL_ARMOR_M) crType=CRTYPE_BD_METAL_ARMOR;
						else if(crType==CRTYPE_DW_LEATHER_ARMOR_MK2) crType=CRTYPE_BD_LEATHER_ARMOR_MK2;
					}
					break;
				case CRTYPE_SUPERMUTANT:
					crType=item.Proto.Armor_CrTypeMale;
					if(crType==CRTYPE_DW_LEATHER_ARMOR_M || 
					   crType==CRTYPE_DW_LEATHER_JACKET_M || 
					   crType==CRTYPE_DW_LEATHER_ARMOR_MK2) crType=CRTYPE_SM_LEATHER_JACKET;
					else if(crType==CRTYPE_DW_METAL_ARMOR_M || crType==CRTYPE_COMBAT_ARMOR_M) crType=CRTYPE_SM_LIEUTENANT;
					else if(crType==CRTYPE_PA || 
							crType==CRTYPE_APA ||
							crType==CRTYPE_SENTRY) crType=CRTYPE_BOSS;
					else crType=CRTYPE_SUPERMUTANT;
					break;
				default: 
					crType=item.Proto.Armor_CrTypeMale;
					if(crType!=CRTYPE_PA && 
						crType!=CRTYPE_APA &&
						crType!=CRTYPE_SENTRY) crType=cr.Stat[ST_BASE_CRTYPE];
					break;
			}
			//Log( "crType1 " + crType + " Armor_CrTypeMale " + item.Proto.Armor_CrTypeMale );
			if(cr.CrType!=crType) cr.ChangeCrType(crType);
		}

		// Armor modifiers
		// Also look Armor perk validation in critter_init
		int sign=(toSlot==SLOT_ARMOR?int(1):-1);
		
		RandomParametersItems::DeleteBonus(cr);	
		if(toSlot==SLOT_ARMOR)
		{			
			// Переначисление бонусов с той брони, которая реально на игроке.
			RandomParametersItems::AddBonus(cr, item);
			cr.StatBase[ST_CURRENT_ARMOR_PERK]=item.Proto.Armor_Perk;
		}
		else cr.StatBase[ST_CURRENT_ARMOR_PERK] = 0;
		
	}
	return true;
}
#endif
