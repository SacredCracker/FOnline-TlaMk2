// FOS Common

::dictionary Library;
::string@[] NoProccessingTxt; // ToDo

typedef uint length;

FileReader::Result AddSection( FileReader::Section@ section, ::string@ name )
{
	if( valid(section) && valid(name) )
	{
		if( Library.exists ( name ) )
			return FileReader::Result::Rewrite;
			
		Library.set( name, @section);
		return FileReader::Result::Done; 
	}
	else return FileReader::Result::NoArguments;
}

FileReader::Result AddGlobalValue( FileReader::Line@ line, ::string@ name )
{
	if( valid(line) && valid(name) )
	{
		if( Library.exists ( name ) )
			return FileReader::Result::Rewrite;
			
		Library.set( name, @line);
		return FileReader::Result::Done; 
	}
	else return FileReader::Result::NoArguments;
}

enum Result
{
	Unknow,
	NoArguments,
	Rewrite,
	NoFindFile,
	Empty,
	Done
}

enum TypeLoopProccess
{
	OneLine,
	Pair
}

FileReader::Result StringProccess( ::string@ txt )
{	
	if(!valid(txt))
		return FileReader::Result::NoArguments;
		
	::string@[] lines = ::splitEx( txt, "\n" );
	const FileReader::length countLine = lines.length();
	//Empty
	if( countLine == 0 )
		return FileReader::Result::Empty;
	
	::string@ currentLine = null;
	FileReader::Section@ currentSection = null; // is null == global section
	for( FileReader::length i = 0; i < countLine; i++ )
	{
		@ currentLine = lines[i];
		if(!valid(currentLine) || currentLine.length() == 0 )
			continue;
			
		switch (currentLine[0])
		{
			case '[': // new Section
			{
				if( valid( currentSection ) )
				{
					currentSection.End( );
					@currentSection = null;
				}
				
				::string@ sectionName = ::substring( currentLine, 1, ::findFirst ( currentLine, "]" ) - 1 ); 
				if( valid(sectionName) && Library.exists ( sectionName ) )
				{
					Library.get( sectionName, @currentSection );
					if(valid(currentSection))
						currentSection.Start();
				}
			}
			
			case '#': break; // Comment
			
			default:
			{
				int commentIndex = ::findFirst ( currentLine, "#" );
				if( commentIndex != -1 )
				{
					@currentLine = ::substring( currentLine, 0, commentIndex );
				}
				
				if(valid(currentSection))
				{
					switch( currentSection.Type )
					{
						case FileReader::TypeLoopProccess::OneLine:
						{
							::string@[] data = { @currentLine };
							currentSection.Proccess( data );
						} break;
						
						case FileReader::TypeLoopProccess::Pair:
						{
							::string@[] data = ::splitEx( currentLine, "=" );
							
							if( data.length() != 0 )
								currentSection.Proccess( data );
								
						} break;
					}
				}
				else
				{
					::string@[] data = ::splitEx( currentLine, "=" );
					if( data.length() != 0 )
					{ 
						if( Library.exists ( data[0] ) )
						{
							FileReader::Line@ global = null;
							Library.get( data[0], @global );
							if(valid(global))
								global.Proccess( data );
						}
						else
						{
						
						}
					}
					else
					{
					
					}
				}
			} break;
		}
	}
	
	if(valid(currentSection))
	{
		currentSection.End();
		@currentSection = null;
	}				
	
	return FileReader::Result::Done;
}

FileReader::Result ReadFile( ::string@ fileName )
{
	if(!valid(fileName))
		return FileReader::Result::NoArguments;
		
	::file f;
	if( f.open( fileName, "r" ) != -1 )
	{
		::string txt = "";
		f.readString( uint( f.getSize() ), txt );
        f.close();
		
		return StringProccess(txt);
	}
	else return FileReader::Result::NoFindFile;
}

interface Line
{
	void Proccess( ::string@[]& str );
}

interface Section
{
	void Start( );
	void End( );
	void Proccess( ::string@[]& str );
	FileReader::TypeLoopProccess get_Type();
}
