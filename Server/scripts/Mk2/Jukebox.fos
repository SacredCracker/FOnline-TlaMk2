// FOS Server
// Author: rifleman17
// Музыкальный автомат. В предмет бросается монетка, он проигрывает одну случайную мелодию
// Jukebox

enum Define
{
	PlayRadius = 25,
	Price = 10,
	EntireJB = 142,
	LastTrackIndex = 5 
}

enum String
{
	Outoforder = 25,
	Lowmoney = 26
}

const uint SilenceTime
{
	get
	{
		return REAL_MINUTE( 3 );
	}
}

::string@ get_trackList( uint index ) // треклист
{
	switch ( index )
	{
		case 0: return "akiss.acm";
		case 1: return "Maybe.ogg";
		case 2: return "ccboogie.ogg";
		case 3: return "ppmamma.ogg";
		case 4: return "SOTRainbow.ogg";
		case 5: return "HelloDolly.ogg";
		default: return null;
	}
	return null;
}

void _JukeBoxInit( ::Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_USE_ON_ME, "Jukebox::_UseOnJukeBox" );
}

bool _UseOnJukeBox( Item& item, Critter& cr, Item@ usedItem )
{
    if( valid( usedItem ) && usedItem.GetProtoId() == uint( Content::Item::BOTTLE_CAPS ) )
    {
        if( usedItem.GetCount() < uint( Jukebox::Define::Price ) )
        {
            // Не хватает денег
            cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, Jukebox::String::Lowmoney, "$price" + Jukebox::Define::Price );
            return true;
        }
        else
        {
            ::GameVar@ lastTimeUsed = GetLocalVar( LIVAR_last_used, item.Id );
            if( valid( lastTimeUsed ) && lastTimeUsed > 0 && uint( lastTimeUsed.GetValue() ) + SilenceTime > ::__FullSecond )
            {
                // Недавно использовался
                cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, Jukebox::String::Outoforder );
                return true;
            }
            else
            {
                uint   idx = ::Random( 0, Jukebox::Define::LastTrackIndex );
                uint16 x = 0, y = 0;
                ::Map @ map = item.GetMapPosition( x, y );
                if( valid( map ) )
                {
                    SETFLAG( item.Flags, ITEM_SHOW_ANIM );
                    item.Update();
                    CreateTimeEvent( __FullSecond + REAL_SECOND( 30 ), "Jukebox::e_OffJukeBox", item.Id, true );
                    array<Critter@> critters;
                    _SubItem( usedItem, 10 );
                    lastTimeUsed = __FullSecond;
                    for( uint i = 0, l = map.GetCrittersHex( x, y, Jukebox::Define::PlayRadius, FIND_ALL | FIND_ONLY_PLAYERS, critters ); i < l; i++ )
                        Media::PlayMusic( critters[ i ], trackList[ idx ], 0, 0 );
                    return true;
                }
            }
        }
    }
    return false;
}

uint e_OffJukeBox( ::array<uint> @ values )
{
    ::Item@ item = ::GetItem( values[ 0 ] );
    if( valid( item ) )
    {
        UNSETFLAG( item.Flags, ITEM_SHOW_ANIM );
        item.Update();
    }
    return 0;
}

// Покупка автоматов в Нью-Рено

bool d_JukeboxesCheck( ::Critter& player, ::Critter@ npc )
{
    ::Map@ map = ::GetMapByPid( MAP_newr_eld, 0 );
    if( valid( map ) )
    {
        if( map.GetItems( Content::Item::JUKEBOX_OFF, null ) > 0 )
            return true;
    }
    return false;
}

bool d_NotJukeboxesCheck( ::Critter& player, ::Critter@ npc )
{
    return !d_JukeboxesCheck( player, npc );
}

bool d_CanPlaceJukeBox( ::Critter& player, ::Critter@ npc )
{
    ::Location@ loc = ::GetLocation( QWarehouseGetLocId( player ) );
    if( valid( loc ) )
    {
        ::Map@ map = loc.GetMapByIndex( 0 );
        if( valid( map ) )
        {
            if( map.CountEntire( Jukebox::Define::EntireJB ) == 1 )
            {
                if( map.GetItems( Content::Item::JUKEBOX_OFF, null ) == 0 )
                    return true;
            }
        }
    }
    return false;
}

bool d_CanNotPlaceJukeBox( ::Critter& player, ::Critter@npc )
{
    return !d_CanPlaceJukeBox( player, npc );
}

bool d_AlreadyHasJukeBox( ::Critter& player, ::Critter@ npc )
{
    ::Location@ loc = ::GetLocation( QWarehouseGetLocId( player ) );
    if( valid( loc ) )
    {
        ::Map@ map = loc.GetMapByIndex( 0 );
        if( valid( map ) )
        {
            if( map.CountEntire( Jukebox::Define::EntireJB ) == 1 )
            {
                if( map.GetItems( Content::Item::JUKEBOX, null ) > 0 )
                    return true;
            }
        }
    }
    return false;
}

void r_SellJukeBox( ::Critter& player, ::Critter@ npc )
{
    ::Location@ loc = ::GetLocation( QWarehouseGetLocId( player ) );
    if( valid( loc ) )
    {
        ::Map@ map = loc.GetMapByIndex( 0 );
        if( valid( map ) )
        {
            if( map.CountEntire( Jukebox::Define::EntireJB ) == 1 )
            {
                if( map.GetItems( Content::Item::JUKEBOX_OFF, null ) == 0 )
                {
                    uint16 hX = 0, hY = 0;
                    if( map.GetEntireCoords( Jukebox::Define::EntireJB, 0, hX, hY ) )
                    {
                        map.AddItem( hX, hY, Content::Item::JUKEBOX, 1 );
                        ::Map@ mapEld = ::GetMapByPid( MAP_newr_eld, 0 );
                        if( valid( mapEld ) )
                        {
                            ::Item@[] items;
                            if( mapEld.GetItems( Content::Item::JUKEBOX_OFF, items ) > 0 )
                            {
                                ::Item@ item = items[ 0 ];
                                if( valid( item ) )
                                    ::DeleteItem( item );
                            }
                        }
                    }
                }
            }
        }
    }
}
