// FOS Client
// Author: cvet
// FOnline *.ini parser
// IniParser

// import int GetIniValue(::string& iniKey, int defaultValue) from "ini_parser";
// import int[]@ GetIniValues2(::string& iniKey, int[]@ defaultValues) from "ini_parser";
// import int[]@ GetIniValues4(::string& iniKey, int[]@ defaultValues) from "ini_parser";


int GetIniValue( const string& iniKey, int defaultValue ) // Export
{
    ::string@ str = ::GetIfaceIniStr( iniKey );
    if( @str == null || str == "" )
        return defaultValue;

    int i = 0;
    if( ! ::StrToInt( str, i ) )
        return defaultValue;

    return i;
}

int[]@ FixCoord( int[]&in coord )
{
	coord[2] -= coord[0];
	coord[3] -= coord[1];
	return @coord;
}

int[]@ GetCoord( const string& iniKey )
{
	return @FixCoord( GetIniValues4( iniKey, null ) );
}

int[]@ GetCoordSecond( const string& iniKey, const int[]&in mainScreen )
{
	int[]@ coord = FixCoord( GetIniValues4( iniKey, null ) );
	coord[0] += mainScreen[0];
	coord[1] += mainScreen[1];
	return @coord;
}

int[]@ GetCoord( const string& iniKey, int[]@ mainScreen )
{
	if( @mainScreen is null )
		return @GetCoord( iniKey );
	return @GetCoordSecond( iniKey, mainScreen );
}

int[]@ GetIfaceCoords( ::string& key )
{
    int[] coords = { 0, 0 };
    ::string str = ::GetIfaceIniStr( key );
    if( @str == null || str == "" )
        return coords;
    ::string@[]@ coordsStr = ::splitEx( str, " " );
    for( uint n = 0; n < 2; n++ )
    {
        ::StrToInt( coordsStr[ n ], coords[ n ] );
    }
    return @coords;
}

int[]@ GetIniValues2( const string& iniKey, int[]@ defaultValues ) // Export
{
    int[] result = { 0, 0 };
    if( @defaultValues != null && defaultValues.length() >= 2 )
    {
        result[ 0 ] = defaultValues[ 0 ];
        result[ 1 ] = defaultValues[ 1 ];
    }

    string@ str = GetIfaceIniStr( iniKey );
    if( @str == null || str == "" )
        return result;

    string@[] @ valuesStr = ::splitEx( str, " " );
    if( valuesStr.length() < 2 )
        return result;

    int[] values( 2 );
    if( ! StrToInt( valuesStr[ 0 ], values[ 0 ] ) )
        return result;
    if( ! StrToInt( valuesStr[ 1 ], values[ 1 ] ) )
        return result;

    result[ 0 ] = values[ 0 ];
    result[ 1 ] = values[ 1 ];
    return result;
}

bool IsKey( const string iniKey )
{
	return ( GetIfaceIniStr( iniKey ) != "" );
}

int[]@ GetIniValues4( const string& iniKey, int[]@ defaultValues ) // Export
{
    int[] result = { 0, 0, 0, 0 };
    if( defaultValues !is null && defaultValues.length() >= 4 )
    {
        result[ 0 ] = defaultValues[ 0 ];
        result[ 1 ] = defaultValues[ 1 ];
        result[ 2 ] = defaultValues[ 2 ];
        result[ 3 ] = defaultValues[ 3 ];
    }

    string@ str = GetIfaceIniStr( iniKey );
    if( str is null || str == "" )
        return result;

    string@[]@ valuesStr = splitEx( str, " " );
    if( valuesStr.length() < 4 )
        return result;

    int[] values( 4 );
    if( !StrToInt( valuesStr[ 0 ], values[ 0 ] ) )
        return result;
    if( !StrToInt( valuesStr[ 1 ], values[ 1 ] ) )
        return result;
    if( !StrToInt( valuesStr[ 2 ], values[ 2 ] ) )
        return result;
    if( !StrToInt( valuesStr[ 3 ], values[ 3 ] ) )
        return result;

    result[ 0 ] = values[ 0 ];
    result[ 1 ] = values[ 1 ];
    result[ 2 ] = values[ 2 ];
    result[ 3 ] = values[ 3 ];
    return result;
}