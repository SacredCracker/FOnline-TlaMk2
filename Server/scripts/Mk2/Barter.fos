// FOS Server Client 

#ifdef __SERVER

bool IsBarter( Critter& cr0, Critter& cr1 )
{
	return cr1.Mode[MODE_NO_BARTER] == 0 || uint( cr1.Mode[MODE_NO_BARTER] ) == cr0.Id;
}

void Call( ::Critter& cr0, ::Critter& cr1 )
{
	if( IsBarter( cr0, cr1 ) )
	{
		//::Item@[]@ items = ::array<::Item@>(0); 
		//int[]@ itemIds = ::array<int>(0);

		/*uint iEnd = cr1.GetItems ( SLOT_INV, items );
		itemIds.insertLast( iEnd * 4 );
		for( uint i = 0; i < iEnd; i++ )
		{
			itemIds.insertLast( items[i].Id );
			itemIds.insertLast( items[i].GetProtoId( ) );
			itemIds.insertLast( items[i].GetCount( ) );	
			itemIds.insertLast( items[i].GetCost( ) );		
		}
		
		items.resize( 0 );
		iEnd = cr0.GetItems ( -1, items );
		
		for( uint i = 0; i < iEnd; i++ )
		{
			itemIds.insertLast( items[i].Id );
			itemIds.insertLast( items[i].GetCost( ) / items[i].GetCount( ) );
		}*/
		
		Critter::CritterDescriptor@ descriptor0 = cast<Critter::CritterDescriptor@>(@cr0.ScriptDescriptor),
											descriptor1 = cast<Critter::CritterDescriptor@>(@cr1.ScriptDescriptor);
		if( descriptor0 !is null )
		{
			descriptor0.CritterBarterId = cr1.Id;
			descriptor1.CritterBarterId = cr0.Id;
			//Log( "Testinput" + itemIds.length() );
			cr0.ShowContainer( cr1, null, TRANSFER_CRIT_BARTER, false );
			cr0.RunClientScript( "Mk2@Barter::Show", cr1.Id, cr1.Skill[SK_BARTER], 0, null, null );
			//Log( "Testinput" + itemIds.length() );
		}
	}
}

bool IsOffer( ::Critter& player, ::Critter& cr, int[]& data )
{
	if( IsBarter( player, cr ) )
	{
		uint index = 1,
			  count = uint( data[0] ),
			  cost0 = 0, cost1 = 0, countItem = 0;
		
		uint[]@ ParseIds = ::array<uint>();
		
		while( index < count )
		{
			::Item@ item = cr.GetItemById( data[index++] );
			if( @item !is null )
			{
				countItem = data[index++];
				if( ParseIds.find( item.Id ) != -1 )
				{
					Log( "Barter bad npc data " + GetPlayerName( player.Id ) + "< double ItemId >" );
					Log( "Barter index: " + ( index - 1 ) );
					return false;
				}
				if( countItem > item.GetCount() )
				{
					Log( "Barter bad npc data " + GetPlayerName( player.Id ) + "< error CountItem ><countItem: " + countItem + " item.GetCount(): " + item.GetCount() + ">" );
					Log( "Barter index: " + ( index - 1 ) );
					return false;
				}
				ParseIds.insertLast( item.Id );
				cost0 += Barter::GetCost( player.Skill[SK_BARTER], cr.Skill[SK_BARTER], item.GetCost1st(), false ) * countItem;
			}
			else
			{
				Log( "Barter error <Not valid npc item> <" + GetPlayerName( player.Id ) + ">" );
				return false;
			}
		}

		count += uint( data[index++] ) + 1;
		while( index < count )
		{
			::Item@ item = player.GetItemById( data[index++] );
			if( @item !is null )
			{
				countItem = data[index++];
				if( ParseIds.find( item.Id ) != -1 )
				{
					Log( "Barter bad player data " + GetPlayerName( player.Id ) + "< double ItemId >" );
					Log( "Barter index: " + ( index - 1 ) );
					return false;
				}
				if( countItem > item.GetCount() )
				{
					Log( "Barter bad player data " + GetPlayerName( player.Id ) + "< error CountItem ><countItem: " + countItem + " item.GetCount(): " + item.GetCount() + ">" );
					Log( "Barter index: " + ( index - 1 ) );
					return false;
				}
				ParseIds.insertLast( item.Id );
				cost1 += Barter::GetCost( player.Skill[SK_BARTER], cr.Skill[SK_BARTER], item.GetCost1st(), true ) * countItem;
			}
			else
			{
				Log( "Barter error <Not valid player item> <" + GetPlayerName( player.Id ) + ">" );
				return false;
			}
		}
		return cost1 >= cost0;
	}
	else Log( "IsBarter false <" + GetPlayerName( player.Id ) + ">" );
	return false;
}

#endif

uint GetCost( int skillChosen, int skillSeller, uint baseCost, bool isSell )
{
	skillChosen = int( ( skillSeller - skillChosen ) * 0.5 );
	
	if( isSell )
		skillChosen = 100 - CLAMP( skillChosen, 10, 75 );
	else
		skillChosen = 100 + CLAMP( skillChosen, 10, 75 );
		
	baseCost = uint( double( baseCost * 0.01 ) * skillChosen );

	if( baseCost == 0 )
		baseCost = 1;
		
	return baseCost;
}

#ifdef __CLIENT
MainScreen Master;

int GetChosenItemIndex( int[]@ itemData, uint startIndex, uint id )
{
	for( uint i = startIndex, iEnd = itemData.length(); i < iEnd; i+=2 )
		if( id == uint( itemData[i] ) )
			return int(i);
	
	return -1;
}

void Show( int crId, int skill, int, ::string@, int[]@ )
{
	::CritterCl@ chosen = @::GetChosen();
	if( chosen !is null )
	{
		Master.Seller.Items.resize(0);
		Master.Chosen.Items.resize(0);
		
		CritterCl@ critter = GetCritter(crId);
		if( critter !is null )
		{
			::ItemCl@[]@ items = array<ItemCl@>(0);
			for( uint i = 0, iEnd = critter.GetItems( SLOT_INV, items ); i < iEnd; i++ )
				Master.Seller.Items.insertLast( @Item::Interface( items[i], @Master.Seller ) );
			
			items.resize(0);
			for( uint i = 0, iEnd = chosen.GetItems( -1, items ); i < iEnd; i++ )
			{
				Master.Chosen.Items.insertLast( @Item::Interface( items[i], @Master.Chosen ) );
			}
			
			if( !Master.IsShow )
				::ShowScreen( CLIENT_SCREEN_BARTER_MK2, crId, skill, 0 );
			else Master.OnShow( crId, skill, 0 );
		}
		else
		{
			Message( "Barter: critter is null");
			Log( "critter is null");
		}
	}
}

namespace Option
{
	namespace GUI
	{		
		uint ColorCost = COLOR_WHITE;
		
		uint ColorOfferText = COLOR_SAND;
		uint ColorTalkText = COLOR_SAND;
	}
}

void ModuleInit(){
	::__EventStart.Subscribe( @ThisModule::Build );
}

/*

BarterMain             = 0   121 639 310 # Координаты окна бартера

BarterCont1Pic         = 29  42  70  119 # Координаты изображения игрока
BarterCont2Pic         = 570 38  613 119 # Координаты изображения игрока, с которым совершается обмен

BarterChosen           = 24  36  72  123 # Изображение торгующего игрока
BarterCritter          = 567 36  615 123 # Изображение NPC, с которым совершается торговля
*/

bool Build( )
{	
	Master.Build( );
	return true;
}

funcdef bool FiltrFuncdef( Item::Interface@ data );

bool BlueprintFiltr( Item::Interface@ data )
{
	return ( data.Proto == uint16( Content::Item::BLUEPRINT ) );
}

bool EquipmentFiltr( Item::Interface@ data )
{
	::CritterCl@ chos = ::GetChosen();
	if( chos !is null )
	{
		::ItemCl@ item = _CritGetItemHand( chos );
		if( @item !is null && item.Id == data.Id )
			return true;
		@ item = _CritGetItemHandExt( chos );
		if( @item !is null && item.Id == data.Id )
			return true;
		@ item = _CritGetItemArmor( chos );
		if( @item !is null && item.Id == data.Id )
			return true;
		@ item = _CritGetItemBonus( chos );
		if( @item !is null && item.Id == data.Id )
			return true;
    }
	return false;
}

class Filtr : IGUIListingElement
{
	Filtr( Sprite::Sprite@ spr, int type, Barter::FiltrFuncdef@ func )
	{
		@Image = @spr;
		Type = type;
		IsActive = true;
		@Funcdef = @func;
	}

	/////////// IGUIListingElement //////////////////
	void Draw( int x, int y, int w, int h, uint color ) override
	{
		Image.Draw( x, y, w, h, VISUAL_FLAG_ZOOM, IsActive ? COLOR_GREEN : COLOR_DARK );
	}
	
	void ClickUp( int click ) override
	{
		IsActive = !IsActive;	
	}
	
	void ClickDown( int click ) override
	{
	
	}
	
	void Focus( ) override
	{
	
	}
	
	void LoseFocus( ) override
	{
	
	}
	
	void MouseMove( int x, int y ) override
	{
	
	}
	/////////////////////////////////////////////////////////

	bool Check( IGUIListingElement@ element )
	{
		if( !IsActive )
		{
			Item::Interface@ info = cast<Item::Interface@>(@element);
			if( @info !is null )
			{
				::ProtoItem@ proto = @info.ProtoItem;
				if( @proto !is null && ( proto.Type == Type || ITEM_TYPE_NONE == Type ) ) 
					return ( @Funcdef is null || Funcdef( @info ) );
			}
		}
		return false;
	}
	
	bool IsActive;
	int Type;
	Sprite::Sprite@ Image;
	Barter::FiltrFuncdef@ Funcdef;
}

class ScrollButton : IGUI::ElementCallbackMouseDown
{
	ScrollButton( Barter::Board@ b, int v )
	{
		Value = v;
		@BoardScroll = @b;
	}
	
	void OnMouseDown ( int click )
	{ 
		if( click == MOUSE_CLICK_LEFT )
			BoardScroll.ThisOpt.SetListingShift( false, Value );
	}
	
	int Value;
	Board@ BoardScroll;
}

class Board : IGUI::ListingElementOpt, ::IGUIDragAndDropOpt, IGUI::ElementCallbackDrawPos, Item::ItemLocation
{
	Board( bool sell )
	{
		@ Exchange = null;
		Name = "";
		CostPosition.resize( 4 );
		Position.resize( 4 );
		PositionSubScreen.resize( 0 );
		IsDrawCost = false;
		_Width = 0;
		Items.resize( 0 );
		Filtrs.resize( 0 );
		Cost = 0;
	}
	
	bool get_Hide( IGUIListingElement@ element ) override
	{
		Item::Interface@ info = cast<Item::Interface@>(@element);
		if( @info !is null )
		{
			for( uint i = 0, iEnd = Filtrs.length(); i < iEnd; i++ )
			{
				Barter::Filtr@ ftr = cast<Barter::Filtr@>( @Filtrs[i] );
				if( ftr.Check( @element ) )
					return true;
			}
			return ( @GUI_GetDragAndDrop( ) is @info );
		}
		return false;
	}
	
	void Shift( uint shift ) override
	{
		if( @InformerDescriptor !is null && cast<Item::Interface@>(@InformerDescriptor) !is null )
			SetItemInformer( -1, "", null, "", 0, 0, null );
	}
	
	::IGUIDragAndDropElement@ Drag( ::IGUIDragAndDropElement@ element ) override
	{
		return @element;
	}
	
	::IGUIDragAndDropElement@ Drop( ::IGUIDragAndDropElement@ element ) override
	{
		Item::Interface@ info = cast<Item::Interface@>(@element);
		if( @info !is null && @info.Here is @Exchange )
		{
			if( info.Count == 1 )
				info.Here.Transfer( @info, 1, @this );
			else Splitter::Show( @info );
		}
		return null;
	}
	
	void Drop()
	{ 
		Items.resize( 0 );
		@ThisOpt.Listing( @Items )
			.SetListingShift( true, 0 );
		Cost = 0;
	}
	
	::IGUIElementOpt@ get_ThisOpt()
	{
		return @Master.ScreenOpt.ElementOpt[Name];
	}
	
	::IGUIElementOpt@ get_FiltrsOpt()
	{
		return @Master.ScreenOpt.ElementOpt[Name];
	}
	
	::IGUIElementOpt@ Refresh( )
	{
		if( IsDrawCost )
		{
			Cost = 0;
			for( uint i = 0, iEnd = Items.length(); i < iEnd; i++ )
			{
				Item::Interface@ info = cast<Item::Interface@>(@Items[i]);
				if( @info !is null && info.Item !is null )
					Cost += Barter::GetCost( Master.SkillChosen, Master.SkillSeller, info.Item.GetCost1st(), IsSell ) * info.Count;
			}
		}
		return @ThisOpt.Listing( @Items )
			.SetListingShift( false, 0 ); // Нулевой сдвиг просто проверяет пределы.
	}
	
	void Build( ::string& name, Barter::Board@ exch, ::string@ costName, bool sell )
	{
		Name = name;
		IsSell = sell;
		Position = IniParser::GetCoord( Name );
		@ Exchange = @exch;
		
		_Width = Position[2];
		ItemHeight = IniParser::GetIniValue( Name + "ItemHeight", 30 );
		
		::IGUIElementOpt@ elementOpt = GUI_AddScreenElement( CLIENT_SCREEN_BARTER_MK2, null, 0, 0 )
			.SetName( Name )
			.Position( Position )
			.Listing( @Items )
			.ListingOption( @this )
			.ListingColor( 0, Item::Option::GUI::ColorFocus, Item::Option::GUI::ColorDown )
			.ListingStep( 1 )
			.ListingDad( @this );

		GUI_AddScreenElement( CLIENT_SCREEN_BARTER_MK2, null, 0, 0 )
			.Position( IniParser::GetCoord( Name + "ScrUp" ) )
			.DownPic( ::GetIfaceIniStr( Name + "ScrUpPicDn" ) )
			.CallbackMouseDown( @Barter::ScrollButton( @this, -1 ) );

		GUI_AddScreenElement( CLIENT_SCREEN_BARTER_MK2, null, 0, 0 )
			.Position( IniParser::GetCoord( Name + "ScrDn" ) )
			.DownPic( ::GetIfaceIniStr( Name + "ScrDnPicDn" ) )
			.CallbackMouseDown( @Barter::ScrollButton( @this, 1 ) );
		
		if( ::GetIfaceIniStr( Name + "Pic" ) != "" )
		{
			PositionSubScreen.resize( 4 );
			PositionSubScreen = IniParser::GetCoord( Name + "Pic" );

			AddFilter( Content::Item::BACKPACK, ITEM_TYPE_NONE, @EquipmentFiltr  );
			AddFilter( Content::Item::PISTOL_10MM, ITEM_TYPE_WEAPON );
			AddFilter( Content::Item::AMMO_10MM_JHP, ITEM_TYPE_AMMO );
			AddFilter( Content::Item::LEATHER_JACKET, ITEM_TYPE_ARMOR );
			AddFilter( Content::Item::STIMPAK, ITEM_TYPE_DRUG );
			AddFilter( Content::Item::BLUEPRINT, ITEM_TYPE_NONE, @BlueprintFiltr );
			AddFilter( Content::Item::BAG, ITEM_TYPE_NONE );
			
			GUI_AddScreenElement( CLIENT_SCREEN_BARTER_MK2, null, 0, 0 )
				.SetName( Name + "Filtres" )
				.Position( PositionSubScreen )
				.Listing( @Filtrs )
				.ListingOption( @this )
				.ListingColor( COLOR_DGREEN, COLOR_SAND, COLOR_LGRAY )
				.ListingStep( 1 );
		}
		
		if( @costName !is null )
		{
			IsDrawCost = true;
			elementOpt.CallbackDrawPos( @this );
			CostPosition = IniParser::GetCoord( costName );
		}
	}

	void OnDraw( int ScreenX, int ScreenY, int ElementX, int ElementY )
	{		
		::DrawText( "" + Cost + "$", ScreenX + CostPosition[0], ScreenY + CostPosition[1], 
			CostPosition[2], CostPosition[3], ThisModule::Option::GUI::ColorCost, FONT_FALLOUT, FT_CENTERXY | FT_ALIGN | FT_BORDERED );
	}
	
	int get_Height( IGUIListingElement@ element ) override
	{
		Barter::Filtr@ filtr = cast<Barter::Filtr@>(@element);
		if( @filtr !is null )
			return 15;			
		return ItemHeight;
	}
	
	int get_Width( IGUIListingElement@ element ) override
	{ 
		Item::Interface@ info = cast<Item::Interface@>(@element);
		if( @info !is null )
		{
			if( Item::Option::GUI::Width == 0 )
			{
				if( info.Image.Width > _Width )
					return _Width;
				return info.Image.Width;
			}
			return Item::Option::GUI::Width;
		}
		else
		{
			Barter::Filtr@ filtr = cast<Barter::Filtr@>(@element);
			if( @filtr !is null )
				return 15;			
		}
		return Item::Option::GUI::Width;
	}
	
	void AddFilter( uint pid, int type, Barter::FiltrFuncdef@ func = null )
	{
		Sprite::Sprite spr();
		spr.LoadItem( pid );
		Filtrs.insertLast( @Barter::Filtr( @spr, type, @func ) );
	}
	
	void Transfer( IGUIListingElement@ item, uint count, Item::ItemLocation@ exchange ) override
	{
		if( @exchange is null )
			@exchange = @Exchange;
			
		for( uint i = 0, iEnd = Items.length(); i < iEnd; i++ )
		{
			if( @item == @Items[i] )
			{
				Item::Interface@ info = cast<Item::Interface@>(@item);
				if( info.Count != count )
					@info = @Item::Interface( info, count );
				else Items.removeAt( i );
				exchange += info;
				
				//if( exchange)
				Refresh();
				if( cast<Barter::Board@>( @exchange ) !is null )
					cast<Barter::Board@>( @exchange ).Refresh();
				return;
			}
		}
	}
	
	Item::ItemLocation@ opAddAssign( Item::Interface& item )
	{
		const ::ProtoItem@ proto = item.ProtoItem;
		if( @proto !is null )
		{
			for( uint i = 0, iEnd = Items.length(); i < iEnd; i++ )
			{
				if( cast<Item::Interface@>(@Items[i]).Id == item.Id )
				{
					cast<Item::Interface@>(@Items[i]).Count += item.Count;
					return @this;
				}
			}
			
			Items.insertLast( @item );
			@item.Here = this;
		}
		return @this;
	}
	
	void GetData( int[]@ data )
	{
		data.insertLast( int( Items.length() * 2 ) );
		for( uint i = 0, iEnd = Items.length(); i < iEnd; i++ )
		{
			Item::Interface@ info = cast<Item::Interface@>(@Items[i]);
			data.insertLast( info.Id );
			data.insertLast( info.Count );
		}
	}
	
	bool IsDrawCost;
	uint Cost;
	int[] CostPosition;
	
	bool IsSell;
	Board@ Exchange;
	
	int _Width;
	int ItemHeight;
	
	::string Name;
	int[] Position;
	int[] PositionSubScreen;
	
	IGUIListingElement@[] Filtrs;
	IGUIListingElement@[] Items;
}

class CritterAnimateScreen
{
	uint CritterId;
}

class ButtonOffer : IGUI::ElementCallbackMouseDown
{
	void OnMouseDown ( int click )
	{ 
		if( click == MOUSE_CLICK_LEFT )
			Master.Offer( );
	}
}

class ButtonTalk : IGUI::ElementCallbackMouseDown
{
	void OnMouseDown ( int click )
	{ 
		if( click == MOUSE_CLICK_LEFT )
			::HideScreen( CLIENT_SCREEN_BARTER_MK2 , 0, 0, 0 );
	}
}

class MainScreen : IGUI::ScreenCallbackShow,  IGUI::ScreenCallbackHide
{	
	void Build( )
	{
		
		GUI_CreateScreen( CLIENT_SCREEN_BARTER_MK2, ::GetIfaceIniStr( "BarterMainPic" ) )
			.CallbackShow( @this )
			.AutoCursor( true, CURSOR_DEFAULT )
			.CallbackHide( @this );
		
		Seller.Build( "BarterCont2", @SellerExchange, null, false );
		Chosen.Build( "BarterCont1", @ChosenExchange, null, true );
		
		SellerExchange.Build( "BarterCont2o", @Seller, "BarterCost2", false );
		ChosenExchange.Build( "BarterCont1o", @Chosen, "BarterCost1", true );
		
		GUI_AddScreenElement( CLIENT_SCREEN_BARTER_MK2, null, 0, 0 )
			.DownPic( ::GetIfaceIniStr( "BarterOfferPic" ) )
			.Position( IniParser::GetCoord( "BarterOffer" ) )
			.CallbackMouseDown( @Barter::ButtonOffer() );
		
		GUI_AddScreenElement( CLIENT_SCREEN_BARTER_MK2, null, 0, 0 )
			.Position( IniParser::GetCoord( "BarterOfferText" ) )
			.Text( ::strupr(::GetMsgStr( TEXTMSG_GAME, STR_BARTER_OFFER )), FONT_FAT, ThisModule::Option::GUI::ColorOfferText, ThisModule::Option::GUI::ColorOfferText, FT_CENTERXY );
		
		GUI_AddScreenElement( CLIENT_SCREEN_BARTER_MK2, null, 0, 0 )
			.DownPic( ::GetIfaceIniStr( "BarterTalkPic" ) )
			.Position( IniParser::GetCoord( "BarterTalk" ) )
			.CallbackMouseDown( @Barter::ButtonTalk() );
		
		GUI_AddScreenElement( CLIENT_SCREEN_BARTER_MK2, null, 0, 0 )
			.Position( IniParser::GetCoord( "BarterTalkText" ) )
			.Text( ::strupr(::GetMsgStr( TEXTMSG_GAME, STR_BARTER_TALK )), FONT_FAT, ThisModule::Option::GUI::ColorTalkText, ThisModule::Option::GUI::ColorTalkText, FT_CENTERXY );		
	}
	
	void Offer( )
	{
		int[] data = {};
		SellerExchange.GetData( data );
		ChosenExchange.GetData( data );			
		::RunServerScriptUnsafe( "Mk2@unsafe_Barter::Offer", 0, 0, 0, null, data );
	}
	
	void OnHide( int, int, int )
	{	
		IsShow = false;
		::IGUIScreenOpt@ dialogScreenOpt = GUI_GetActiveScreenOptions( CLIENT_SCREEN_DIALOG_MK2, 0 );
		if( @dialogScreenOpt !is null )
			dialogScreenOpt.ToHide( false );
			
		//ImageFiltr.resize( 0 );
		Seller.Drop();
		Chosen.Drop();
		SellerExchange.Drop();
		ChosenExchange.Drop();
	}
	
	void OnShow( int crId, int skill, int p2 )
	{
		IsShow = true;
		
		SellerId = uint( crId );
		::CritterCl@ chos = ::GetChosen( );
		if( @chos !is null )
			SkillChosen = chos.Skill[SK_BARTER];
		SkillSeller = skill;
		@ ScreenOpt = GUI_GetActiveScreenOptions( CLIENT_SCREEN_BARTER_MK2, 0 );
		Seller.Refresh();
		Chosen.Refresh();
		
		SellerExchange.Drop();
		ChosenExchange.Drop();
		
		SellerExchange.Refresh();
		ChosenExchange.Refresh();
		
		::IGUIScreenOpt@ dialogScreenOpt = GUI_GetActiveScreenOptions( CLIENT_SCREEN_DIALOG_MK2, 0 );
		if( @dialogScreenOpt !is null )
			dialogScreenOpt.ToHide( true );
	}
	
	uint SkillChosen = 0;
	uint SkillSeller = 0;
	uint SellerId = 0;
	
	bool IsShow = false;
	::IGUIScreenOpt@ ScreenOpt = null;
	
	Board Seller;
	Board Chosen;
	
	Board SellerExchange;
	Board ChosenExchange;
}

#endif