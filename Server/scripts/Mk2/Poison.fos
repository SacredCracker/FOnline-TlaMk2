// FOS Server
// Author: cvet
// Original Fallout2 system

// import void Affect(::Critter& cr, int value) from "poison";
// import void Drop(::Critter& cr) from "poison";

#define POISON_BASE_DURATION       (REAL_SECOND(505))
#define POISON_DURATION_SUB        (REAL_SECOND(5))

#define STR_POISON_GAIN            (12810)
#define STR_POISON_PROCESS         (12811)
#define STR_POISON_REDUCE          (12812)
#define STR_POISON_FREE            (12813)


void Affect(::Critter& cr, int value) // Export
{
	if(cr.IsDead()) return;

	int levelVal=cr.Stat[ST_POISONING_LEVEL];

	if(value>0) value-=int((value*cr.Stat[ST_POISON_RESISTANCE])*0.01);
	else if(levelVal==0) return;
	cr.StatBase[ST_POISONING_LEVEL]=CLAMP(levelVal+value,0,2000);
	levelVal=cr.Stat[ST_POISONING_LEVEL];
	
	uint strNum=0;
	if(levelVal==0) strNum=STR_POISON_FREE;
	else if(value>0) strNum=STR_POISON_GAIN;
	else if(value<0) strNum=STR_POISON_REDUCE;
	if(strNum!=0) cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,strNum);

	cr.DamageBase[DAMAGE_POISONED]=levelVal<=0?0:1;
	
	uint[] indexes, durations;
	if(cr.GetTimeEvents(CTE_POISON,indexes,durations) != 0) // Try hurry event, if new stage aviable
	{
		if(levelVal==0)
		{
			cr.EraseTimeEvents(CTE_POISON);
		}
		else
		{
			uint oldDuration=durations[0];
			uint newDuration=GetDuration(cr);
			if(newDuration<oldDuration) cr.ChangeTimeEvent(indexes[0],newDuration,0,0);
		}
	}
	else // Try start new event
	{
		cr.AddTimeEvent("Mk2@Poison::cte_Poison",GetDuration(cr),CTE_POISON);
	}
}

void Drop(::Critter& cr) // Export
{
	cr.EraseTimeEvents(CTE_POISON);
	cr.StatBase[ST_POISONING_LEVEL]=0;
	cr.DamageBase[DAMAGE_POISONED]=0;
}

uint cte_Poison(::Critter& cr, int identifier, int& rate, int&)
{	
	if(cr.IsDead()) return 100;

	int levelVal=cr.Stat[ST_POISONING_LEVEL];
	if(levelVal>0)
	{
		cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,STR_POISON_PROCESS);
		cr.StatBase[ST_POISONING_LEVEL]=CLAMP(levelVal-4,0,2000);
		cr.StatBase[ST_CURRENT_HP]-=levelVal*0.4>0?int( levelVal*0.4 ):1;
		if(cr.Stat[ST_CURRENT_HP]<=0) cr.ToDead(::Random(0,1)==0?ANIM2_DEAD_FRONT:ANIM2_DEAD_BACK,null);
	}

	if(cr.Stat[ST_POISONING_LEVEL]==0)
	{
		cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,STR_POISON_FREE);
		cr.DamageBase[DAMAGE_POISONED]=0;
		return 0;
	}

	return GetDuration(cr);
}

uint GetDuration(::Critter& cr)
{
	int duration=POISON_BASE_DURATION;
	int levelVal=cr.Stat[ST_POISONING_LEVEL];
	if(levelVal==0) return 0;
	duration-=levelVal*POISON_DURATION_SUB;
	if(duration<=0) duration=REAL_SECOND(1);
	return duration;
}