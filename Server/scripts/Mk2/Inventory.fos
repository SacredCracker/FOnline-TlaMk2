// FOS Client

/*
InvScrUpPic   = INVUPOUT.FRM    # Изображение кнопки пролистывания "вверх"
InvScrUpPicDn = INVUPIN.FRM     # Изображение нажатой кнопки пролистывания "вверх"
InvScrUpPicNa = INVUPDS.FRM     # Изображение неактивной кнопки пролистывания "вверх"
InvScrUp      = 134 102  154 120  # Координаты кнопки пролистывания
InvScrDnPic   = INVDNOUT.FRM    # Изображение кнопки пролистывания "вниз"
InvScrDnPicDn = INVDNIN.FRM     # Изображение нажатой кнопки пролистывания "вниз"
InvScrDnPicNa = INVDNDS.FRM     # Изображение неактивной кнопки пролистывания "вниз"
InvScrDn      = 134 126  154 144  # Координаты кнопки пролистывания

InvOkPicDn    = MENUDOWN.FRM    # Изображение нажатой кнопки закрытия окна
InvOk         = 441 409 460 427 # Координаты кнопки закрытия окна
InvText       = 300 48  445 230 # Координаты области текста
*/

InventoryScreen Master;

void ModuleInit( )
{
	GuiKit::Add( CLIENT_SCREEN_INVENTORY_MK2, @Master );
	::__EventInventoryItemIn.Subscribe( @RefreshInventory );
	::__EventInventoryItemOut.Subscribe( @RefreshInventory );
	
	::__EventCritterAction.Subscribe( @CritterAction );
}

bool LoopRefresh( uint& loop )
{
	Master.Refresh();
	loop = 0;
	return true;
}

bool CritterAction( bool localCall, ::CritterCl& cr, int action, int actionExt, ::ItemCl@ item )
{
	if( !localCall )
	{
		if( cr.Id == Master.CritterId && item !is null )
		{
			if( action == ACTION_MOVE_ITEM || action == ACTION_MOVE_ITEM_SWAP )
				Master.UpdateItem( item );
			else if( action == ACTION_DROP_ITEM )
				::__EventLoop.Subscribe( @LoopRefresh, ::__Ping + 5 );
		}
	}
	return true;
}

bool RefreshInventory( ::ItemCl& item )
{
	//Master.UpdateItem( item );
	::__EventLoop.Subscribe( @LoopRefresh, ::__Ping + 5 );
	return true;
}

void OkButton( int click )
{
	if( click == MOUSE_CLICK_LEFT )
		::HideScreen( CLIENT_SCREEN_INVENTORY_MK2, 0, 0, 0 );
}

class InventoryScreen : GuiKit::GUIScreenPattern, IGUI::ScreenCallbackShow, IGUI::ScreenCallbackHide, IGUI::ElementCallbackDrawPos
{
	InventoryScreen()
	{
		@Slots = ::array<ThisModule::Slot@>(0);
		
		Slots.insertLast( @ThisModule::Slot( "Inv", SLOT_INV, 0 ) );
		Slots.insertLast( @ThisModule::Slot( "Slot1", SLOT_HAND1 ) );
		Slots.insertLast( @ThisModule::Slot( "Slot2", SLOT_HAND2 ) );
		Slots.insertLast( @ThisModule::Slot( "Armor", SLOT_ARMOR ) );
		Slots.insertLast( @ThisModule::Slot( "Bonus", SLOT_BONUS ) );
		Slots.insertLast( @ThisModule::Slot( "Ground",	SLOT_GROUND, 5 ) );
	}
	
	void UpdateItem( ItemCl& item )
	{		
		for( uint i = 0, iEnd = Slots.length(); i < iEnd; i++ )
			if( uint( Slots[i].SlotIndex ) == item.CritSlot )
				Slots[i].UpdateItem( item );
			else Slots[i].DeleteItem( item );
	}
	
//////////// GUIScreenPattern ////////////
	::string@ get_Name() override{
		return "Inv";
	}
	
	void Build( int screenIndex, ::IGUIScreenOpt@ opt ) override
	{
		for( uint i = 0, iEnd = Slots.length(); i < iEnd; i++ )
			Slots[i].Build( screenIndex );
		
		@Animation = GuiKit::CritterAnimation( "Chosen" );
		GuiKit::Button( @OkButton, "Ok", null, true );
		
		@TextPosition = IniParser::GetCoord( GuiKit::FormatKey( "Text" ) );
		GUI_AddScreenElement( screenIndex, ::GetIfaceIniStr( Name + "Pic" ), 0, 0 )
			.Position( TextPosition )
			.CallbackDrawPos( @this );
	}
	
////////// ScreenCallbackShow ///////////////
	void OnShow( int crId, int, int ) override
	{
		CritterId = crId;
		Refresh();
		Animation.OnShow( CritterId );
	}
	
////////// ScreenCallbackHide ///////////////
	void OnHide( int, int, int ) override
	{
		CritterId = 0;
		for( uint i = 0, iEnd = Slots.length(); i < iEnd; i++ )
			Slots[i].OnShow( CritterId, this );
		Animation.OnShow( CritterId );
	}
	
/////////// ElementCallbackDrawPos ////////////////////////
	void OnDraw( int ScreenX, int ScreenY, int ElementX, int ElementY ) override
	{		
		int x = ScreenX + ElementX, y = ScreenY + ElementY, w = TextPosition[2], h = TextPosition[3];
        DrawDescription( DESC_INVENTORY_MAIN, x, y );
		DrawDescription( DESC_INVENTORY_SPECIAL, x, y );
		DrawDescription( DESC_INVENTORY_STATS, x, y );
		DrawDescription( DESC_INVENTORY_RESIST, x, y );
	}
	
	void DrawDescription( int type, int x, int y )
	{
		int offsX = 0, offsY = 0;
		::string@ text = generic_description( type, offsX, offsY );
		::DrawText( text, x + offsX, y + offsY, x + offsX + TextPosition[2], y + offsY + TextPosition[3], COLOR_GREEN, FONT_FALLOUT, FT_BORDERED );
	}
//////////////////////////////////////////////

	void Refresh()
	{
		for( uint i = 0, iEnd = Slots.length(); i < iEnd; i++ )
			Slots[i].OnShow( CritterId, this );
	}

	bool IsRefresh( )
	{
		for( uint i = 0, iEnd = Slots.length(); i < iEnd; i++ )
			if( Slots[i].IsRefresh( ) )
				return true;
		return false;
	}

	uint CritterId;
	ThisModule::Slot@[]@ Slots;
	GuiKit::CritterAnimation@ Animation;
	
	int[]@ TextPosition;
}

class Slot : Item::ItemLocation, GuiKit::IGuiKitElement, IGUI::ListingElementOpt, ::IGUIDragAndDropOpt
{
	Slot( string name, int index, uint maxItems = 1 )
	{
		@MyName = name;
		SlotIndex = index;
		MaxItems = maxItems;
		@Items = ::array<IGUIListingElement@>( 0 );
	}
///////////// IGuiKitElement ////////////////////
	GuiKit::IGuiKitElement@ Build( int screenIndex ) override
	{
		@Position = IniParser::GetCoord( Name );
		@IGUIOption = @GUI_AddScreenElement( screenIndex, ::GetIfaceIniStr( Name + "Pic" ), 0, 0 )
			.Position( Position )
			.SetName( Name )
			.Listing( @Items )
			.ListingOption( @this )
			.ListingColor( 0, Item::Option::GUI::ColorFocus, Item::Option::GUI::ColorDown )
			.ListingStep( 1 )
			.ListingDad( @this );
		
		_Width = Position[2];
		_Height = Position[3];
		ItemHeight = IniParser::GetIniValue( Name + "HeightItem", 30 );
		return @this;
	}
///////// ListingElementOpt /////////////////
	int get_Height( IGUIListingElement@ element ) override
	{
		if( MaxItems == 1 )
			return _Height;
		return ItemHeight;
	}
	
	int get_Width( IGUIListingElement@ element ) override
	{
		if( MaxItems == 1 )
			return _Width;
			
		ThisModule::ItemInfo@ info = cast<ThisModule::ItemInfo@>(@element);
		if( @info !is null && Item::Option::GUI::Width == 0 )
		{
			if( info.Image.Width > _Width )
				return _Width;
			return info.Image.Width;
		}
		return Item::Option::GUI::Width;
	}
	
	void Shift( uint shift ) override {}
	bool get_Hide( IGUIListingElement@ element ) override { return false;	}
///////// ItemLocation ////////////////////
	void Transfer( IGUIListingElement@ element, uint count, Item::ItemLocation@ exchange ) override
	{
		ThisModule::ItemInfo@ info = cast<ThisModule::ItemInfo@>(@element);
		if( @info !is null )
		{
			::CritterCl@ critter = ::GetCritter( CritterId );
			::ItemCl@ item = @info.Item,
						itemSwap = null;
			
			if( @exchange is null && @item !is null && @critter !is null )
			{
				int toSlot = SLOT_HAND2, fromSlot = item.CritSlot;
				if( CtrlPressed && @info.Transfer is null )
				{
					if( fromSlot == SLOT_INV )
					{
						switch( item.GetType() )
						{
							case ITEM_TYPE_WEAPON:
								if( critter.GetItems( SLOT_HAND1, null ) == 0 )
									toSlot = SLOT_HAND1;
								break;
									
							case ITEM_TYPE_ARMOR:	toSlot = SLOT_ARMOR;
								break;
   	
							default: break;
						}

						if( item.Proto.Slot  > SLOT_ARMOR && ( item.GetType() != ITEM_TYPE_WEAPON || ( item.GetType() == ITEM_TYPE_WEAPON && toSlot ==  SLOT_HAND2 ) ) )
							toSlot = item.Proto.Slot;
					}
					else toSlot = SLOT_INV;
				}
				else toSlot = SLOT_GROUND;
					
				for( uint i = 0, iEnd = Master.Slots.length(); i < iEnd; i++ )
					if( Master.Slots[i].SlotIndex == toSlot )
						@exchange = @Master.Slots[i];
			}

			if( @exchange !is null )
			{
				for( uint i = 0, iEnd = Items.length(); i < iEnd; i++ )
				{
					if( @element is @Items[i] )
					{
						Inventory::Slot@ toLoc = cast<Inventory::Slot@>(@exchange); 
						if( @toLoc !is null && @critter !is null && @item !is null )
						{
							if( toLoc.SlotIndex == SLOT_GROUND && @info.Transfer is null && info.Count != 1 )
							{
								Splitter::Show( @info );
								break;
							}
								
							if( toLoc.MaxItems != 0 && toLoc.Items.length() == toLoc.MaxItems )
								@itemSwap = @cast<ThisModule::ItemInfo@>(@toLoc.Items[toLoc.MaxItems - 1]).Item;
						
							if( @itemSwap !is null )
							{
								if( itemSwap.GetType() == ITEM_TYPE_WEAPON && item.GetType() == ITEM_TYPE_AMMO && item.Proto.Ammo_Caliber == itemSwap.Proto.Weapon_Caliber )
								{
									if( critter.IsChosen() )
									{
										uint[] actions = { CHOSEN_USE_ITEM, itemSwap.Id, itemSwap.GetProtoId(), TARGET_SELF_ITEM, item.Id, USE_RELOAD, 0 };
										::SetChosenActions( actions );
										::__EventLoop.Subscribe( @LoopRefresh, ::__Ping + 5 );
									}
									break;
								}
							}
							
							if( ::__EventCritterCheckMoveItem.Raise( critter, item, toLoc.SlotIndex, @itemSwap ) )
							{
								if( critter.IsChosen() )
								{
									uint[] actions = { CHOSEN_MOVE_ITEM, item.Id, count, toLoc.SlotIndex, 0, 0, 0 };
									::SetChosenActions( actions );
								}
								
								::__EventLoop.Subscribe( @LoopRefresh, ::__Ping + 5 );
							}
							//CHOSEN_MOVE_ITEM          (7)  // Item id, Item count, To slot, Is barter container, Is second try
						}
						break;
					}
				}
			}
		}
	}

	Item::ItemLocation@ opAddAssign( Item::Interface& item )
	{
		const ::ProtoItem@ proto = item.ProtoItem;
		if( @proto !is null )
		{
			for( uint i = 0, iEnd = Items.length(); i < iEnd; i++ )
				if( cast<ThisModule::ItemInfo@>(@Items[i]).Id == item.Id )
				{
					cast<ThisModule::ItemInfo@>(@Items[i]).Count += item.Count;
					return @this;
				}
			
			Items.insertLast( @item );
			@item.Here = this;
			item.CritSlot = SlotIndex;
		}
		return @this;
	}

////////// IGUIDragAndDropOpt ////////////////////////////////////
	::IGUIDragAndDropElement@ Drag( ::IGUIDragAndDropElement@ element ) override{ return @element; }
	::IGUIDragAndDropElement@ Drop( ::IGUIDragAndDropElement@ element ) override
	{	
		ThisModule::ItemInfo@ info = cast<ThisModule::ItemInfo@>(@element);
		if( @info !is null && @info.Item !is null && cast<Item::ItemLocation@>(@this) !is @info.Here )
			info.Here.Transfer( @info, info.Item.GetCount(), @this );
		return null;
	}
	
////////////////////////////////////////////////
	
	void DeleteItem( ItemCl& item )
	{
		for( uint i = 0, iEnd = this.Items.length(); i < iEnd; i++ )
			if( @this.Items[i] !is null && cast<ThisModule::ItemInfo@>(@Items[i]).Id == item.Id )
			{
				Items.removeAt( i-- );
				iEnd--;
			}
	}
	
	bool IsRefresh( )
	{
		for( uint i = 0, iEnd = Items.length(); i < iEnd; i++ )
		{
			ItemCl@ item = GetItem( cast<ThisModule::ItemInfo@>(@Items[i]).Id );
			if( item !is null && ( item.CritSlot != uint( cast<ThisModule::ItemInfo@>(@Items[i]).CritSlot ) || item.CritSlot != uint( SlotIndex ) ) )
				return true;
		}
		return false;
	}
	
	void OnShow( uint& crId, Inventory::InventoryScreen& main ) 
	{
		@Main = main;
		
		if( crId == 0 )
		{
			this.Items.resize( 0 );
			return;
		}
		
		IGUIOption.SetListingShift( true, 0 );
		
		CritterId = crId;
		CritterCl@ critter = ::GetCritter( CritterId );
		if( critter is null )
			return;
			
		if( this.Items is null )
			return;
			
		ItemCl@[] items;
		ItemCl@[] result_items;
		this.Items.resize( 0 );
		
		//SortValue
		
		uint iEnd = critter.GetItems( -1, items ), count = 0;
		
		for( uint i = 0; i < iEnd; i++ )
		{
			if( items[i] is null )
			{
				items.removeAt( i-- );
				iEnd--;
			}
		}
		
		for( uint temp = 0; temp < iEnd; temp++ )
		{
			::ItemCl@ item = items[temp];
			bool insert = false;
			
			for( uint i = 0, iend = result_items.length(); i < iend; i++ )
			{
				if( item.SortValue > result_items[i].SortValue )
				{
					result_items.insertAt( i, item );
					insert = true;
					break;
				}
			}
			
			if( !insert )
				result_items.insertLast( item );
		}
		
		iEnd = result_items.length();
		for( uint i = 0; i < iEnd; i++ )
		{
			if( @result_items[i] !is null && AddItem( result_items[i] ) )
			{
				if( 0 != MaxItems && ++count == MaxItems)
					break;
			}
		}
	}
	
	void UpdateItem( ItemCl& item )
	{
		for( uint i = 0, iEnd = this.Items.length(); i < iEnd; i++ )
		{
			if( this.Items[i] !is null && cast<ThisModule::ItemInfo@>(@Items[i]).Id == item.Id )
			{
				ThisModule::ItemInfo info( item, @this );
				info.DrawSlotName = false;
				@Items[i] = @info;
				return;
			}
		}
		// AddItem( item );
	}
	
	bool AddItem( ItemCl& item )
	{
		if( uint( SlotIndex ) == item.CritSlot )
		{
			ThisModule::ItemInfo info( item, @this );
			info.DrawSlotName = false;
			Items.insertLast( @info );
			return true;
		}
		return false;
	}
	
//////// Virtual property //////////////////////
	::string@ get_Name( ){
		return @GuiKit::FormatKey( MyName );
	}

	int SlotIndex;
	uint MaxItems;
	::string@ MyName;
	
	int _Height;
	int _Width;
	int ItemHeight;
	
	uint CritterId;
	
	int[]@ Position;
	
	IGUIListingElement@[]@ Items;
	::IGUIElementOpt@ IGUIOption;
	Inventory::InventoryScreen@ Main;
}

class ItemInfo : Item::Interface
{
	ItemInfo( ::ItemCl& item, Item::ItemLocation@ slot ){ super( item, @slot ); }
	
	void Drop( ) override
	{
		//uint16 hx = 0, hy = 0;
		if( GUI_GetMouseScreenIndex( ) == CLIENT_SCREEN_NONE )
		{
			//if( ::GetMonitorHex ( ::__MouseX, ::__MouseY, hx, hy ) )
			{
				::CritterCl@ critter = ::GetCritter( Master.CritterId );
				
				if( @critter !is null && critter.IsChosen() )
				{
					if( ::__EventCritterCheckMoveItem.Raise( critter, Item, SLOT_GROUND, null ) )
					{
						if( Count != 0 )
						{
							if( @Transfer is null && Count != 1 )
							{
								Splitter::Show( @this );
								return;
							}
						}
					
						uint[] actions = { CHOSEN_MOVE_ITEM, Id, Count, SLOT_GROUND, 0, 0, 0 };
						::SetChosenActions( actions );
						
						::__EventLoop.Subscribe( @LoopRefresh, ::__Ping + 5 );
					}
				}
			}
			
		}
	}
	
	void after_Draw( Item::Interface@ swapItem, int x, int y ) override
	{
		
		/*if( swapItem !is null )
		{
		// CombinationTemplate.Draw( x - Image.Width * 0.5 , y - Image.Height * 0.5 );
			DrawText( "+", x - Image.Width * 0.5, y - Image.Height * 0.5, 12, 12, COLOR_GREEN, FONT_FALLOUT, FT_ALIGN | FT_BORDERED );
		}
		*/
	}
}
