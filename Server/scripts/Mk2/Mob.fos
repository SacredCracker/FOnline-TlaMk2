// FOS Server
// Author: heX, cvet

/*
	Generic mob ai
	Òîëüêî äëÿ ìîáîâ æèâîòíûõ.
	Var6..Var9 çàíÿòû.
	ðåêîìåíäóåòüñÿ âûñòàâëÿòü TeamId â äèàïàçîíå: 24..33
	33 - íå ãðóïèðóåòñÿ, ýòî çíà÷èò ÷òî ìîáû íå áóäóò ïîìîãàòü äðóã äðóãó.
	òàêæå ó÷òèòå ÷òî ãðóïïà 0 òîæå íå ãðóïïèðóåòñÿ.

	TODO:
	ñäåëàòü ÷òîáû VarFear êàêòî óìåíüøàëñÿ
	âêëþ÷àòü îáðàáîò÷èê idle òîëüêî åñëè ðÿäîì åñòü èãðîê.
	òàáëèöà òèïà ïîâåäåíèÿ ìîíñòðîâ.
	òðóñîñòü ìîáîâ - ñíà÷àëî íóæíî îòáåãàòü îò àòàêóþùåãî, çàòåì ñòàðàòñÿ ïðèáëèçèòñÿ ê äîìó íà ðàññòîÿíèè îò àòàêóþùåãî.
	{
		àòàêà òåõ êòî àòàêóåò (íóæíî äëÿ áëîêèðîâêè ÷èòà 'áåãóí')
		ïðè óñëîâèè ÷òî çëîñòü(Fury) ìåíüøå X (íóæíî äëÿ áëîêèðîâêè 'pin-pong' ÷èòà)
		è òåêóùèé âðàã íå íà ðàññòîÿíèè ïîðàæåíèÿ
		è íîâûé âðàã íà íå ñëèøêîì áîëüøîé äèñòàíöèè
	}
	îòñòóïëåíèå åñëè èãðîê àòàêóåò èç íåäîñòèæèìîé òî÷êè (÷èò 'áåçîïàñòíîé àòàêè').
	? áëîêèðîâêà âîçâðàùåíèÿ äîìîé åñëè ìû óæå ñòîèì âïðèòûê ê ïðîòèâíèêó è óñïåøíî àòàêóåì åãî.
	? îòñòóïàòü äîìîé òîëüêî åñëè âñÿ ãðóïïà òàê ðåøèëà.

	òåñò:
	DONE çàïðåò àòàêîâàòü âñåõ èç ñâîåé ãðóïïû (ñèòóàöèÿ âîçíèìàåò åñëè îíè áëîêèðóþò ïðîõîä)
	DONE òðóñîñòü ìîáîâ - åñëè òî îí íå äîëæåí èäòè â àòàêó ïðè àòàêå

	ok:
	DONE òðóñîñòü ìîáîâ - îòñòóïëåíèå åñëè ìàëî æèçíåé
	DONE ñêàí ïðè âîçâðàùåíèè äîìîé (Watch)
	DONE ñáðîñ VarX ïðè ðåñïàâíå
	DONE òðóñîñòü ìîáîâ - äîáàâèòü îòñòóïëåíèå ïðè áîëüøèõ ïîòåðÿõ
	DONE áëîêèðîâêà GoHo åñëè îíè óæå äîìà
	DONE îñòàíîâêà ïðåñëåäîâàíèÿ ïðè áîëüøîé äèñòàíöèè - îòëàäèòü (íåñðàáàòûâàåò)
*/

enum Options
{
	DistanceAttack        	= 10, // ðàññòîÿíèå íà÷àëà àòàêè
	DistanceGroupRadius  	= 20, // ðàññòîÿíèå íà êîòîðîì ãðóïïà âèäèò äðóã äðóãà  = è ïîìîãàåò àòàêîâàòü ïðîòèâíèêà,
	DistanceGoHome       	= 30, // ðàññòîÿíèå îò äîìà ïðè êîòîðîì ìîá èäåò äîìîé
	MaxFury               	= 3,  // ñêîëüêî ðàç íóæíî ðàçîçëèòü ÍÏÑ ÷òîáû îí ñòàë èãíîðèòü ãðàíèöû îáèòàíèÿ
	DistanceHelp         	= 15, // ðàññòîÿíèå ïîìîùè
	TimeTestGoHome      	= 10, // ïåðåîäè÷íîñòü òåñòèðîâàíèÿ íà âîçâðàò äîìîé è îòìåíó àòàêè

	// íîìåðà ñîîáùåíèé
	MsgGroupAttack       	= 16001,
	MsgGroupFury         	= 16002
}

void _MobsMapInit( ::Map& map, bool firstTime)
{
	ActivateMobScript(map);
}

class MobDef : Npc::NpcDescriptor
{
	MobDef( )
	{
		MaxFear = 0;
		Fear = 0;
		Fury = 0;
		AttackedId = 0;
		SeeCountPlayers = 0;
		PriorityDescriptor = 100;
		
	}
	
	~MobDef( )
	{
	
	}
	
	bool CritterInit(::Critter& crInit, bool firstTime) override
	{
		::Map@ map = crInit.GetMap();
		if(not validEngineObject(map)) 
		{			
			::DeleteNpc(crInit);
			return false;
		}
		
		Npc::NpcDescriptor::CritterInit( crInit, firstTime );
		
		crInit.ModeBase[MODE_NO_HOME]=1;
		crInit.StatBase[ST_ROLE_CITY]=TEMPLATE_MOB;
		crInit.ModeBase[MODE_NO_ENEMY_STACK]=0;
		
		uint16 locPid=map.GetLocation().GetProtoId();
		if (!LOCATION_IS_CITY(locPid) && locPid !=LOCATION_ReplicationHell && locPid !=LOCATION_ReplicationHellmk2 && locPid !=LOCATION_Sierra)
			crInit.StatBase[ST_REPLICATION_TIME]=-1; // Newer

		this.ResetVars(crInit);
		crInit.Wait(::Random(0,200)); // ×òîáû òèêè íå áûëè ñèíõðîííû
		return true;
	}
	
	bool CritterDead(::Critter@ cr, ::Critter@ killer) override
	{
		cr.ClearEnemyStack(); // ìîá çàáûâàåò ñâîèõ îáèä÷èêîâ
		return Npc::NpcDescriptor::CritterDead( @cr, @killer );
	}
	
	bool CritterShowMe( ::Critter& npc, ::Critter& player ) override // Áóäåì õîäèòü êîãäà
	{
		if( player.IsPlayer() )
			++SeeCountPlayers;

		return Npc::NpcDescriptor::CritterShowMe( npc, player );
	}
	
	bool CritterShow( ::Critter& npc, ::Critter& player ) override
	{
		if ( player.IsPlayer() )
			NpcPlanes::AddAttackPlane(npc, 0, player);

		return Npc::NpcDescriptor::CritterShow( npc, player );
	}
	
	bool CritterHideMe( ::Critter& npc, ::Critter& player) override
	{
		if( player.IsPlayer() && SeeCountPlayers > 0 )
			--SeeCountPlayers;
	
		return Npc::NpcDescriptor::CritterHideMe( npc, player );
	}
	
	bool CritterHide( ::Critter& npc, ::Critter& player) override
	{
		if ( player.IsPlayer() && Fury < Mob::Options::MaxFury)
		{
			npc.EraseEnemyFromStack(player.Id);
			NpcPlanes::EraseAttackPlane(npc, player);
		}
			
		return Npc::NpcDescriptor::CritterHide( npc, player );
	}
	
	bool CritterIdle( ::Critter& npc ) override
	{
		if( npc.IsLife() )
		{
			::Critter@[] critters;
			uint count = npc.GetCritters ( false, FIND_LIFE_AND_KO | FIND_ONLY_PLAYERS, critters );
			if( count != 0 )
			{
				::Critter@ player = critters[ ::Random( 0, count - 1 ) ];
				NpcPlanes::AddAttackPlane(npc, 0, player);
				return false;
			}
			
			if( SeeCountPlayers > 0 )
			{		
				int rnd = ::Random(1,10);
				if(rnd<=4) npc.MoveRandom(); // 20%
				else if(rnd<=6) this.TryGoHome(npc); // 20%
			}
		}
		return Npc::NpcDescriptor::CritterIdle( npc );
	}
	
	void ResetVars( ::Critter& npc)
	{
		AttackedId=0;
		Fury=0;
		Fear=0;
		SeeCountPlayers = 0;
		if(!(npc.Stat[ST_TEAM_ID]==0 || npc.Stat[ST_TEAM_ID]==33))
			MaxFear=GetMyTeamCount(npc) * 80 * 0.01;
		else MaxFear=10;
	}
	
	void TryGoHome( ::Critter& npc)
	{
		if(Fury<Mob::Options::MaxFury && npc.IsLife() )
		{
			uint mapId=0;
			uint16 homeX=0, homeY=0;
			uint8 dir=0;
			npc.GetHomePos(mapId, homeX, homeY, dir);
			if(npc.GetMapId()==mapId && npc.GetMap().GetPathLength(homeX, homeY, npc.HexX, npc.HexY,0) > uint( Mob::Options::DistanceGoHome ) )
			{
				//npc.DropPlanes();
				NpcPlanes::AddWalkPlane(npc, 0, homeX, homeY, dir, false, 0);
			}
		}
	}
	
	uint GetMyTeamCount( ::Critter& npc)
	{
		return GetCrittersByTeam(npc.GetMap(), npc.HexX, npc.HexY, Mob::Options::DistanceGroupRadius, npc.Stat[ST_TEAM_ID]);
	}
	
	uint GetCrittersByTeam( ::Map& map, uint x, uint y, uint radius, int team)
	{
		uint count=0;
		::array<::Critter@> critters;
		for(uint i=0, iMax=map.GetCrittersHex(x, y, radius, FIND_LIFE|FIND_ONLY_NPC, critters); i<iMax; i++)
			if(critters[i].Stat[ST_TEAM_ID]==team) count++;
		return count;
	}
	
	bool Message( ::Critter& npc, Mk2::MessagePacket@ interMessage ) override
	{
		Messager::Messager@ message = cast<Messager::Messager>(@interMessage);
		if(!valid(message))
			return Npc::NpcDescriptor::Message( npc, interMessage );
		if( npc.IsPlayer() || !npc.IsLife()) return Npc::NpcDescriptor::Message( npc, interMessage );
		
		if( npc.Stat[ST_TEAM_ID]==0 || npc.Stat[ST_TEAM_ID]==33) return Npc::NpcDescriptor::Message( npc, interMessage ); // ãðóïïà íå ãðóïèðóåòüñÿ
		::Critter@ fromCrit = message.Sender;
		if( ! valid( fromCrit ) )
			return Npc::NpcDescriptor::Message( npc, interMessage );
		if( npc.Stat[ST_TEAM_ID] != fromCrit.Stat[ST_TEAM_ID] ) return Npc::NpcDescriptor::Message( npc, interMessage ); // êòîòî íå èç íàøåé ãðóïïû

		if( message.Message == Mob::Options::MsgGroupAttack )
		{	
			::Critter@ target=::GetCritter(message.Value);
			if (!validEngineObject(target)) return false;
			if (::GetCrittersDistantion(npc, fromCrit) > uint( Mob::Options::DistanceGroupRadius ) ) return Npc::NpcDescriptor::Message( npc, interMessage );
			NpcPlanes::AddAttackPlane(npc, 0, target);
		}
		else if(message.Message==Mob::Options::MsgGroupFury) Fury++;
		else return Npc::NpcDescriptor::Message( npc, interMessage );
		return true;
	}
	
	bool NpcPlaneBegin( ::Critter& npc, ::NpcPlane& plane, int reason, ::Critter@ someCr, ::Item@ someItem) override
	{
		if(plane.Type==AI_PLANE_ATTACK)
		{
			::Critter@ target=::GetCritter( plane.Attack_TargId );
			if ( not validEngineObject( target ) ) 
				return Npc::NpcDescriptor::NpcPlaneBegin( npc,plane,reason,someCr,someItem );

			if( target.Stat[ST_TEAM_ID] == npc.Stat[ST_TEAM_ID] ) return false; // íå àòàêóåì âñåõ èç ñâîåé êîìàíäû

			if( reason == REASON_FOUND_IN_ENEMY_STACK )
			{
				uint distantion=::GetCrittersDistantion( npc, target );
				if( distantion <= uint( Mob::Options::DistanceAttack ) )
				{
					// åñëè ïðîòèâíèê ïîäîøåë äîñòàòî÷íî áëèçêî, òî ðàçðåøàåì àòàêó
					// àíàëèç íà äàëüíîñòü
					uint pathLength=npc.GetMap().GetPathLength(npc, target.HexX, target.HexY, 1);
					// åñëè ïðîéòè íåëüçÿ, òî íå èäåì
					if( pathLength == 0 && distantion != 1 ) return false;
					// åñëè ñëèøêîì äàëåêî, òî íå èäåì
					if( pathLength > distantion * 3 ) return false;
					// çîâåì äðóçåé
					Messager::CritterSend( npc,Mob::Options::MsgGroupAttack, target.Id, MESSAGE_TO_WHO_SEES_ME);
					return true;
				}
				else
				{
					// èíà÷å çàïðåùàåì àòàêó
					return false;
				}
			}
		}
		return Npc::NpcDescriptor::NpcPlaneBegin( npc,plane,reason,someCr,someItem );
	}
	
	bool CritterRespawn( ::Critter& npc) override
	{
		this.ResetVars(npc);
		return Npc::NpcDescriptor::CritterRespawn( npc );
	}
	
	bool CritterAttacked( ::Critter& npc, ::Critter& attacker) override
	{
		AttackedId=attacker.Id;
		Fury++; // çëèìñÿ
		// äðóçüÿ òîæå çëÿòüñÿ!
		Messager::CritterSend( npc, Mob::Options::MsgGroupFury, attacker.Id, MESSAGE_TO_WHO_SEES_ME);
		// çîâåì äðóçåé
		Messager::CritterSend( npc,Mob::Options::MsgGroupAttack, attacker.Id, MESSAGE_TO_WHO_SEES_ME);

		NpcPlanes::AddAttackPlane(npc, 0, attacker);
		return Npc::NpcDescriptor::CritterAttacked( npc, attacker ); // Handle attacked processing
	}
	
	int MaxFear;
	int Fear;
	int Fury;
	int AttackedId;
	int SeeCountPlayers;
}

class MobItem : MobDef
{
	MobItem()
	{
		PriorityDescriptor = 110;
	}
	
	bool CritterRespawn( ::Critter& npc) override
	{
		::DeleteNpc( npc );
		return false;
	}
}

void mobInit( ::Critter& npc, bool firstTime  )
{	
	if( npc.Stat[ST_ROLE_CITY] == CITY_ANIMAL_ITEM )
	{
		Mob::MobItem expan();
		if( Critter::NewDescriptor( npc, expan ) )
		{
			expan.CritterInit( npc, firstTime );
		}
	}
	else	
	{
		Mob::MobDef expan();
		if( Critter::NewDescriptor( npc, expan ) )
		{
			expan.CritterInit( npc, firstTime );
		}
	}
}

// Âðåìåííî ãåíåðèðóåìûé ìîá, áåç îáðàáîò÷èêà ñìåðòè
void _TempMobInit( ::Critter& npc, bool firstTime)
{
	mobInit(npc, firstTime);
}

void _MobInit( ::Critter& npc, bool firstTime)
{
	mobInit(npc, firstTime );	
}

void ActivateMobScript( ::Map& map) // Export
{	
	::array<::Critter@> critters = {};
	for(uint i=0, iMax=::Pids_BestialMobs.length(); i<iMax; i++)
		map.GetCritters(::Pids_BestialMobs[i], FIND_ALL|FIND_ONLY_NPC, critters);

	for(uint i=0, iMax=critters.length(); i<iMax; i++)
	{
		if(critters[i].GetScriptId()==0 && (critters[i].Stat[ST_TEAM_ID]==0 || (critters[i].Stat[ST_TEAM_ID] >=24 && critters[i].Stat[ST_TEAM_ID]<=33) || critters[i].Stat[ST_TEAM_ID] == TEAM_FarmMobs ))
			critters[i].SetScript( "Mk2@Mob::_MobInit" ); //_MobInit(critters[i],true);
	}
}
