// FOS Server
// Generic encounter npc script
// Author: cvet, rifleman17, Dagnir

enum DefineMessage
{
	CollectNpc = 30,
	AttackHim = 31,
	AttackMe = 32
}

enum DefinePlane
{
	PlaneLoot = 30
}

uint LastDeadId = 0;
::array<uint> CollectedNpcIds = {};

void _NpcInit( ::Critter& npc, bool firstTime )
{
    uint bt = npc.Stat[ ST_BODY_TYPE ];
    if( bt >= BT_MEN && bt <= BT_GHOUL )
    {
        npc.SetEvent( CRITTER_EVENT_MESSAGE, "EncounterNpc::_NpcMessage" );
        npc.SetEvent( CRITTER_EVENT_DEAD, "EncounterNpc::_NpcDead" );
        npc.SetEvent( CRITTER_EVENT_SMTH_DEAD, "EncounterNpc::_NpcSmthDead" );
        npc.SetEvent( CRITTER_EVENT_SMTH_USE_SKILL, "EncounterNpc::_NpcSmthUseSkill" );
        npc.SetEvent( CRITTER_EVENT_PLANE_END, "EncounterNpc::_NpcPlaneEnd" );
        npc.SetEvent( CRITTER_EVENT_STEALING, "EncounterNpc::_NpcStealing" );
        npc.SetEvent( CRITTER_EVENT_SMTH_USE_ITEM, "EncounterNpc::_NpcSmthUseItem" );
        npc.SetEvent( CRITTER_EVENT_SMTH_DROP_ITEM, "EncounterNpc::_NpcSmthDropItem" );
        if( npc.Stat[ ST_TEAM_ID ] == TEAM_EncounterEnclave )
            npc.SetEvent( CRITTER_EVENT_SHOW_CRITTER, "EncounterNpc::ancl_NpcShowCr" );

        ::array<::Item@> items;
        bool favrtAmmoSet = false,
             favrtWpnSet = false;
		Item@ item = null;
        for( uint i = 0, iMax =  npc.GetItems( -1, items ); i < iMax; i++ )
        {
			@item = items[i];
			if( item.IsDeteriorable() )
			{
				Repair::SetDeterioration( item, ::Random( 50, 75 ) );
				int maxRepairCount = ( item.Proto.MaxRepairCount > 0 ) ? ( ( item.Proto.MaxRepairCount + 10 ) * 10 ) : DEFAULT_MAX_REPAIR_COUNT;
				if( maxRepairCount > 100 )
					item.RadioChannel = maxRepairCount - 95 + ::Random( 0, 10 );
			}
#ifndef __NO_FAVORIT_ITEMS
            if( item.GetType() == ITEM_TYPE_WEAPON && npc.IsAnim1( item.Proto.Weapon_Anim1 ) && !favrtWpnSet )
            {
                npc.SetFavoriteItem( SLOT_HAND1, item.GetProtoId() );
                favrtWpnSet = true;
            }
#endif
        }
    }
    else if( bt == BT_ROBOT )
    {
        npc.SetEvent( CRITTER_EVENT_SHOW_CRITTER, "EncounterNpc::robo_NpcShowCr" );
    }
}

void robo_NpcShowCr( ::Critter& cr, ::Critter& showCr )
{
    if( showCr.IsPlayer() )
        NpcPlanes::AddAttackPlane( cr, 0, showCr, false );
}

void ancl_NpcShowCr( ::Critter& cr, ::Critter& showCr )
{
    if( showCr.IsPlayer() )
        NpcPlanes::AddAttackPlane( cr, 0, showCr, false );
}


::Critter@ GetCritterForLooting( ::Critter& lootCr )
{
    // Collect npc
    ::Critter@ result = null;
    lootCr.SendMessage( EncounterNpc::DefineMessage::CollectNpc, 0, MESSAGE_TO_WHO_SEES_ME );
    if( CollectedNpcIds.length() > 0 )
    {
        // Find better looter
        for( uint i = 0, iMax = CollectedNpcIds.length(); i < iMax; i++ )
        {
            ::Critter@ cr = ::GetCritter( CollectedNpcIds[ i ] );
            if( cr.GetPlanes( EncounterNpc::DefinePlane::PlaneLoot, null ) == 0 )
            {
                @result = cr;
                break;
            }
        }

        // Get random npc
        if( !validEngineObject( result ) )
            @result = ::GetCritter( CollectedNpcIds[ ::Random( 0, CollectedNpcIds.length() - 1 ) ] );

        // Free handles
        CollectedNpcIds.resize( 0 );
    }
    return result;
}

void _NpcSmthUseItem( ::Critter& npc, ::Critter& fromCr, ::Item& item, ::Critter@ onCritter, ::Item@ onItem, ::Scenery@ onScenery )
{
    if( fromCr.IsPlayer() && npc.IsLife() )
    {
        uint pid = item.GetProtoId();
        if( pid == uint( Content::Item::PLASTIC_EXPLOSIVES ) || pid == uint( Content::Item::MINE ) || pid == uint( Content::Item::TOGGLE_SWITCH ) || pid == uint( Content::Item::DYNAMITE ) )
        {
            NpcPlanes::AddAttackPlane( npc, 0, fromCr, false );
            npc.SendMessage( EncounterNpc::DefineMessage::AttackHim, fromCr.Id, MESSAGE_TO_ALL_ON_MAP );
        }
    }
}

void _NpcSmthDropItem( ::Critter& npc, ::Critter& fromCr, ::Item& item )
{
    if( fromCr.IsPlayer() && npc.IsLife() )
    {
        uint pid = item.GetProtoId();
        if( pid == uint( Content::Item::ACTIVE_PLASTIC_EXPLOSIVE ) || pid == uint( Content::Item::ACTIVE_MINE ) || pid == uint( Content::Item::ACTIVE_DYNAMITE ) )
        {
            NpcPlanes::AddAttackPlane( npc, 0, fromCr, false );
            npc.SendMessage( EncounterNpc::DefineMessage::AttackHim, fromCr.Id, MESSAGE_TO_ALL_ON_MAP );
        }
    }
}

void _NpcMessage( ::Critter& npc, ::Critter& fromCr, int message, int value )
{
    if( message == EncounterNpc::DefineMessage::CollectNpc )
    {
        if( !npc.IsDead() && CollectedNpcIds.find( npc.Id ) == -1 )
		{
            CollectedNpcIds.insertLast( npc.Id );
		}
    }
    else if( message == EncounterNpc::DefineMessage::AttackHim )
    {
        if( fromCr.Stat[ ST_TEAM_ID ] == npc.Stat[ ST_TEAM_ID ] && npc.IsLife() )
        {
            ::Critter@ target = ::GetCritter( value );
            if( validEngineObject( target ) )
                NpcPlanes::AddAttackPlane( npc, 0, target, false );
        }
    }
    else if( message == EncounterNpc::DefineMessage::AttackMe )
    {
        ::Critter@ target = ::GetCritter( value );
        if( validEngineObject( target ) )
            NpcPlanes::AddAttackPlane( npc, 0, target, false );
    }
}

void _NpcDead( ::Critter& npc, ::Critter@ killer )
{
    // Loot
    ::array<::NpcPlane@> planes;
    if( npc.GetPlanes( EncounterNpc::DefinePlane::PlaneLoot, planes ) > 0 )
    {
        ::Critter@ cr = GetCritterForLooting( npc );
        if( validEngineObject( cr ) )
        {
            // Copy planes
            for( uint i = 0, iMax = planes.length(); i < iMax; i++ )
                cr.AddPlane( planes[ i ] );
        }
    }

    // Encounters loyality
    if( validEngineObject( killer ) && killer.IsPlayer() )
    {
        uint varId = 0;
        switch( npc.Stat[ ST_TEAM_ID ] )
        {
        case TEAM_EncounterHubologist:
            varId = LVAR_enc_loyality_hubologists;
            break;
        case TEAM_EncounterNCR:
            varId = LVAR_enc_loyality_ncr;
            break;
        case TEAM_EncounterVC:
            varId = LVAR_enc_loyality_vcity;
            break;
        case TEAM_EncounterRedding:
            varId = LVAR_enc_loyality_redding;
            break;
        case TEAM_EncounterBroken:
            varId = LVAR_enc_loyality_broken;
            break;
        case TEAM_EncounterGecko:
            varId = LVAR_enc_loyality_gecko;
            break;
        case TEAM_EncounterArroyo:
            varId = LVAR_enc_loyality_arroyo;
            break;
        case TEAM_EncounterKlamath:
            varId = LVAR_enc_loyality_klamath;
            break;
        case TEAM_EncounterModoc:
            varId = LVAR_enc_loyality_modoc;
            break;
        case TEAM_EncounterDen:
            varId = LVAR_enc_loyality_den;
            break;
        case TEAM_EncounterReno:
            varId = LVAR_enc_loyality_reno;
            break;
        case TEAM_EncounterEnclave:
            varId = LVAR_enc_loyality_enclave;
            break;
        case TEAM_EncounterSF:
            varId = LVAR_enc_loyality_sf;
            break;
        default:
            break;
        }
        if( varId != 0 )
        {
            ::GameVar@ var = ::GetLocalVar( varId, killer.Id );
            var += 1;
        }
    }
}

void _NpcSmthDead( ::Critter& npc, ::Critter& fromCrit, ::Critter@ killer )
{
    if( fromCrit.Id != LastDeadId )
    {
        if( fromCrit.ItemsCount() > 0 && _CritCanDropItemsOnDead( fromCrit ) )
        {
            ::Critter@ cr = GetCritterForLooting( fromCrit );
            if( validEngineObject( cr ) )
                NpcPlanes::AddWalkPlane( cr, 0, EncounterNpc::DefinePlane::PlaneLoot, fromCrit.Id, fromCrit.HexX, fromCrit.HexY, 6, false, 1 );
        }
        LastDeadId = fromCrit.Id;
    }
}

void _NpcSmthUseSkill( ::Critter& npc, ::Critter& fromCr, int skill, ::Critter@ onCritter, ::Item@ onItem, ::Scenery@ onScenery )
{
    if( ( skill == SKILL_LOOT_CRITTER || skill == SK_STEAL ) && validEngineObject( onCritter ) && npc.GetPlanes( EncounterNpc::DefinePlane::PlaneLoot, onCritter.Id, null ) > 0 )
        NpcPlanes::AddAttackPlane( npc, AI_PLANE_ATTACK_PRIORITY + 1, fromCr, false );

}

int _NpcPlaneEnd( ::Critter& npc, ::NpcPlane& plane, int reason, ::Critter@ someCr, ::Item@ someItem )
{
    if( plane.Identifier == EncounterNpc::DefinePlane::PlaneLoot && reason == REASON_SUCCESS && ::Random( 1, 100 ) > 30 )
    {
        ::Critter@ cr = ::GetCritter( plane.IdentifierExt );
        if( validEngineObject( cr ) && cr.IsDead() )
        {
            ::array<::Item@> items;
            cr.GetItems( SLOT_INV, items );
            cr.GetItems( SLOT_HAND1, items );
            cr.GetItems( SLOT_HAND2, items );
            npc.GetMap().GetItems( cr.HexX, cr.HexY, items );

            for( uint i = 0, iMax = items.length(); i < iMax; i++ )
            {
                int type = items[ i ].GetType();
                if( type < ITEM_TYPE_ARMOR || type > ITEM_TYPE_KEY )
                    @items[ i ] = null;                                                          // Skip
            }

            ::MoveItems( items, npc );
            SaveLoot2Storehouse( npc.WorldX, npc.WorldY, items );
            _CritAnimatePickup( npc );
            npc.Wait( ::__Breaktime );
        }
        return PLANE_DISCARD;    // Skip global and end plane
    }
    return PLANE_RUN_GLOBAL;     // Run global
}

void _NpcStealing( ::Critter& npc, ::Critter& thief, bool success, ::Item& item, uint count )
{
    if( !success )
    {
        NpcPlanes::AddAttackPlane( npc, 0, thief, false );
        npc.SendMessage( EncounterNpc::DefineMessage::AttackHim, thief.Id, MESSAGE_TO_ALL_ON_MAP );
    }
}
