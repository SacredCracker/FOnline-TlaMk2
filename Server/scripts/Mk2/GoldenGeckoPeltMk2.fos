// FOS Common 

class GoldenGeckoPeltMk2 : Item::ItemDescriptor
{
	GoldenGeckoPeltMk2( ::ItemMutual@ item, uint16 pid )
	{
		super( item, pid );
		if( item !is null )
		{
			const ProtoItem@ proto = GetProtoItem( pid );
			TypeDamage = proto.Upgrade_TriggerValue0;
			DamageBorder = proto.Upgrade_TriggerValue1;
		}
	}
	
	Mk2::Descriptor@ Copy( ::ItemMutual@ item ) override
	{
		GoldenGeckoPeltMk2@ new_copy = ThisModule::GoldenGeckoPeltMk2( @item, Pid );
		return @new_copy;
	}

	::string@ get_Name( ) override
	{
		return "GoldenGeckoPeltMk2_" + StringId();
	}
	
#ifdef __SERVER
	bool GetData( UpgradeItem::Data& data, int trigger ) override
	{	
		if( trigger == UpgradeItem::Triggered::CritterDamage )
		{
			UpgradeItem::CritterDamageData@ damageData = cast< UpgradeItem::CritterDamageData@ >( @data );
			if( @damageData !is null )
			{
				if(damageData.CombatData.Damage[ TypeDamage ] > DamageBorder )
				{
					int val = damageData.CombatData.ArmorTarget.Deterioration * 100 / MAX_DETERIORATION;
					val = CLAMP( val, 0, 100 );
					
					if(val%101<100)
					{
						damageData.CombatData.Damage[ TypeDamage ] = DamageBorder;
						Repair::DeteriorateItem(damageData.Critter,damageData.CombatData.ArmorTarget,CLAMP(damageData.TotalDamage,0,damageData.TotalDamage));
						return true;
					}
				}
			}
			else Log( "Error upgrade data" );
		}
		return Item::ItemDescriptor::GetData( data, trigger );
	}
#endif

	uint TypeDamage;
	int DamageBorder;
}

void ModuleInit()
{
	Item::Defaults.set( "" + Content::Item::GOLDEN_GECKO_PELT_MK2, @ThisModule::GoldenGeckoPeltMk2( null, Content::Item::GOLDEN_GECKO_PELT_MK2 ) );
}

//GoldenGeckoPeltMk2
//GOLDEN_GECKO_PELT_MK2
