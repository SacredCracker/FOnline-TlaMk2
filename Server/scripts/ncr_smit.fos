// Author: rifleman17
#include "_macros.fos"

// положение —мита
#define S_POS_BAZAAR_HOME       ( 0 )               // в исходной точке на Ѕазаре
#define S_POS_BAZAAR_M2GATES    ( 1 )               // в движении от Ѕазара до ворот во внутренний город
#define S_POS_BAZAAR_GATES      ( 2 )               // стоит у ворот в город
#define S_POS_BAZAAR_M2HOME     ( 3 )               // в движении к домашней позиции на Ѕазаре

#define S_POS_DWNTN_HOME        ( 4 )               // в баре ƒасти
#define S_POS_DWNTN_M2POLICE    ( 5 )               // в движении к полицейскому около ранчо вейстина
#define S_POS_DWNTN_POLICE      ( 6 )               // стоит перед полицейским около ранчо вейстина

#define S_POS_RANCH_M2WESTIN    ( 7 )               // идет по ранчо к ¬ейстину
#define S_POS_RANCH_WESTIN      ( 8 )               // стоит перед ¬ейстином
#define S_POS_RANCH_M2DWNTN     ( 9 )               // двигаетс€ к сетке выхода дл€ перехода в центр города

#define S_POS_DWNTN_M2RADIO     ( 10 )              // двигаетс€ к месту выхода на св€зь
#define S_POS_DWNTN_RADIO       ( 11 )              // выходит на св€зь с Ѕишопом
#define S_POS_DWTN_M2HOME       ( 12 )              // ывозвращаетс€ обратно на домашнюю позицию

#define HEX_NUM_BAZAAR_HOME     ( 44 )
#define HEX_NUM_BAZAAR_GATES    ( 45 )
#define HEX_NUM_DWNTN_HOME      ( 46 )
#define HEX_NUM_DWNTN_POLICE    ( 47 )
#define HEX_NUM_DWNTN_RADIO     ( 48 )
#define HEX_NUM_DWNTN2RANCH     ( 49 )
#define HEX_NUM_RANCH_WESTIN    ( 17 )
#define HEX_NUM_RANCH_EXIT      ( 18 )



// таблица положений —мита
/*
   PosNum		=пор€дковый номер положени€
   GVarValue    =значение переменной GVAR_ncr_smit_position
   MapPid               =карта на которой стоит —ћ»“
   RHexNum      =номер ближайшего EntireHex
   ResetPosNum	=следующее состо€ние, если нужен сброс
   Moving		=признак, перемещаетс€ по карте, находитс€ в движении
   IsHomePos    =признак, €вл€етс€ домашней позицией
   MoveTo=номер гекса, к которому идет вейстин
 */
const int[] SmitData_ =
{
/*PosNum     GVarVaule                     MapPid                    EHexNum                    ResetPosNum   IsHomePos       Moving        MoveTo*/
/* 0 */ S_POS_BAZAAR_HOME,            MAP_ncr_bazaar,           HEX_NUM_BAZAAR_HOME,       0,            1,              0,            0,
/* 1 */ S_POS_BAZAAR_M2GATES,         MAP_ncr_bazaar,           0,                         0,            0,              1,            HEX_NUM_BAZAAR_GATES,
/* 2 */ S_POS_BAZAAR_GATES,           MAP_ncr_bazaar,           HEX_NUM_BAZAAR_GATES,      0,            0,              0,            0,
/* 3 */ S_POS_BAZAAR_M2HOME,          MAP_ncr_bazaar,           0,                         0,            0,              1,            HEX_NUM_BAZAAR_HOME,
/* 4 */ S_POS_DWNTN_HOME,             MAP_ncr_downtown,         HEX_NUM_DWNTN_HOME,        4,            1,              0,            0,
/* 5 */ S_POS_DWNTN_M2POLICE,         MAP_ncr_downtown,         0,                         4,            0,              1,            HEX_NUM_DWNTN_POLICE,
/* 6 */ S_POS_DWNTN_POLICE,           MAP_ncr_downtown,         HEX_NUM_DWNTN_POLICE,      4,            0,              0,            0,
/* 7 */ S_POS_RANCH_M2WESTIN,         MAP_ncr_ranch,            HEX_NUM_RANCH_EXIT,        4,            0,              1,            HEX_NUM_RANCH_WESTIN,
/* 8 */ S_POS_RANCH_WESTIN,           MAP_ncr_ranch,            HEX_NUM_RANCH_WESTIN,      4,            0,              0,            0,
/* 9 */ S_POS_RANCH_M2DWNTN,          MAP_ncr_ranch,            0,                         4,            0,              1,            HEX_NUM_RANCH_EXIT,
/* 10*/ S_POS_DWNTN_M2RADIO,          MAP_ncr_downtown,         0,                         4,            0,              1,            HEX_NUM_DWNTN_RADIO,
/* 11*/ S_POS_DWNTN_RADIO,            MAP_ncr_downtown,         HEX_NUM_DWNTN_RADIO,       4,            0,              0,            0,
/* 12*/ S_POS_DWTN_M2HOME,            MAP_ncr_downtown,         0,                         4,            0,              1,            HEX_NUM_DWNTN_HOME
};

#define SPOS_COUNT              ( 13 )

// SmitPosition data offsets
#define S_POS_GVAR              # (posNum)            ( SmitData_[ ( ( ( posNum ) < SPOS_COUNT ? ( posNum ) : 0 ) * 7 + 0 ) ] )
#define S_POS_MAP_PID           # (posNum)         uint16( SmitData_[ ( ( ( posNum ) < SPOS_COUNT ? ( posNum ) : 0 ) * 7 + 1 ) ] )
#define S_POS_HEX               # (posNum)                     ( SmitData_[ ( ( ( posNum ) < SPOS_COUNT ? ( posNum ) : 0 ) * 7 + 2 ) ] )
#define S_POS_RES_POS           # (posNum)         ( SmitData_[ ( ( ( posNum ) < SPOS_COUNT ? ( posNum ) : 0 ) * 7 + 3 ) ] )
#define S_POS_IS_HOME           # (posNum)         ( SmitData_[ ( ( ( posNum ) < SPOS_COUNT ? ( posNum ) : 0 ) * 7 + 4 ) ] == 1 )
#define S_POS_MOVING            # (posNum)          ( SmitData_[ ( ( ( posNum ) < SPOS_COUNT ? ( posNum ) : 0 ) * 7 + 5 ) ] == 1 )
#define S_POS_HEX_MOVETO        # (posNum)      ( SmitData_[ ( ( ( posNum ) < SPOS_COUNT ? ( posNum ) : 0 ) * 7 + 6 ) ] )

#define NPC_ROLE_SMIT           ( 54 )
#define MAX_HOME_DISTANCE       ( 3 )               // максимальна€ дистанци€ до домашней позиции, после которой уже нужно телепортировать домой смита

import bool GetNearEntire( Map& map, int number, uint16& hx, uint16& hy ) from "entire";
import bool AddWalkPlane( Critter& npc, uint priority, int identifier, uint identifierExt, uint16 hexX, uint16 hexY, uint8 dir, bool run, uint cut ) from "npc_planes";
import bool AddMiscPlane( Critter& npc, uint priority, uint waitSecond, string@ funcName ) from "npc_planes";
import uint GetNearFullSecond( uint16 year, uint16 month, uint16 day, uint16 hour, uint16 minute, uint16 second ) from "time";
import bool BeginSpyControl( Critter& catcher, uint catchRadius, uint minSneak, uint checkTime, uint varStatNum, uint varQuest, uint strAlarm ) from "q_spy_mission";
import bool AddAttackPlane( Critter& npc, uint priority, Critter& target ) from "npc_planes";
/* ************************** ќсновной скрипт —мита ****************************************** */

void _SmitInit( Critter& smit, bool firstTime )
{
    smit.StatBase[ ST_NPC_ROLE ] = NPC_ROLE_SMIT;

    smit.SetEvent( CRITTER_EVENT_RESPAWN, "_SmitRespawn" );
    smit.SetEvent( CRITTER_EVENT_DEAD, "_SmitDead" );
    smit.SetEvent( CRITTER_EVENT_PLANE_END, "_SmitPlaneEnd" );
    smit.SetEvent( CRITTER_EVENT_IDLE, "_SmitIdle" );
    if( firstTime )
    {
        SetupRadioComm( smit );
    }
    // на вс€кий случай провер€ем, что на своем месте смит
    SetSmitPos( S_POS_RES_POS( GetSmitPos() ) );
    _SmitRespawn( smit );
}

/* ************************** ”правление позицией —мита на картах **************************** */

// текущее сохраненное значение
uint8 GetSmitPos()
{
    GameVar @ v = GetGlobalVar( GVAR_ncr_smit_position );
    if( valid( v ) )
    {
        return v.GetValue();
    }
    else
    {
        Log( "GVAR_ncr_smit_position: var invalid" );
        return 0;
    }
}
void SetSmitPos( int val )
{
    GameVar @ v = GetGlobalVar( GVAR_ncr_smit_position );
    if( !valid( v ) )
        return;
    v = val;

}


// проверка, нету других смитов на указанной позиции
Critter @ GetFakeSmit( uint pos, Critter & realSmit )
{
    Map @posmap = GetMapByPid( S_POS_MAP_PID( pos ), 0 );
    if( !valid( posmap ) )
    {
        Log( "Map position є " + pos + " not found " );
        return null;
    }

    Critter @ fakeSmit = posmap.GetNpc( NPC_ROLE_SMIT, FIND_ALL | FIND_ONLY_NPC, 0 );
    if( valid( fakeSmit ) )
    {
        if( fakeSmit.StatBase[ ST_DIALOG_ID ] == realSmit.StatBase[ ST_DIALOG_ID ] && fakeSmit.Id != realSmit.Id ) // диалог тот же, а Id отличаетс€, значит - другой смит
        {
            DL( "real id" + realSmit.Id + "fakeId=" + fakeSmit.Id );
            return fakeSmit;
        }
        else
        {
            return null;
        }
    }
    else
    {
        return null;
    }
}


// провер€ем, что смит на нужной карте, р€дом с нужным гексом
bool IsSmitRightPosition( Critter& smit, uint pos )
{
    Map @map = smit.GetMap();
    if( !valid( map ) )
        return false;

    if( map.GetProtoId() != S_POS_MAP_PID( pos ) )
        return false;

    uint16 hx = smit.HexX;
    uint16 hy = smit.HexY;

    GetNearEntire( map, S_POS_HEX( pos ), hx, hy );

    return GetDistantion( hx, hy, smit.HexX, smit.HexY ) <= MAX_HOME_DISTANCE;
}
// при респавне смита нужно его телепортировать домой, если он очутилс€ не в том месте
void _SmitRespawn( Critter& smit )
{
    uint pos = GetSmitPos();

    Critter @ cr = GetFakeSmit( pos, smit );
    if( valid( cr ) )
    {
        DL( "Fake smit deleted id=" + cr.Id );
        DeleteNpc( cr );
    }

    if( IsSmitRightPosition( smit, pos ) )
        return;

    TransitToPos( smit, pos );
}

void _SmitDead( Critter& smit, Critter@ killer )
{

    // умер, значит что-то пошло не так, делаем резет позиции
    SetSmitPos( S_POS_RES_POS( GetSmitPos() ) );
}

void TransitToPos( Critter& smit, uint pos )
{
    Map @map = GetMapByPid( S_POS_MAP_PID( pos ), 0 );
    if( !valid( map ) )
    {
        Log( "Map position є " + pos + " not found " );
        return;
    }
    uint16 hx = smit.HexX;
    uint16 hy = smit.HexY;

    if( GetNearEntire( map, S_POS_HEX( pos ), hx, hy ) )
    {
        if( !smit.TransitToMap( map.Id, hx, hy, 6 ) )
            Log( "Smit transit error. Position " + pos );
    }
    else
    {
        Log( "Smit transit failed. Can't find entire. Position " + pos );
    }

    SetSmitPos( pos );
    DL( "Transit to map successful" );
}

void WalkToPos( Critter& smit, uint pos )
{

    uint16 hx = smit.HexX;
    uint16 hy = smit.HexY;

    Map    @map = GetMapByPid( S_POS_MAP_PID( pos ), 0 );

    if( !valid( map ) )
        return;

    if( map.Id != smit.GetMap().Id )
        return;

    if( !GetNearEntire( map, S_POS_HEX_MOVETO( pos ) == 0 ? S_POS_HEX( pos ) : S_POS_HEX_MOVETO( pos ), hx, hy ) )
        return;


    if( !AddWalkPlane( smit, 0, pos, pos, hx, hy, Random( 0, 5 ), false, 0 ) )
        return;


    SetSmitPos( pos );
}


void _SmitIdle( Critter& smit )
{
    DL( "EnterIdle" + S_POS_RES_POS( GetSmitPos() ) );
    if( !S_POS_IS_HOME( GetSmitPos() ) || !IsSmitRightPosition( smit, GetSmitPos() ) )
    {
        // DL("WRONG Pos and no planes... ");
        uint idleCount = smit.StatBase[ ST_VAR9 ];
        if( idleCount > 10 )
        {
            if( S_POS_MAP_PID( S_POS_RES_POS( GetSmitPos() ) ) != smit.GetMap().GetProtoId() )
            {
                TransitToPos( smit, S_POS_RES_POS( GetSmitPos() ) );
            }
            else
            {
                WalkToPos( smit, S_POS_RES_POS( GetSmitPos() ) );
            }
            smit.StatBase[ ST_VAR9 ] = 0;
        }
        else
        {
            smit.StatBase[ ST_VAR9 ]++;
        }
    }
}


/* ********************** «авершение выполнени€ —митом некоего плана ************************* */
// CRITTER_EVENT_PLANE_END
int _SmitPlaneEnd( Critter& smit, NpcPlane& plane, int reason, Critter@ someCr, Item@ someItem )
{
    // smit.Say(SAY_NORM_ON_HEAD,"reason="+reason);
    if( reason == REASON_SUCCESS && plane.Identifier == S_POS_BAZAAR_M2GATES && plane.IdentifierExt == S_POS_BAZAAR_M2GATES )
    {
        OnGatesPlaneEnd( smit );
    }
    else if( reason == REASON_SUCCESS && plane.Identifier == S_POS_DWNTN_M2RADIO && plane.IdentifierExt == S_POS_DWNTN_M2RADIO )
    {
        OnMove2RadioPlaneEnd( smit );
    }
    else if( reason == REASON_SUCCESS && plane.Identifier == S_POS_DWNTN_M2POLICE && plane.IdentifierExt == S_POS_DWNTN_M2POLICE )
    {
        OnMove2PolicePlaneEnd( smit );
    }
    else if( reason == REASON_SUCCESS && plane.Identifier == HEX_NUM_DWNTN2RANCH && plane.IdentifierExt == HEX_NUM_DWNTN2RANCH )
    {
        OnExitDwnTnPlaneEnd( smit );
    }
    else if( reason == REASON_SUCCESS && plane.Identifier == S_POS_RANCH_WESTIN && plane.IdentifierExt == S_POS_RANCH_WESTIN )
    {
        OnWestinMovePlaneEnd( smit );
    }
    else if( reason == REASON_SUCCESS && plane.Identifier == S_POS_DWTN_M2HOME && plane.IdentifierExt == S_POS_DWTN_M2HOME )
    {
        SetSmitPos( S_POS_DWNTN_HOME );
    }
    else if( reason == REASON_HEX_BUSY && plane.IdentifierExt != 0 && plane.Type == AI_PLANE_WALK )
    {
        DL( "HEX BUSY..." );
        uint16 newX = plane.Walk_HexY;
        uint16 newY = plane.Walk_HexY;
        Map @ map = smit.GetMap();
        if( valid( map ) )
        {
            map.MoveHexByDir( newX, newY, Random( 0, 5 ), 1 );

            if( map.IsHexPassed( newX, newY ) )
            {
                plane.Walk_HexY = newX;
                plane.Walk_HexY = newY;

            }
        }

    }
    return PLANE_RUN_GLOBAL;
}
/* ********************** ƒиалог —мита и охранника на воротах города ************************* */
#define STR_FIRST_GATESGUARD      ( 3400 )                     // перва€ строка обмена репликами между смитом и охранником
#define STR_LAST_GATESGUARD       ( 3407 )                     // последн€€ строка обмена репликами
#define STR_NO_GUARDS             ( 3408 )                     // строка, если нет охранника на воротах
#define NPC_ROLE_GATESGUARD       ( 317 )                      // роль охранника на воротах
#define NPC_ROLE_GATESMAIN        ( 318 )                      // роль охранника на воротах

void OnGatesPlaneEnd( Critter& smit )
{
    SetSmitPos( S_POS_BAZAAR_GATES );
    uint8 pos = GetSmitPos();

    DL( "«акончен план перемещени€ к воротам" );

    if( !valid( GetGatesGuard( smit ) ) )
    {
        smit.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_TEXT, STR_NO_GUARDS );
        TransitToPos( smit, S_POS_DWNTN_HOME );

    }
    else
    {
        smit.StatBase[ ST_VAR4 ] = STR_FIRST_GATESGUARD;
        AddMiscPlane( smit, 0, __FullSecond + 2 * 60, "ncr_smit@plane_SayNextPhrase" );

    }



}
void plane_SayNextPhrase( Critter& smit )
{
    if( smit.StatBase[ ST_VAR4 ] > STR_LAST_GATESGUARD )
    {
        GameVar @ status = GetGlobalVar( GVAR_ncr_smit_gate_guard_access_granted );
        if( !valid( status ) )
            return;
        DL( "value" + status.GetValue() );
        if( status.GetValue() != 1 )
        {
            SetSmitPos( S_POS_BAZAAR_HOME );
            return;
        }

        smit.StatBase[ ST_VAR4 ] = 0;
        TransitToPos( smit, S_POS_DWNTN_HOME );

    }
    else
    {
        if( smit.StatBase[ ST_VAR4 ] % 2 == 1 )
        {
            smit.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_TEXT, smit.StatBase[ ST_VAR4 ] );
        }
        else
        {
            // говорит охранник
            Critter @guard = GetGatesGuard( smit );
            if( !valid( guard ) || guard.IsDead() )
            {
                // исчез, убит?
                smit.StatBase[ ST_VAR4 ] = 0;
                return;
            }
            guard.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_TEXT, smit.StatBase[ ST_VAR4 ] );
        }
        smit.StatBase[ ST_VAR4 ]++;
        AddMiscPlane( smit, 0, __FullSecond + 3 * 60, "ncr_smit@plane_SayNextPhrase" );
    }

}

Critter @ GetGatesGuard( Critter & smit )
{
    Map @map = smit.GetMap();
    if( !valid( map ) )
        return null;

    if( map.GetProtoId() != S_POS_MAP_PID( S_POS_BAZAAR_GATES ) )
        return null;

    if( map.GetNpcCount( NPC_ROLE_GATESGUARD, FIND_LIFE | FIND_ONLY_NPC ) > 0 )
        return map.GetNpc( NPC_ROLE_GATESGUARD, FIND_LIFE | FIND_ONLY_NPC, 0 );


    if( map.GetNpcCount( NPC_ROLE_GATESMAIN, FIND_LIFE | FIND_ONLY_NPC ) > 0 )
        return map.GetNpc( NPC_ROLE_GATESMAIN, FIND_LIFE | FIND_ONLY_NPC, 0 );

    return null;

}

/* ********************** —мит выходит на св€зь с Ѕишопом по рации *************************** */
#define STR_FIRST_SMIT_RADIO      ( 3420 )                  // перва€ строка радиопереговоров
#define STR_LAST_SMIT_RADIO       ( 3451 )                  // последн€€ строка радиопереговоров
#define STR_PLAYER_SEEN_ALARM     ( 1 )                     // строка в диалоге смита, которую он произносит, если заметит, что за ним след€т во врем€ переговоров
#define RADIO_CHANNEL_SMIT        ( 17 )                    // номер канала, по которому смит выходит на св€зь

void SetupRadioComm( Critter& smit )
{
    CreateTimeEvent( GetNearFullSecond( 0, 0, 0, 1, 0, 0 ), "e_BeginRadioComm", smit.Id, true );
}

uint e_BeginRadioComm( uint[] @ values )
{
    Critter@ smit = GetCritter( values[ 0 ] );

    if( valid( smit ) )
    {
        _BeginRadioCom( smit );
        // следующее событие
        SetupRadioComm( smit );
    }

    return 0;
}
void plane_SayNextRadio( Critter& smit )
{
    if( smit.StatBase[ ST_VAR2 ] % 3 == 0 )
    {
        smit.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_TEXT, smit.StatBase[ ST_VAR2 ] );
        smit.StatBase[ ST_VAR2 ]++;
        RadioMessageMsg( RADIO_CHANNEL_SMIT, TEXTMSG_TEXT, smit.StatBase[ ST_VAR2 ] );
        smit.StatBase[ ST_VAR2 ]++;

    }
    else
    {
        RadioMessageMsg( RADIO_CHANNEL_SMIT, TEXTMSG_TEXT, smit.StatBase[ ST_VAR2 ] );
        smit.StatBase[ ST_VAR2 ]++;
    }
    if( smit.StatBase[ ST_VAR2 ] > STR_LAST_SMIT_RADIO )
    {
        smit.StatBase[ ST_VAR2 ] = 0;
        GameVar @ status = GetLocalVar( LVAR_spy_cath_active, smit.Id );
        if( valid( status ) )
        {
            status = 0;
        }
        SetSmitPos( S_POS_DWNTN_HOME );
        uint   m = 0;
        uint16 x = 0, y = 0;
        uint8  d = 0;
        smit.GetHomePos( m, x, y, d );
        DL( "Smit home pos: x=" + x + " y=" + y + "mapHome=" + m + "mapcur" + smit.GetMap().Id + "CurX=" + smit.HexX + " CurY=" + smit.HexY );
    }
    else
    {
        AddMiscPlane( smit, 0, __FullSecond + 2 * 60, "ncr_smit@plane_SayNextRadio" );
    }
}


void _BeginRadioCom( Critter& smit )
{
    if( !smit.IsLife() )
        return;

    if( GetSmitPos() != S_POS_DWNTN_HOME )
        return;

    WalkToPos( smit, S_POS_DWNTN_M2RADIO );
}

void OnMove2RadioPlaneEnd( Critter& smit )
{
    SetSmitPos( S_POS_DWNTN_RADIO );
    GameVar @ status = GetLocalVar( LVAR_spy_cath_active, smit.Id );
    if( valid( status ) )
    {
        status = 1;
    }
    if( !BeginSpyControl( smit, 12, 30, 2, LVAR_spy_cath_active, LVAR_q_ncr_santiaga_find_spy_status, STR_PLAYER_SEEN_ALARM ) )
    {
        DL( "Cannot begin spy control" );
    }
    DL( "begin radio event" );
    smit.StatBase[ ST_VAR2 ] = STR_FIRST_SMIT_RADIO;
    AddMiscPlane( smit, 0, __FullSecond + 2 * 60, "ncr_smit@plane_SayNextRadio" );

}
/* ******************* ѕеремещение —мита к полицейскому перед входом на –анчо **************** */
#define WAIT_FORPLAYER_MINUTES    ( 60 )                     // число реальных игровых минут, которое —мит будет ждать игрока перед входом на –анчо.
#define STR_NO_GUARD_AT_RANCH     ( 3455 )                   // строка, которую говорит вейстин, если на воротах ранчо нет охранника
#define STR_FIRST_GRANT           ( 3456 )                   // перва€ строка в диалоге смит/грант
#define STR_LAST_GRANT            ( 3459 )                   // последн€€
void OnMove2PolicePlaneEnd( Critter& smit )
{
    SetSmitPos( S_POS_DWNTN_POLICE );
    // AddMiscPlane(smit, 0, __FullSecond+WAIT_FORPLAYER_MINUTES*60, "ncr_smit@plane_ComeBackNoPlayer");
    // он сам через 10 идлов вернетс€ на домашнюю позицию

}

void plane_ComeBackNoPlayer( Critter& smit )
{
    // игрок не успел поговорить в отведенное врем€, —мит возвращаетс€ обратно
    WalkToPos( smit, S_POS_DWTN_M2HOME );
}

void OnExitDwnTnPlaneEnd( Critter& smit )
{
    Critter@[] critters;
    smit.GetMap().GetCrittersHex( smit.HexX, smit.HexY, 10, FIND_ALL | FIND_ONLY_NPC, critters );

    for( uint i = 0, iMax = critters.length(); i < iMax; i++ )
    {
        if( critters[ i ].StatBase[ ST_DIALOG_ID ] == DIALOG_ncr_grant )
        {
            if( critters[ i ].GetTalkedPlayers( null ) > 0 )
            {
                GameVar @ qVar = GetLocalVar( LVAR_ncr_smit_vs_vestin_status, smit.StatBase[ ST_VAR7 ] );
                if( valid( qVar ) && qVar.GetValue() == 2 )
                    qVar = 3;
                smit.ModeBase[ MODE_HIDE ] = 0;
                Smit2Ranch( smit );
                return;
            }
            else
            {
                GameVar @ qVar = GetLocalVar( LVAR_ncr_smit_vs_vestin_status, smit.StatBase[ ST_VAR7 ] );
                if( valid( qVar ) && qVar.GetValue() == 2 )
                    qVar = 6;                                                // провал
                smit.StatBase[ ST_VAR7 ] = critters[ i ].Id;
                smit.StatBase[ ST_VAR2 ] = STR_FIRST_GRANT;
                plane_SayNexPolicePhrase( smit );
                return;
            }
        }
    }

    smit.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_TEXT, STR_NO_GUARD_AT_RANCH );
    Smit2Ranch( smit );
}

void plane_SayNexPolicePhrase( Critter& smit )
{
    if( smit.StatBase[ ST_VAR2 ] <= STR_LAST_GRANT )
    {
        if( smit.StatBase[ ST_VAR2 ] % 2 == 1 )
        {
            smit.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_TEXT, smit.StatBase[ ST_VAR2 ] );
            smit.StatBase[ ST_VAR2 ]++;
            AddMiscPlane( smit, 0, __FullSecond + 3 * 60, "ncr_smit@plane_SayNexPolicePhrase" );
            return;

        }
        else
        {
            Critter @ cr = GetCritter( smit.StatBase[ ST_VAR7 ] );
            if( valid( cr ) )
            {
                if( cr.IsLife() )
                {
                    cr.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_TEXT, smit.StatBase[ ST_VAR2 ] );
                    smit.StatBase[ ST_VAR2 ]++;
                    AddMiscPlane( smit, 0, __FullSecond + 3 * 60, "ncr_smit@plane_SayNexPolicePhrase" );
                    return;
                }
            }
        }
    }
    smit.StatBase[ ST_VAR7 ] = 0;
    smit.StatBase[ ST_VAR2 ] = 0;
    _NpcEraseAllPlanes( smit );
    WalkToPos( smit, S_POS_DWTN_M2HOME );
}
void Smit2Ranch( Critter& smit )
{
    TransitToPos( smit, S_POS_RANCH_M2WESTIN );
    WalkToPos( smit, S_POS_RANCH_WESTIN );
}
/* ***************************** », наконец, убийство ¬ейстина ******************************* */
#define STR_FIRST_WESTINSMIT      ( 3460 )                    // перва€ строка в диалоге смит/грант
#define STR_LAST_WESTINSMIT       ( 3465 )                    // последн€€
#define STR_NO_WESTININHOME       ( 3466 )                    // вейстина нет на месте или он мертв
#define WESTIN_FIND_RADIUS        ( 5 )                       // радиус, в котором ищем живых вейстинов вокруг смита
void OnWestinMovePlaneEnd( Critter& smit )
{
    smit.StatBase[ ST_VAR2 ] = STR_FIRST_WESTINSMIT;
    if( !valid( GetWestin( smit ) ) )
    {
        DL( "Westin=invalid" );
        smit.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_TEXT, STR_NO_WESTININHOME );
        FailWestinKill( smit );
    }
    else
    {
        AddMiscPlane( smit, 0, __FullSecond + 3 * 60, "ncr_smit@plane_SayNexWestinPhrase" );
    }

}
void plane_SayNexWestinPhrase( Critter& smit )
{

    Critter@ westin = GetWestin( smit );
    if( !valid( westin ) )
    {
        FailWestinKill( smit );
    }
    if( smit.StatBase[ ST_VAR2 ] <= STR_LAST_WESTINSMIT )
    {
        if( smit.StatBase[ ST_VAR2 ] % 2 == 1 )
        {
            westin.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_TEXT, smit.StatBase[ ST_VAR2 ] );
        }
        else
        {
            smit.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_TEXT, smit.StatBase[ ST_VAR2 ] );
        }
        smit.StatBase[ ST_VAR2 ]++;
        AddMiscPlane( smit, 0, __FullSecond + 3 * 60, "ncr_smit@plane_SayNexWestinPhrase" );
    }
    else
    {
        AttackWestin( smit, westin );
    }


}
void FailWestinKill( Critter& smit )
{
    DL( "westin kill failked" );
    smit.StatBase[ ST_VAR2 ] = 0;
    WalkToPos( smit, S_POS_RANCH_M2WESTIN );
    // SetSmitPos(S_POS_DWNTN_HOME);
}

void AttackWestin( Critter& smit, Critter& westin )
{
    if( !AddAttackPlane( smit, 0, westin ) )
    {
        FailWestinKill( smit );
    }
}

Critter @ GetWestin( Critter & smit )
{
    Critter@[] critters;
    smit.GetMap().GetCrittersHex( smit.HexX, smit.HexY, WESTIN_FIND_RADIUS, FIND_ALL | FIND_ONLY_NPC, critters );

    for( uint i = 0, iMax = critters.length(); i < iMax; i++ )
    {
        if( critters[ i ].StatBase[ ST_DIALOG_ID ] == DIALOG_ncr_westin )
        {
            if( critters[ i ].IsLife() )
            {
                DL( "westin founded" );
                return critters[ i ];
            }
        }
    }
    return null;
}

/* ************************** ‘ункции дл€ использовани€ в диалогах *************************** */
void r_SmitGoToGates( Critter& player, Critter @ smit )
{
    if( !valid( smit ) )
        return;
    if( GetSmitPos() != S_POS_BAZAAR_HOME )
        return;

    WalkToPos( smit, S_POS_BAZAAR_M2GATES );
}

void r_SmitGoToPolice( Critter& player, Critter @ smit )
{
    if( !valid( smit ) )
        return;
    if( GetSmitPos() != S_POS_DWNTN_HOME )
        return;

    WalkToPos( smit, S_POS_DWNTN_M2POLICE );

}

void r_SmitGoToRanch( Critter& player, Critter @ smit )
{
    if( !valid( smit ) )
        return;

    // if(GetSmitPos()!=S_POS_DWNTN_POLICE) return;
    uint16 x = smit.HexX;
    uint16 y = smit.HexY;
    Map    @map = smit.GetMap();
    if( !valid( map ) )
        return;

    if( !GetNearEntire( map, HEX_NUM_DWNTN2RANCH, x, y ) )
        return;

    if( !AddWalkPlane( smit, 0, HEX_NUM_DWNTN2RANCH, HEX_NUM_DWNTN2RANCH, x, y, Random( 0, 5 ), false, 1 ) )
        return;

    smit.ModeBase[ MODE_HIDE ] = 1;
    smit.SkillBase[ SK_SNEAK ] = 300;
    // запоминаем игрока
    smit.StatBase[ ST_VAR7 ] = player.Id;
}


/* **********************************   DEBUG  *********************************************** */
void DL( string s )
{
    // Log(s);
}
// */
// ~checkvar 4215 0 1 0 0
// ~setvar 4220 0 1 0 1
// ~additemself 100 1
// ~settime 20 2246 10 31 06 00
// ~run test t2m 45 44 0 //  ксмиту домой на базар
// ~run test t2m 42 46 0 //  ксмиту в бар
