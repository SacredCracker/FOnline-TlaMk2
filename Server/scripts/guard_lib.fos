// Author: heX
// Прототип скриптов охраны
// ver 0.5

/*
        Todo:
        event_on_use_item - поставить проверку на кого использовали
        вынести весь функционал в отдельный файл (пусть даже пока без класса).
        поправить: наркотики и алкоголь не вызывают атаку.
        пропускать без обыска если это гражданин.
        пропускать не гражданина только если есть дневной пропуск.
        сделать таймауты на несмертельное 'наказание' игрока (а то охранник может долго бегать за игроком).
        сделать чтобы предупреждения дольше висели в памяти.
        сделать бан-лист - список провинившихся игроков которых небудут пропускать в город.
        конфискацию - при использовании наркотиков и алкоголя охрана принудительно обыскивает тебя и отнимает все это.
        изгнание - после 12 ночи всех не граждан выгоняют, ворота закрывают.
        пожалуй для рукопашного оружия предупреждения нужно более медленно наращивать


        PID_DAY_PASS - Дневной пропуск
        PID_FAKE_CITIZENSHIP - Фальшивое удостоверение Гражданина
 */

#include "_macros.fos"
#include "utils_for_array.fos"
#include "pids_groups.fos"

import bool AddAttackPlane( Critter& npc, uint priory, Critter& target ) from "npc_planes";
import bool AddAttackPlane( Critter& npc, uint priory, Critter& target, int minHp ) from "npc_planes";
import bool AddWalkPlane( Critter& npc, uint priory, uint16 hexX, uint16 hexY, uint8 dir, bool run, uint cut ) from "npc_planes";

// for guard searching script / для обыска
// зона предупреждение игрока
#define MESSAGE_PLAYER_ON_WARNING_HEX        ( 1 )
// зона обыскивание игрока
#define MESSAGE_PLAYER_ON_SEARCH_HEX         ( 2 )
// зона атаки
#define MESSAGE_PLAYER_ON_ATACK_HEX          ( 3 )
// зона первые ворота города (охрана дает последнее предупреждение)
#define MESSAGE_PLAYER_ON_PRE_ENTER          ( 4 )

// игрок 'просит' чтобы его пристрелили
#define MESSAGE_PLEASE_KILL_ME_I_AM_IDIOT    ( 13 )
// посылают ее охране города чтобы они атаковали нарушителя границы
#define MESSAGE_TO_GUARD_FOR_ATACK_PLAYER    ( 14 )

// НЕ РЕАЛИЗОВАННО
// типы нарушений
// поддерживаються константы класса SK_* (Skills)
// но многие SK_* еще не работают - смотри исходник.
// ? #define ALERT_TYPE_PICK_ANY_ITEM (18)
// ? #define ALERT_TYPE_DROP_ANY_ITEM (19)
#define ALERT_TYPE_UNKNOWN                   ( 20 )
#define ALERT_TYPE_ALCO                      ( 21 )
#define ALERT_TYPE_DRUG                      ( 22 )
#define ALERT_TYPE_ENTER_ON_DENY             ( 23 )
#define ALERT_TYPE_CONTRABAND                ( 24 )
#define ALERT_TYPE_SHOWGUN                   ( 25 )
#define ALERT_TYPE_SHOT                      ( 26 )
#define ALERT_TYPE_SHAHID                    ( 27 )
#define ALERT_TYPE_KILL                      ( 28 )
#define ALERT_TYPE_MAX                       ( 30 )

// задания охранны
#define JOB_MISC                             ( 0 )  // -хз
#define JOB_ATTACK                           ( 1 )  // -атака (общая атака)
#define JOB_WALK                             ( 2 )  // -идити
#define JOB_PICK                             ( 3 )  // поднять вещь
#define JOB_PATROL                           ( 4 )  // патрулирование
#define JOB_COURIER                          ( 5 )  // -курьер
#define JOB_FORFEITURE                       ( 6 )  // конфискация запрещенных вещей
#define JOB_PUNISH                           ( 7 )  // наказать на нарушение
#define JOB_KILL                             ( 8 )  // убить
#define JOB_SUPPORT                          ( 9 )  // поддержка (бежать к зоне конфликта)
#define JOB_HOLD                             ( 10 ) // удерживать позицию


// скорость проверки на наличие оружия
// не рекомендуеться сильно изменять
#define OBSERV_PERIOD                        ( REAL_SECOND( Random( 1, 6 ) ) )
#define PERCEPTION_ADD                       ( 7 )
#define MAX_ALERT                            ( 10 )
#define ATACK_MINUS_HP                       ( 10 )

// //////////////////////////////////////////////////////////////////
// прототип системы охраны
class CGuardsManager
{
    // системные массивы
    // нужно переделать в class
    uint[] Observing;   // Массив с id игроков за которыми следит охрана
    int8[] AlertCount;  // счетчик предупреждений
    int8[] AlertType;   // тип предупреждения (покачто не используеться)
    int8[] TimeOut;     // тайм аут (покачто не используеться)

    // настройки системы

    // фдаг таймера создался-ли таймер (CreateTimeEvent)
    // НЕ РЕАЛИЗОВАННО
    int TimerFlag;

    // номер диалога откуда беруться сообщения
    int Dialog;

    // прибавка к зрению
    // дистанция_обзора=npc.perception + PerceptionAdd
    int PerceptionAdd;

    // максимум предупреждений
    int MaxAlert;

    // если нпс снял столько жизней жизней (или больше) у нарушителя
    // то нпс прекращяет атаку (если игрок убрал оружие)
    int AtackMinusHp;

    // время тайм-аута после которого охраннику надоедает гоняться за нарушителем
    // НЕ РЕАЛИЗОВАННО
    int AtackTimeout;

    // таблица приоритетов предупреждений. если 0 то игнор этого типа.
    int[] AlertPriority;

    // инициализация
    CGuardsManager(){ construct( 0 ); }
    CGuardsManager( int dialog ){ construct( dialog ); }
	
	private void construct( int dialog )
	{
		Dialog = dialog;
        MaxAlert = MAX_ALERT;
        PerceptionAdd = PERCEPTION_ADD;
        AtackMinusHp = ATACK_MINUS_HP;

        AlertPriority.resize( ALERT_TYPE_MAX );
        TimerFlag = 0;
        AtackTimeout = 0;
	}

    // начинаем наблюдение за игроком
    int AddObserving( Critter@ player )
    {
        int i = Observing.find( player.Id );
        if( i == -1 )
        {
            Observing.insertLast( player.Id );
            AlertCount.insertLast( 0 );
            AlertType.insertLast( 0 );
            TimeOut.insertLast( 0 );
            return Observing.length() - 1;
        }
        return i;
    }

    // удаляем игрока из Observing
    void DelObserving( uint index )
    {
        Observing.removeAt( index );
        AlertCount.removeAt( index );
        AlertType.removeAt( index );
        TimeOut.removeAt( index );
    }

    // удаляем игрока из Observing
    void DelObserving( Critter@ player )
    {
        int i = Observing.find( player.Id );
        if( i != -1 )
            DelObserving( i );
    }

    // охранник делает предупреждение
    // или даже бьет
    void GuardWarn( Critter@ npc, Critter@ bastard, int alertLevel )
    {
        if( alertLevel == 0 )
            return;

        // нужна проверка на AlertType
        if( alertLevel > MaxAlert )
        {
            npc.SayMsg( SAY_SHOUT_ON_HEAD, TEXTMSG_DLG, DLGSTR( Dialog, 3 ) );
            int minhp = bastard.Stat[ ST_CURRENT_HP ] - AtackMinusHp;
            AddAttackPlane( npc, 0, bastard, ( minhp < 0 ? 0 : minhp ) );
        }
        else if( alertLevel > MaxAlert * 0.5 )
        {
            npc.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_DLG, DLGSTR( Dialog, 2 ) );
            if( npc.IsNoPlanes() )
                AddWalkPlane( npc, 0, bastard.HexX, bastard.HexY,
                              GetDirection( npc.HexX, npc.HexY, bastard.HexX, bastard.HexY ), false, 3 );
        }
        else
            npc.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_DLG, DLGSTR( Dialog, 1 ) );
    }

    // переодическое наблюдение
    void GuardObserving( Critter@ npc, bool modifyAlertCount )
    {
        uint myMap = npc.GetMapId();
        for( uint i = 0; i < Observing.length(); i++ )
        {
            // проходимся по listObserving в поисках плохих мальчиков
            Critter@ player = GetCritter( Observing[ i ] );
            if( @player !is null )
            {
                if( ( myMap != player.GetMapId() ) || ( player.Stat[ ST_CURRENT_HP ] <= 0 ) )
                {
                    // после смерти не вызываеться on_remove_critter поэтому игрок может 'телепортироваться'
                    DelObserving( player );
                    continue;
                }
				
                if( GetCrittersDistantion( npc, player ) < uint( npc.Stat[ ST_PERCEPTION ] + PerceptionAdd ) )
                {
                    // кто подошел близко
                    if( GuardItemTest( _CritGetItemHand( player ) ) )
                    {
                        // и все еще держит пушку в руках
                        if( modifyAlertCount && ( AlertCount[ i ] < MaxAlert * 2 ) )
                            AlertCount[ i ]++;
                        GuardWarn( npc, player, AlertCount[ i ] );
                    }
                    else // если он убрал пушку то успокаиваемся
                    {
                        if( AlertCount[ i ] <= -MaxAlert )
                            DelObserving( player );
                    }
                }
            }
            else                 // иначе удаляем запись
            {
                DelObserving( i );
                continue;
            }
        }
    }

    // тестируем предмет на разрешонность
    bool GuardItemTest( Item@ item )
    {
        if( @item !is null )
            if( item.GetType() == ITEM_TYPE_WEAPON )     // если у игрока в руке оружие
                return ( item.GetProtoId() != PID_SHIV ); // незамечаем заточку
        return false;
    }

    // //////////////
    // EVENT section
    // //////////////

    // Вызывается, когда в поле зрения NPC появляется криттер.
    void EventOnAddCritter( Critter& guard, Critter& player )
    {
        if( guard.Stat[ ST_CURRENT_HP ] <= 0 )
            return;
        if( player.IsNpc() || ( player.Stat[ ST_CURRENT_HP ] <= 0 ) )
            return;

        if( GuardItemTest( _CritGetItemHand( player ) ) ) // если достал пушку
        {
            int i = AddObserving( player );               // то начинаем наблюдать...
            AlertType[ i ] = ALERT_TYPE_SHOWGUN;          // запоминаем тип нарушения
            // если стоит близко то выдаем предупреждение
            if( GetCrittersDistantion( guard, player ) < uint( guard.Stat[ ST_PERCEPTION ] + PerceptionAdd ) )
                GuardWarn( guard, player, i );
        }
    }

    // Вызывается, когда из поля зрения NPC исчезает криттер.
    void EventOnRemoveCritter( Critter& guard, Critter& player )
    {
        if( guard.Stat[ ST_CURRENT_HP ] <= 0 )
            return;
        if( player.IsNpc() )
            return;

        int idx = -1;
        if( ( idx = Observing.find( player.Id ) ) != -1 ) // если нашли
            if( AlertCount[ idx ] <= 0 )                 	 // если нет притензий
                DelObserving( idx );						// забываем про него
    }

    // Вызывается если криттер освободился от задания
    void EventEndPlane( Critter& guard )
    {
        // if reason!!!
        if( !guard.IsLife() )
            return;
        if( guard.GetPlanes( null ) > 1 )
            return;                                 // else // если guard занят
        // guard.Wait(1000); // иначе подождем чютьчють - отключенно потомучто плохо работает
        GuardObserving( guard, false );
    }


    // Вызывается, когда в поле зрения NPC кто-либо перемещает итем из одного слота в другой.
    void EventOnMoveItem( Critter& guard, Critter& player, Item& item, uint8 fromSlot )
    {
        if( guard.Stat[ ST_CURRENT_HP ] <= 0 )
            return;
			
        if( player.IsNpc() || player.Stat[ ST_CURRENT_HP ] <= 0 )
            return;

        Item@ whatInHand = _CritGetItemHand( player );
        if( GuardItemTest( whatInHand ) )       // если достал пушку
        {
            // замечаем пукалку =)
            if( GetCrittersDistantion( guard, player ) < ( __LookMinimum * 2 ) )
                if( whatInHand.GetProtoId() == PID_RED_RYDER_BB_GUN || whatInHand.GetProtoId() == PID_ZIP_GUN )
                {
                    // на близком растоянии охранник замечает стремное оружие
                    guard.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_DLG, DLGSTR( Dialog, 7 ) );
                    return;
                }

            int index = AddObserving( player );         // то начинаем наблюдать...
            AlertType[ index ] = ALERT_TYPE_SHOWGUN;    // запоминаем тип нарушения
            if( GetCrittersDistantion( guard, player ) < uint( guard.Stat[ ST_PERCEPTION ] + PerceptionAdd ) )
            {
                AlertCount[ index ]++;
                GuardWarn( guard, player, AlertCount[ index ] );             // выдаем предупреждение
            }
        }
        else
        {
            if( item.GetType() == ITEM_TYPE_WEAPON && fromSlot == SLOT_HAND1 )
                if( GetCrittersDistantion( guard, player ) < uint( guard.Stat[ ST_PERCEPTION ] + PerceptionAdd ) )
                // если игрок убрал оружие
                {
                    int i = Observing.find( player.Id );
                    if( i != -1 )
                        if( ( AlertCount[ i ] > MaxAlert ) && ( AlertType[ i ] == ALERT_TYPE_SHOWGUN ) )
                        {
                            // AlertCount[i]=MaxAlert; // перестаем атаковать игрока
                            AlertCount[ i ]--;
                            guard.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_DLG, DLGSTR( Dialog, 4 ) );
                        }
                }
        }
    }

    // Сообщения от других охранников
    void EventOnMessage( Critter& guard, Critter& player, int num, int val )
    {
        if( num == MESSAGE_PLEASE_KILL_ME_I_AM_IDIOT )
        {
            int index = AddObserving( player );
            AlertCount[ index ] = AlertCount[ index ] + MaxAlert;
            AlertType[ index ] = ALERT_TYPE_ENTER_ON_DENY;
            // GuardWarn (...)
            AddAttackPlane( guard, 0, player, __DeadHitPoints );          // Мочим!
        }
    }

    // Вызывается, когда криттер использует итем.
    // используеться для запрета распития алкоголя
    // и принятия наркотиков в общественных местах.
    void EventOnUseItem( Critter& guard, Critter& player, Item& item, Critter@ onCritter, Item@ onItem, Scenery@ onScenery )
    {
        if( player.IsNpc() || ( player.Stat[ ST_CURRENT_HP ] <= 0 ) )
            return;
        if( guard.Stat[ ST_CURRENT_HP ] <= 0 )
            return;

        // игрок чтото использовал
        // и не факт что на себя, но покачто тут старый код

        if( GetCrittersDistantion( guard, player ) < uint( guard.Stat[ ST_PERCEPTION ] + PerceptionAdd ) )
        {
            uint16 itemType = item.GetType();
            switch( itemType )
            {
				case ( ITEM_TYPE_DRUG ):
				{
					if( Pids_DrugsAlcohol.find( item.GetProtoId() ) != -1 )
					{
						guard.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_DLG, DLGSTR( Dialog, 5 ) );
						// guard.Say(SAY_NORM_ON_HEAD, "Эх счаз бы тоже пивка наебнуть");
						int index = AddObserving( player );
						AlertCount[ index ]++;
						AlertType[ index ] = ALERT_TYPE_ALCO;
						if( AlertCount[ index ] > MaxAlert )
							GuardWarn( guard, player, AlertCount[ index ] );
					}
					if( Pids_Drugs.find( item.GetProtoId() ) != -1 )
					{
						guard.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_DLG, DLGSTR( Dialog, 6 ) );
						// guard.Say(SAY_NORM_ON_HEAD, "Ну как? Нормально торкнуло?");
						int index = AddObserving( player );
						AlertCount[ index ] = AlertCount[ index ] + MaxAlert;
						AlertType[ index ] = ALERT_TYPE_DRUG;
						if( AlertCount[ index ] > MaxAlert )
							GuardWarn( guard, player, AlertCount[ index ] );
					}
					break;
				}
            }
			
            if( -1 != Pids_MiscExplosions.find( item.GetProtoId() ) || item.GetProtoId() == PID_TOGGLE_SWITCH )   // r17
                player.SendMessage( MESSAGE_PLEASE_KILL_ME_I_AM_IDIOT, player.Id, MESSAGE_TO_ALL_ON_MAP );
        }
    }

    // при выбрасывании предметов игроком
    void EventOnDropItem( Critter& guard, Critter& player, Item& item )  // r17
    {
        if( player.IsNpc() || !player.IsLife() )
            return;
			
        if( -1 != Pids_MiscActiveExplosions.find( item.GetProtoId() ) )
            player.SendMessage( MESSAGE_PLEASE_KILL_ME_I_AM_IDIOT, player.Id, MESSAGE_TO_ALL_ON_MAP );
    }

    // Когда криттер в области видимости подвергается атаке.
    // используеться для контролем за перестрелками между игроками.
    void EventOnSmthAttack( Critter& guard, Critter& player, Critter& target )
    {
        if( player.IsNpc() )
            return;
			
        if( guard.Stat[ ST_CURRENT_HP ] <= 0 )
            return;
			
        Item@ weapon = player.GetItem( 0, SLOT_HAND1 );
        if( @weapon is null )
            return;

        bool isDead =       // если убили человека
                      ( target.Stat[ ST_CURRENT_HP ] < __DeadHitPoints ) &&
                      ( ( target.Stat[ ST_BODY_TYPE ] == BT_MEN ) || ( target.Stat[ ST_BODY_TYPE ] == BT_WOMEN ) || ( target.Stat[ ST_BODY_TYPE ] == BT_CHILDREN ) );

        // звук выстрела хорошо слышно - множим дистанцию на 4
        // может исключать из множителя WeaponLaser? - лазер по идее не слышно
        if( GetCrittersDistantion( guard, player ) <
            ( uint( guard.Stat[ ST_PERCEPTION ] + PerceptionAdd ) * 4 ) )
            if(
                ( weapon.GetProtoId() != PID_RED_RYDER_BB_GUN )                     // игнорим эту фигню =)
                && (
                    Pids_WeaponSmallGuns.find( weapon.GetProtoId() ) != -1 ||
                    Pids_WeaponBigGuns.find( weapon.GetProtoId() ) != -1 ||
                    Pids_WeaponEnergo.find( weapon.GetProtoId() ) != -1 )
                )
            {
                int index = AddObserving( player );
                AlertType[ index ] = ALERT_TYPE_SHOT;
                if( ( AlertCount[ index ] == 0 ) && ( not isDead ) )        // если это превое нарушение и объект не умер
                {
                    guard.SetDir( GetDirection( guard.HexX, guard.HexY, player.HexX, player.HexY ) );
                    guard.SayMsg( SAY_SHOUT_ON_HEAD, TEXTMSG_DLG, DLGSTR( Dialog, 8 ) );
                    AlertCount[ index ]++;
                }
                else
                {
                    AlertCount[ index ] = AlertCount[ index ] + MaxAlert + 1;
                    if( isDead )                                          // если обьект умер
                        AddAttackPlane( guard, 0, player );               // тогда наказываем нарушителя
                    else
                        GuardWarn( guard, player, AlertCount[ index ] );  // иначе плановое постреливание
                }
            }
    }

    // Когда криттер в области видимости подвергается краже.
    void EventStealing( Critter& guard, Critter& fromCrit, Critter& thief, bool success, Item& item, uint count )
    {
        AddAttackPlane( guard, 0, thief, int( thief.Stat[ ST_MAX_LIFE ] * 0.5 ) );
    }

    // наблюдение за подозрительными личностями.
    uint EventObserving( Critter@ guard )
    {
        if( Observing.length() == 0 )
            return OBSERV_PERIOD * 2;

        if( @guard is null )
        {
            Log( "Not valid npc from TimeEventGetCritter" );
            return 0;
        }
        if( guard.Stat[ ST_CURRENT_HP ] <= 0 )
            return OBSERV_PERIOD * 2;

        GuardObserving( guard, true );

        return OBSERV_PERIOD;
    }
} // CGuardsManager
// //////////////

